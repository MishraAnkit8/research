<%- include('./partials/head') %>
<!-- inline css -->
<!-- Navbar section -->
<%- include('./partials/header') %>
<!-- This is left sidebar  -->
<%- include('./partials/left-sidebar') %>
<!-- This is right side section -->
<main class="main" id="main-content">
    <div class="base-section coustom-section">
        <!--DASHBOARD CONTENT START-->
        <div class="errorHtml"></div>
        <div class="breadcrumbs-container">
            <ul class="breadcrumb">
                <li class="breadcrumb-link">
                    <a href="<%- BASE_URL %>research"> Research </a>
                </li>
                <li class="breadcrumb-link">
                    <a href="<%- BASE_URL %>research/book-publication-main"> Book Publication Dashboard </a>
                </li>
                <li class="breadcrumb-link"> EDITED BOOK  PUBLICATION  </li>
            </ul>
        </div>
        <!-- <div class="card table-card"></div> -->
        <div >
            <div class="table-card-header text-uppercase d-flex align-items-center justify-content-between">
                <div class="list-header">
                    <h5 class="pl-2">EDITED BOOK PUBLICATION</h5>
                </div>
                <div >
                    <button id="edited-book-add-modal" type="button" class="btn btn-primary add-modal" data-toggle="modal"
                        data-target="#edited-book-modal">
                        <i class="fas fa-plus plus"></i>
                    </button>
                </div>
            </div>
            <div class="card-body table-responsive">
                <div class="d-flex justify-content-between">
                    <div>
                        <label>Show Entries</label>
                        <select class="form-select" id="changeEntry">
                            <option value="5">5</option>
                            <option value="10">10</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                            <option value="150">150</option>
                            <option value="200">200</option>
                            <option value="250">250</option>
                            <option value="300">300</option>
                            <option value="350">350</option>
                            <option value="400">400</option>
                            <option value="500">500</option>
                            <option value="800">800</option>
                            <option value="1000">1000</option>
                        </select>
                    </div>
                    <div>
                        <div class="table-searchbar-container">
                            <button type="button" id="searchBtn"><i class="fas fa-search"></i></button>
                            <input type="search" id="searchKeyword" placeholder="Enter keywords" class="table-searchbar">
                        </div>
                    </div>
                </div>
                <table class="table custom-table research-pagination" id="edited-book-list">
                    <thead>
                        <th class="col-lg-1">#</th>
                        <th class="col-lg-1">Author's name</th>
                        <th class="col-lg-1">Publication year</th>
                        <th class="col-lg-1">Book title</th>
                        <th class="col-lg-1">ISBN Number</th>
                        <th class="col-lg-1">Publisher Name</th>
                        <th class="col-lg-1">Action</th>
                    </thead>
                    <% editedBookList.forEach(function(editedBook,index) { %>
                        <tr row="scope" data-editedBook-id="<%- editedBook.id %>"
                            data-page-number="<%- editedBook.page_number %>" data-edition="<%- editedBook.edition %>"
                            data-publication-place="<%- editedBook.publication_place %>"
                            data-publisher-category="<%- editedBook.publisher_category %>"
                            data-book-url="<%- editedBook.book_url %>" data-doi-book-id="<%-editedBook.doi_id %>"
                            data-number-of-nmims-authors="<%- editedBook.number_of_nmims_authors %>"
                            data-nmims-authors="<%- editedBook.nmims_authors %>"
                            data-nmims-campus-authors="<%- editedBook.nmims_campus_authors %>"
                            data-nmims-school-authors="<%- editedBook.nmims_school_authors %>"
                            data-supporting-documents="<%- editedBook.supporting_documents %>"
                            data-chapter-title="<%- editedBook.chapter_title %>"
                            data-editor-name="<%-editedBook.editor_name %>">
                            <td class="row-count col-lg-1"><%- index+1 %></td>
                            <td class="author-first-name col-lg-1"><%- editedBook.author_name %></td>
                            <td class="publication-year col-lg-1"><%- editedBook.publication_year %></td>
                            <td class="book-title col-lg-1"><%- editedBook.book_title %></td>
                            <td class="isbn-no col-lg-1"><%- editedBook.isbn_no %></td>
                            <td class="publisher-name col-lg-1"><%- editedBook.publisher_name %></td>
                            <td class="col-lg-1">
                                <label class="view" data-editedBook-id="<%- editedBook.id %>"><i class="fa-solid fa-eye view text-danger"
                                    data-editedBook-id="<%- editedBook.id %>"></i></label>
                                <label class="edit" data-editedBook-id="<%- editedBook.id %>"><i class="fa fa-edit edit text-danger"
                                    data-editedBook-id="<%- editedBook.id %>"></i></label>
                                <label class="delete" data-editedBook-id="<%- editedBook.id %>"><i
                                    class="fa-solid fa-trash delete text-danger" data-editedBook-id="<%- editedBook.id %>"></i></label>
                            </td>
                        </tr>
                        <% }); %>
                </table>
                <div class="d-flex justify-content-between">
                    <div>
                        <label>Total entries: <%- rowCount %></label>
                        <label class="d-none" id="row-count"> <%- rowCount %></label>
                    </div>
                    <div>
                        <button id="prevBtn" class="btn btn-primary">Previous</button>
                        <button id="nextBtn" class="btn btn-primary">Next</button>
                        <p id="pagination" class="pagination-search"></p>
                    </div>
                </div>
            </div>
        </div>
        <!--Import Modal -->
        <div class="modal fade" id="open-program-modal" tabindex="-1" aria-labelledby="open-program-modal"
            aria-hidden="true">
        </div>
        <!-- EDIT PROGRAM AND UPDATE -->
        <div class="modal fade" id="edit-program-modal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editModalLabel">Update Program</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div id="errorHtml"></div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="exampleInputEmail1" class="form-label">Program Name</label>
                            <input type="text" class="form-control" id="program_name" name="program_name">
                            <input type="hidden" class="form-control" id="hidden_id" name="hidden_id">
                        </div>
                        <div class="mb-3">
                            <label for="exampleInputPassword1" class="form-label">Program Type</label>
                            <select class="form-control" name="program_type_lid" id="program_type_lid">
                                <option value="1">Full Time</option>
                                <option value="2">Part Time</option>
                            </select>
                        </div>
    
                        <div class="mb-3">
                            <label for="abbr" class="form-label">Program Abbr</label>
                            <input type="text" class="form-control" id="abbr" name="abbr">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary updateProgram">Update</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>
<!-- edited book Modal  form -->
<div class="modal fade " id="edited-book-modal" tabindex="-1" role="dialog" aria-labelledby="case-study"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-lg modal-fullscreen p-5" role="document">
        <div class="modal-content modal-content-data validate-input">
            <div class="modal-header">
                <h5 class="modal-title" id="case-study">EDITED BOOK </h5>
                <div class="close" data-dismiss="modal" aria-label="Close">
                        <span type="button" aria-hidden="true"><i class="fas fa-times fa"></i></span>
                </div>
            </div>
            <div class="modal-body">
                <div class="row">
                    <!-- author's first name -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="author-first-name" class="form-label  fw-bold">Author's  Name</label>
                        <input type="text" name="author-first-name" data-validate="isEmpty,isAlphabeticWords,isLength:2:255" data-err-msg="This field is required and min length > 1." id="author-first-name"
                            class="form-control"  required>
                    </div>
                    <!-- Title of edited book -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="chapter-title" class="form-label fw-bold">Title Of Chapeter</label>
                        <input type="text" name="titleOfBook" id="chapter-title" data-validate="isEmpty,isNotNumber,isExist,isLength:2:255" data-err-msg="This field is required and min length > 1."
                            class="form-control"  required>
                    </div>
                    <!-- Title of BOOK -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="book-title" class="form-label fw-bold">Title of book</label>
                        <input type="text" name="titleOfBook" id="book-title" data-validate="isEmpty,isNotNumber,isExist,isLength:2:255" data-err-msg="This field is required and min length > 1."
                            class="form-control"  required>
                    </div>
                    <!-- Edition -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="edition" class="form-label fw-bold">Edition (if it isn't the first)</label>
                        <input type="text" name="edition" id="edition" data-validate="isEmpty,isAlphaNumeric" data-err-msg="AlphaNumeric value is required." class="form-control" required>
                    </div>
                    <!-- EDITOR NAME -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="edition" class="form-label fw-bold">Editor(s) Of The Book</label>
                        <input type="text" name="editor" data-validate="isEmpty,isAlphabeticWords" data-err-msg="This field is required and min length > 1." id="editor-name" class="form-control" required>
                    </div>
                    <!-- PAGE number -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="Volume" class="form-label fw-bold">Page number</label>
                        <input type="number" name="vol" id="page-number" data-validate="isEmpty,isNumber,isLength:2:255" data-err-msg="Numeric value is required." class="form-control" required>
                    </div>
                    <!-- Publisher Name -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="publisherName" class="form-label fw-bold">Publisher Name</label>
                        <input type="text" name="vol" id="publisher-name" data-validate="isEmpty,isAlphabeticWords,isLength:2:255" data-err-msg="This field is required and min length > 1." class="form-control" required>
                    </div>
                     <!-- Publisher Category  -->
                     <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="publisher-category" id="publisher-category" class="form-label fw-bold mb-3">Publisher Category</label><br>
                        <div class="form-check-inline">
                            <label for="inter-national" class="form-check-label">
                                <input type="radio" class="form-check-input" id="inter-national" name="publisher-category" value="International"> International
                            </label>
                        </div>
                        <div class="form-check-inline">
                            <label for="national" class="form-check-label">
                                <input type="radio" class="form-check-input" id="national" name="publisher-category" value="National" checked> National
                            </label>
                        </div>
                    </div>
                    <!-- Publication Year -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="publicationYear" class="form-label fw-bold">Publication Year</label>
                        <input type="number" name="Year" id="publication-year" data-validate="isEmpty,isNumber" data-err-msg="Numeric value is required." class="form-control" required>
                    </div>
                    <!-- URL of the book publication -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="URL of book" class="form-label fw-bold">URL Of Book</label>
                        <input type="text" name="URL" id="book-url" data-validate="isEmpty,isNotNumber,isExist,isLength:2:255" data-err-msg="This field is required and min length > 1." class="form-control" required>
                    </div>
                    <!-- ISBN Number -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="caseStudy" class="form-label fw-bold">ISBN Number</label>
                        <input type="number" name="ISBN-Number" id="isbn-no" class="form-control">
                    </div>
                    <!-- DOI of book -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="doi-book-id" class="form-label fw-bold">DOI ID of book</label>
                        <input type="number" name="doi-book-id" id="doi-book-id" class="form-control">
                    </div>
                    <!-- Place of Publication -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="publication-place" class="form-label fw-bold">Place of Publication</label>
                        <input type="text" name="publication-place" id="publication-place" data-validate="isEmpty,isNotNumber,isExist,isLength:2:255" data-err-msg="This field is required and min length > 1."
                            class="form-control" required>
                    </div>
                    <!-- No. of NMIMS Authors -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="number-of-nmims-authors" class="form-label fw-bold ">No. of NMIMS Authors</label>
                        <input type="number" name="nmims-authors" id="number-of-nmims-authors" data-validate="isEmpty,isNumber"
                        data-err-msg="Numeric value is required." class="form-control " required/>
                    </div>
                    <!-- Name of NMIMS Authors -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="nmims-authors" class="form-label fw-bold ">Name of NMIMS Authors</label>
                        <input type="text" name="nmimsAuthors" id="nmims-authors" data-validate="isEmpty,isAlphabeticWords,isLength:2:255" data-err-msg="This field is required and min length > 1."
                            class="form-control " required/>
                    </div>
                    <!-- NMIMS Campus - Author -->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="nmims-campus-authors" class="form-label fw-bold ">NMIMS Campus Author</label>
                        <input type="url" name="nmimsCampusAuthors" id="nmims-campus-authors" data-validate="isEmpty,isAlphabeticWords,isLength:2:255" data-err-msg="This field is required and min length > 1."
                        class="form-control " required/>
                    </div>
                    <!--NMIMS School - Author-->
                    <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                        <label for="nmims-school-authors" class="form-label fw-bold ">NMIMS School Author</label>
                        <input type="text" name="nmimsSchoolAuthors" id="nmims-school-authors" data-validate="isEmpty,isAlphabeticWords,isLength:2:255" data-err-msg="This field is required and min length > 1."
                            class="form-control " required/>
                    </div>
                     <!-- Upload Supporting Documents-->
                     <div class="form-group col-lg-6 col-md-8 col-sm-12 mb-4">
                        <div class="col-lg-6 col-md-8 col-sm-12">
                            <label for="supporting-documents" class="form-label fw-bold ">
                                Upload Supporting Documents
                            </label>
                           <div class="d-flex">
                             <input type="file" name="researchSupportingDocument" id="supporting-documents" data-validate="isEmpty,isExist,isFile" data-err-msg="File is required."  class="col-md-12 form-control " required multiple>
                             <button class="download-btn download-file" id="edited-book-edit"><i class="fas fa-download text-danger"></i></button>
                            </div>
                        </div>
                      </div>
                     <div class="form-group col-lg-6 col-md-2 col-sm-12 mb-4">
                        <div id="file-view" class="h-10 w-10">
                        </div>
                    </div>
                </div>
            </div>
            <!-- footer button -->
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary d-none" id="submit-btn">Submit</button>
                <button type="button" class="btn btn-primary d-none" id="update-btn">update</button>
            </div>
        </div>
    </div>
</div>
<!--  Edited book publication view modal -->
<div class="modal fade " id="edited-book-view-modal" tabindex="-1" role="dialog" aria-labelledby="edited-book-view-modal"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-lg modal-fullscreen p-5" role="document">
        <div class="modal-content modal-content-data">
            <div class="modal-header">
                <h5 class="modal-title" id="case-study">EDITED BOOK </h5>
                <div class="close" data-dismiss="modal" aria-label="Close">
                        <span style="font-size: 24px; font-weight: normal;" type="button" aria-hidden="true"><i class="fas fa-times fa"></i></span>
                </div>
            </div>
            <div class="modal-body">
                <div class="row">
                    <!-- author's first name -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text">Author's  Name :</div>
                            <label class="view-content" id="view-first-name"></label>
                        </div>
                    </div>
                    <!-- Title of case study -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text">Title Of Book  :</div>
                            <label class="view-content" id="view-book-title"></label>
                        </div>
                    </div>
                    <!-- Publication place -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text"> Place Of Publication :</div>
                            <label class="view-content" id="view-publication-place"></label>
                        </div>
                    </div>
                    <!-- Edition -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text">Edition :</div>
                            <label class="view-content" id="view-edition"></label>
                        </div>
                    </div>
                      <!-- Editor name -->
                      <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text">Editor Name :</div>
                            <label class="view-content" id="view-editor-name"></label>
                        </div>
                    </div>
                      <!-- chapter title -->
                      <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text">Chapter Title :</div>
                            <label class="view-content" id="view-chapter-title"></label>
                        </div>
                    </div>
                      <!-- publisher category -->
                      <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text">Publishre Category :</div>
                            <label class="view-content" id="view-publisher-category"></label>
                        </div>
                    </div>
                    <!-- page number -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text">Page Number:</div>
                            <label class="view-content" id="view-page-number"></label>
                        </div>
                    </div>
                    <!-- doi book id -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3 doi-book-id">
                        <div class="box">
                            <div class="task-sub-title sub-title-text">DOI ID Of Book :</div>
                            <label class="view-content" id="view-doi-book-id"></label>
                        </div>
                    </div>
                    <!-- Publisher Name -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text">Publisher Name :</div>
                            <label class="view-content" id="view-publisher-name"></label>
                        </div>
                    </div>
        
                    <!-- Publication Year -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text">Publication Year :</div>
                            <label class="view-content" id="view-publication-year"></label>
                        </div>
                    </div>
                    <!-- ISBN NUMBER -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text">ISBN Number :</div>
                            <label class="view-content" id="view-isbn-no"></label>
                        </div>
                    </div>
                    <!-- URL OF BOOK -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text"> URL Of Book:</div>
                            <label class="view-content" id="view-book-url"></label>
                        </div>
                    </div>
                    <!-- Number of nmims authors -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text"> NO. OF NMIMS Authors :</div>
                            <label class="view-content" id="view-no-of-nmims-authors"></label>
                        </div>
                    </div>
                    <!-- Publication Year -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text"> Name oF NMIMS Authors :</div>
                            <label class="view-content" id="view-nmims-authors"></label>
                        </div>
                    </div>
                    <!-- NMIMS CAMPUS AUTHOR -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text">NMIMS Campus Authors:</div>
                            <label class="view-content" id="view-nmims-campus-authors"></label>
                        </div>
                    </div>
                    <!-- NMIMS SCHOOL AUTHOR -->
                    <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text">NMIMS School Authors :</div>
                            <label class="view-content" id="view-nmims-school-authors"></label>
                        </div>
                    </div>
                     <!-- Supporting Document -->
                     <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="task-sub-title sub-title-text"><button class="btn btn-primary h-10 w-10 download-file" id="edited-book-file-view">
                                    <i class="fas fa-download text-danger"></i> Download supportingDocuments
                                </button></div>
                            <label class="view-content" id="view-support-document"></label>
                        </div>
                    </div>
                </div>
            </div>
            <!-- footer button -->
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- inline javascript -->
<script>
    //for index icrement
    const rowCount = document.getElementById('row-count');
    let rowIndex = rowCount.innerText;
    let indexValue = parseInt(rowIndex, 10);
    const editedBookList = document.getElementById('edited-book-list');
    const submitBtn = document.getElementById('submit-btn');
    const updateBtn = document.getElementById('update-btn');
    const addnewEditedBook = document.getElementById('edited-book-add-modal');
    let editedBookId , editedBookRowToBeUpdated;
    const doiIdBookClass = document.querySelector('.doi-book-id');
    // const fileView = document.getElementById('file-view');
    // const downloadLink = document.getElementById('downloadLink');

    addnewEditedBook.addEventListener('click', function (event) {
            console.log('clikeddd')
            if (event.target.tagName === 'BUTTON' && event.target.classList.contains('add-modal') || event.target.classList.contains('plus')) {
                updateBtn.classList.add('d-none');
                submitBtn.classList.remove('d-none');
                // fileView.classList.add('d-none');
                // modalImage.classList.add('d-none');
                // d-none download button
                const editedBookDataFiles = document.querySelector('#edited-book-edit');
                editedBookDataFiles.classList.add('d-none');
                const authorName = document.getElementById('author-first-name');
                const bookTitle = document.getElementById('book-title');
                const edition = document.getElementById('edition');
                const editorName = document.getElementById('editor-name');
                const chapterTitle = document.getElementById('chapter-title');
                const isbnNo = document.getElementById('isbn-no');
                const publicationPlace = document.getElementById('publication-place');
                const publisherCategoryNational = document.getElementById('national');
                const publisherCategoryInternational = document.getElementById('inter-national');
                const pageNumber = document.getElementById('page-number');
                const publisherName = document.getElementById('publisher-name');
                const publicationYear = document.getElementById('publication-year');
                const bookUrl = document.getElementById('book-url');
                const doiBookId = document.getElementById('doi-book-id');
                const numberOfNmimsAuthors = document.getElementById('number-of-nmims-authors');
                const nmimsAuthors = document.getElementById('nmims-authors');
                const nmimsCampusAuthors = document.getElementById('nmims-campus-authors');
                const nmimsSchoolAuthors = document.getElementById('nmims-school-authors');
                const supportingDocuments = document.querySelector('input[type="file"]');

                // making input fileds empty
                authorName.value = '';
                bookTitle.value = '';
                edition.value = '';
                editorName.value = '';
                chapterTitle.value = '';
                isbnNo.value = '';
                // publicationPlace.checked = false;
                //  publisherCategoryNational.checked = false
                //  publisherCategoryInternational.checked = false;
                pageNumber.value = '';
                publisherName.value = '';
                publicationYear.value = '';
                bookUrl.value = '';
                doiBookId.value = '';
                numberOfNmimsAuthors.value = '';
                nmimsAuthors.value = '';
                nmimsCampusAuthors.value = '';
                nmimsSchoolAuthors.value = '';
                supportingDocuments.value = '';
            }
        })
    
    // for inserting data 
    const insertEditedBook = async (url) => {
            const editedBook = new FormData();
            const authorName = document.getElementById('author-first-name').value;
            const bookTitle = document.getElementById('book-title').value;
            const edition = document.getElementById('edition').value;
            const isbnNo = document.getElementById('isbn-no').value;
            const editorName = document.getElementById('editor-name').value;
            const chapterTitle = document.getElementById('chapter-title').value;
            const publicationPlace = document.getElementById('publication-place').value;
            const publisherCategory = document.querySelector('input[name="publisher-category"]:checked').value;
            console.log('publisherCategory ==>>', publisherCategory)
            const pageNumber = document.getElementById('page-number').value;
            console.log('pageNumber ==>>', pageNumber)
            const publisherName = document.getElementById('publisher-name').value;
            const publicationYear = document.getElementById('publication-year').value;
            const bookUrl = document.getElementById('book-url').value;
            const doiBookId = document.getElementById('doi-book-id').value;
            const numberOfNmimsAuthors = document.getElementById('number-of-nmims-authors').value;
            const nmimsAuthors = document.getElementById('nmims-authors').value;
            const nmimsCampusAuthors = document.getElementById('nmims-campus-authors').value;
            const nmimsSchoolAuthors = document.getElementById('nmims-school-authors').value;
            const supportingDocuments = document.getElementById('supporting-documents');
            // appending value and for files to upload multiple value
            const editedBookFilesData = supportingDocuments.files;
            if (editedBookFilesData.length > 0) {
                for (let i = 0; i <= editedBookFilesData.length - 1; i++) {
                    console.log('filename ===>>', editedBookFilesData[i].name)
                    if (editedBookFilesData && editedBookFilesData[i].name) {
                        editedBook.append('researchSupportingDocument', editedBookFilesData[i]);

                    }
                }
            }

            editedBook.append('authorName', authorName);
            editedBook.append('bookTitle', bookTitle);
            editedBook.append('edition', edition);
            editedBook.append('isbnNo', isbnNo);
            editedBook.append('editorName', editorName);
            editedBook.append('chapterTitle', chapterTitle);
            editedBook.append('publicationPlace', publicationPlace);
            editedBook.append('publisherCategory', publisherCategory);
            editedBook.append('pageNumber', pageNumber);
            editedBook.append('publisherName', publisherName);
            editedBook.append('publicationYear', publicationYear);
            editedBook.append('bookUrl', bookUrl);
            editedBook.append('doiBookId', doiBookId);
            editedBook.append('numberOfNmimsAuthors', numberOfNmimsAuthors);
            editedBook.append('nmimsAuthors', nmimsAuthors);
            editedBook.append('nmimsCampusAuthors', nmimsCampusAuthors);
            editedBook.append('nmimsSchoolAuthors', nmimsSchoolAuthors);

            fetch(url, {
                method: 'POST',
                body: editedBook
            })
                .then((result) => {
                    return result.json()
                })
                .then((data) => {
                    if (data.status === 'Done') {
                        console.log('data ==>>', data)
                        const newEditedBook = document.createElement('tr');
                        newEditedBook.setAttribute('data-page-number', data.editedBooKData.pageNumber);
                        newEditedBook.setAttribute('data-edition', data.editedBooKData.edition);
                        newEditedBook.setAttribute('data-editor-name', data.editedBooKData.editorName);
                        newEditedBook.setAttribute('data-chapter-title', data.editedBooKData.chapterTitle);
                        newEditedBook.setAttribute('data-publication-place', data.editedBooKData.publicationPlace);
                        newEditedBook.setAttribute('data-publisher-category', data.editedBooKData.publisherCategory);
                        newEditedBook.setAttribute('data-book-url', data.editedBooKData.bookUrl);
                        newEditedBook.setAttribute('data-doi-book-id', data.editedBooKData.doiBookId);
                        newEditedBook.setAttribute('data-number-of-nmims-authors', data.editedBooKData.numberOfNmimsAuthors);
                        newEditedBook.setAttribute('data-nmims-authors', data.editedBooKData.nmimsAuthors);
                        newEditedBook.setAttribute('data-nmims-campus-authors', data.editedBooKData.nmimsCampusAuthors);
                        newEditedBook.setAttribute('data-nmims-school-authors', data.editedBooKData.nmimsSchoolAuthors);
                        newEditedBook.setAttribute('data-supporting-documents', data.editedBooKData.supportingDocuments);
                        const sum = indexValue + Number(data.rowCount);
                        console.log('sum ===>>>>', sum)
                        newEditedBook.innerHTML = `
                            <td> ${sum}</td>
                            <td class="author-first-name">${data.editedBooKData.authorName}</td>
                            <td class="publication-year">${data.editedBooKData.publicationYear}</td>
                            <td class="book-title">${data.editedBooKData.bookTitle}</td>
                            <td class="isbn-no">${data.editedBooKData.isbnNo}</td>
                            <td class="publisher-name">${data.editedBooKData.publisherName}</td>
                            <td>
                                <label class="view" data-editedbook-id="${data.editedBookId}"><i class="fa-solid fa-eye view text-danger"
                                    data-editedbook-id="${data.editedBookId}"></i></label>
                                <label class="edit"data-editedbook-id="${data.editedBookId}"><i class="fa fa-edit edit text-danger"
                                    data-editedbook-id="${data.editedBookId}"></i></label>
                                <label class="delete"data-editedbook-id="${data.editedBookId}"><i class="fa-solid fa-trash delete text-danger"
                                    data-editedbook-id="${data.editedBookId}"></i></label>
                            </td> `;
                        editedBookList.append(newEditedBook);
                        // $('#edited-book-modal').modal('hide');
                        Swal.fire({
							position: "top-center",
							icon: "success",
							title: `${data.message}`,
							showConfirmButton: false,
							timer: 1500
						});
                    }
                    else{
                        console.log('data ===>>:>>', data)
                        Swal.fire({
							position: "top-center",
							icon: "error",
							color : "red",
							with : "20PX",
							html: `<span style="color: red;">${data.message}</span>`,
							showConfirmButton: false,
						});
                    }
                }).catch((error) => {
                    const message = 'Internal Server Error';
                    console.log('error ===>>>>', error);
                    Swal.fire({
							position: "top-center",
							icon: "error",
							color : "red",
							with : "20PX",
							html: `<span style="color: red;">${message}</span>`,
							showConfirmButton: false,
						});
                } )
        }

    submitBtn.addEventListener('click', async () => {
            const isValid = validateRequiredFormFields(submitBtn);
            if (isValid) {
                await insertEditedBook('<%- BASE_URL %>research/book-publication-main/edited-book-publication/insert');
            }
            else {
                Swal.fire({
							position: "top-center",
							icon: "error",
							title: "Validation Failed",
							color : "red",
							showConfirmButton: false,
						});
            }
        })
    
    editedBookList.addEventListener('click', (event) => {
            // for updation
            if (event.target.classList.contains('edit')) {
                console.log('clickeddd');
                removeErrorMsg();
                editedBookRowToBeUpdated = event.target.closest('tr');
                // console.log('editedBookRowToBeUpdated ==>>', editedBookRowToBeUpdated);
                // function call tyo set download attribut into button
                setFileNameAttributeToBeDownload(editedBookRowToBeUpdated)
                editedBookId = event.target.getAttribute('data-editedbook-id');
                console.log('editedBookId ==>>', editedBookId);
                $('#edited-book-modal').modal('show');
                updateBtn.classList.remove('d-none');
                submitBtn.classList.add('d-none');
                // fileView.classList.remove('d-none');
                // modalImage.classList.remove('d-none');
                const authorName = document.getElementById('author-first-name');
                const bookTitle = document.getElementById('book-title');
                const edition = document.getElementById('edition');
                const editorName = document.getElementById('editor-name');
                const chapterTitle = document.getElementById('chapter-title');
                const isbnNo = document.getElementById('isbn-no');
                const publicationPlace = document.getElementById('publication-place');
                const publisherCategoryNational = document.getElementById('national');
                const publisherCategoryInternational = document.getElementById('inter-national');
                const pageNumber = document.getElementById('page-number');
                const publisherName = document.getElementById('publisher-name');
                const publicationYear = document.getElementById('publication-year');
                const bookUrl = document.getElementById('book-url');
                const doiBookId = document.getElementById('doi-book-id');
                const numberOfNmimsAuthors = document.getElementById('number-of-nmims-authors');
                const nmimsAuthors = document.getElementById('nmims-authors');
                const nmimsCampusAuthors = document.getElementById('nmims-campus-authors');
                const nmimsSchoolAuthors = document.getElementById('nmims-school-authors');
                const supportingDocuments = editedBookRowToBeUpdated.getAttribute('data-supporting-documents');

                // const imageRoute = '<%- BASE_URL %>research/book-publication-main/edited-book-publication/viewing/';
                // const fileRoute = '<%- BASE_URL %>research/book-publication-main/edited-book-publication/download/';
                // console.log('fileRoute ==>>', fileRoute)
                // if(imageRoute){
                //     modalImage.classList.remove('d-none');
                // }
                // else{
                //     modalImage.classList.add('d-none');
                // }
                // handleFilePreviewAndDownload(supportingDocuments, imageRoute, fileRoute);
                // assigning related row data value
                authorName.value = editedBookRowToBeUpdated.querySelector('.author-first-name').innerText;
                bookTitle.value = editedBookRowToBeUpdated.querySelector('.book-title').innerText;
                edition.value = editedBookRowToBeUpdated.getAttribute('data-edition');
                editorName.value = editedBookRowToBeUpdated.getAttribute('data-editor-name');
                chapterTitle.value = editedBookRowToBeUpdated.getAttribute('data-chapter-title');
                publisherName.value = editedBookRowToBeUpdated.querySelector('.publisher-name').innerText;
                isbnNo.value = editedBookRowToBeUpdated.querySelector('.isbn-no').innerText;
                publicationPlace.value = editedBookRowToBeUpdated.getAttribute('data-publication-place');
                const publisherCategory = editedBookRowToBeUpdated.getAttribute('data-publisher-category');
                if (publisherCategory === 'National') {
                    publisherCategoryNational.checked = true;
                }
                else {
                    publisherCategoryInternational.checked = true;
                }
                pageNumber.value = editedBookRowToBeUpdated.getAttribute('data-page-number');
                publicationYear.value = editedBookRowToBeUpdated.querySelector('.publication-year').innerText;
                bookUrl.value = editedBookRowToBeUpdated.getAttribute('data-book-url');
                doiBookId.value = editedBookRowToBeUpdated.getAttribute('data-doi-book-id');
                numberOfNmimsAuthors.value = editedBookRowToBeUpdated.getAttribute('data-number-of-nmims-authors');
                nmimsAuthors.value = editedBookRowToBeUpdated.getAttribute('data-nmims-authors');
                nmimsCampusAuthors.value = editedBookRowToBeUpdated.getAttribute('data-nmims-campus-authors');
                nmimsSchoolAuthors.value = editedBookRowToBeUpdated.getAttribute('data-nmims-school-authors');

                supportingDocuments.textContent = editedBookRowToBeUpdated.getAttribute('data-supporting-documents');
            }

            //  for delete   
            if (event.target.classList.contains('delete')) {
                console.log('clickedddd');
                const editedBookPublicatRowToBeDeleted = event.target.closest('tr');
                console.log('editedBookPublicatRowToBeDeleted ==>>', editedBookPublicatRowToBeDeleted)
                editedBookId = event.target.getAttribute('data-editedbook-id');
                console.log('ID ==>>', editedBookId);
                let confirmDelete = "Do you want to delete the Record Of  Publication?";
                if (confirmDelete) {
                    Swal.fire({
                        title: "Are you sure?",
                        text: "You won't be able to revert this!",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes, delete it!"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Execute fetch request here after confirmation
                            fetch('<%- BASE_URL %>research/book-publication-main/edited-book-publication/delete', {
                                method: 'POST',
                                headers: {
                                    'content-type': 'application/json'
                                },
                                body: JSON.stringify({ editedBookId })
                            })
                                .then((result) => result.json())
                                .then((data) => {
                                    if (data.status === 'Done') {
                                        console.log('data ==>>', data);
                                        // Assuming bookPublicatRowToBeDeleted is correctly defined earlier in your code
                                        editedBookPublicatRowToBeDeleted.remove();
                                        Swal.fire({
                                            title: "Deleted!",
                                            text: "Record has been deleted.",
                                            icon: "success"
                                        }).then(() => {
                                            location.reload();
                                        });
                                    }
                                    else{
                                        Swal.fire({
                                        position: "top-center",
                                        icon: "error",
                                        title: `${data.errorCode}`,
                                        color: "red",
                                        with: "20PX",
                                        html: `<span style="color: red;">${data.message}</span>`,
                                        showConfirmButton: false,
                                    });
                                    }
                                })
                                .catch((error) => {
                                    console.error('Error:', error);
                                    Swal.fire({
                                        position: "top-center",
                                        icon: "error",
                                        title: `${error}`,
                                        color: "red"
                                    });
                                });
                        }
                    });
                }
                else {
                    return
                } 
            }

            // for view
            if (event.target.classList.contains('view')) {
                console.log('clickedddd');
                const editedBookRowToBeViewed = event.target.closest('tr');
                editedBookId = event.target.getAttribute('data-editedbook-id');
                console.log('ID ==>>', editedBookId);
                $('#edited-book-view-modal').modal('show');
                const viewauthorName = document.getElementById('view-first-name');
                const viewBookTitle = document.getElementById('view-book-title');
                const viewEditorName = document.getElementById('view-editor-name');
                const viewChapterTitle = document.getElementById('view-chapter-title');
                const viewEdition = document.getElementById('view-edition');
                const viewIsbnNo = document.getElementById('view-isbn-no');
                const viewPublicationPlace = document.getElementById('view-publication-place');
                const viewPublisherCategory = document.getElementById('view-publisher-category');
                const viewPageNumber = document.getElementById('view-page-number');
                const viewPublisherName = document.getElementById('view-publisher-name');
                const viewPublicationYear = document.getElementById('view-publication-year');
                const viewBookUrl = document.getElementById('view-book-url');
                const viewDoiBookId = document.getElementById('view-doi-book-id');
                const viewNumberOfNmimsAuthors = document.getElementById('view-no-of-nmims-authors');
                const viewNmimsAuthors = document.getElementById('view-nmims-authors');
                const viewNmimsCampusAuthors = document.getElementById('view-nmims-campus-authors');
                const viewNmimsSchoolAuthors = document.getElementById('view-nmims-school-authors');
                const viewSupportingDocuments = document.getElementById('view-support-document');

                fetch('<%- BASE_URL %>research/book-publication-main/edited-book-publication/view', {
                    method: 'POST',
                    headers: {
                        'content-type': 'application/json'
                    },
                    body: JSON.stringify({ editedBookId })
                })
                    .then((result) => {
                        return result.json()
                    })
                    .then((data) => {
                        if (data.status === 'done') {
                            console.log('data ==>>', data);
                            setFileNameInButtons(data)
                            viewauthorName.innerText = data.editedBookView.author_name;
                            viewBookTitle.innerText = data.editedBookView.book_title;
                            viewEdition.innerText = data.editedBookView.edition;
                            viewEditorName.innerText = data.editedBookView.editor_name;
                            viewChapterTitle.innerText = data.editedBookView.chapter_title;
                            viewIsbnNo.innerText = data.editedBookView.isbn_no;
                            viewPublicationPlace.innerText = data.editedBookView.publication_place;
                            viewPublisherCategory.innerText = data.editedBookView.publisher_category
                            viewPageNumber.innerText = data.editedBookView.page_number;
                            viewPublisherName.innerText = data.editedBookView.publisher_name;
                            viewPublicationYear.innerText = data.editedBookView.publication_year;
                            viewBookUrl.innerText = data.editedBookView.book_url;
                            data.editedBookView.doi_id ? (viewDoiBookId.innerText = data.editedBookView.doi_id, doiIdBookClass.classList.remove('d-none')) : doiIdBookClass.classList.add('d-none')
                            viewNumberOfNmimsAuthors.innerText = data.editedBookView.number_of_nmims_authors;
                            viewNmimsAuthors.innerText = data.editedBookView.nmims_authors;
                            viewNmimsCampusAuthors.innerText = data.editedBookView.nmims_campus_authors;
                            viewNmimsSchoolAuthors.innerText = data.editedBookView.nmims_school_authors;
                            viewSupportingDocuments.innerText = data.editedBookView.supporting_documents;
                        }

                    })
            }

        });

        const updateEditedBookPublication = async (url) => {
                const updatededitedBook = new FormData();
                const updatedAuthorName = document.getElementById('author-first-name').value;
                const updatedBookTitle = document.getElementById('book-title').value;
                const updatedEdition = document.getElementById('edition').value;
                const updatedIsbnNo = document.getElementById('isbn-no').value;
                const updatedEditorName = document.getElementById('editor-name').value;
                const updatedChapterTitle = document.getElementById('chapter-title').value;
                const updatedPublicationPlace = document.getElementById('publication-place').value;
                const updatedPublisherCategory = document.querySelector('input[name="publisher-category"]:checked').value;
                const updatedPageNumber = document.getElementById('page-number').value;
                const updatedPublisherName = document.getElementById('publisher-name').value;
                const updatedPublicationYear = document.getElementById('publication-year').value;
                const updatedBookUrl = document.getElementById('book-url').value;
                const updatedDoiBookId = document.getElementById('doi-book-id').value;
                const updatedNumberOfNmimsAuthors = document.getElementById('number-of-nmims-authors').value;
                const updatedNmimsAuthors = document.getElementById('nmims-authors').value;
                const updatedNmimsCampusAuthors = document.getElementById('nmims-campus-authors').value;
                const updatedNmimsSchoolAuthors = document.getElementById('nmims-school-authors').value;
                const updatedDocuments = document.getElementById('supporting-documents');
                let updateEditedFilesData = updatedDocuments.files;
                if (updateEditedFilesData.length > 0) {
                    for (let i = 0; i <= updateEditedFilesData.length - 1; i++) {
                        if (updateEditedFilesData && updateEditedFilesData[i].name) {
                            updatededitedBook.append('researchSupportingDocument', updateEditedFilesData[i]);
                        }
                    }
                }

                else {
                    updateEditedFilesData = null;
                    updatededitedBook.append('researchSupportingDocument', updateEditedFilesData)
                }
                updatededitedBook.append('editedBookId', editedBookId);
                updatededitedBook.append('authorName', updatedAuthorName);
                updatededitedBook.append('bookTitle', updatedBookTitle);
                updatededitedBook.append('edition', updatedEdition);
                updatededitedBook.append('editorName', updatedEditorName);
                updatededitedBook.append('chapterTitle', updatedChapterTitle);
                updatededitedBook.append('isbnNo', updatedIsbnNo);
                updatededitedBook.append('publicationPlace', updatedPublicationPlace);
                updatededitedBook.append('publisherCategory', updatedPublisherCategory);
                updatededitedBook.append('pageNumber', updatedPageNumber);
                updatededitedBook.append('publisherName', updatedPublisherName);
                updatededitedBook.append('publicationYear', updatedPublicationYear);
                updatededitedBook.append('bookUrl', updatedBookUrl);
                updatededitedBook.append('doiBookId', updatedDoiBookId);
                updatededitedBook.append('numberOfNmimsAuthors', updatedNumberOfNmimsAuthors);
                updatededitedBook.append('nmimsAuthors', updatedNmimsAuthors);
                updatededitedBook.append('nmimsCampusAuthors', updatedNmimsCampusAuthors);
                updatededitedBook.append('nmimsSchoolAuthors', updatedNmimsSchoolAuthors);

                fetch(url, {
                    method: 'POST',
                    body: updatededitedBook
                })
                    .then((result) => {
                        return result.json()
                    })
                    .then((data) => {
                        if (data.status === 'Done') {
                            console.log('data ==>>', data);
                            editedBookRowToBeUpdated.setAttribute('data-page-number', data.updatedEditedBook.pageNumber);
                            editedBookRowToBeUpdated.setAttribute('data-edition', data.updatedEditedBook.edition);
                            editedBookRowToBeUpdated.setAttribute('data-publication-place', data.updatedEditedBook.publicationPlace);
                            editedBookRowToBeUpdated.setAttribute('data-publisher-category', data.updatedEditedBook.publisherCategory);
                            editedBookRowToBeUpdated.setAttribute('data-editor-name', data.updatedEditedBook.editorName);
                            editedBookRowToBeUpdated.setAttribute('data-chapter-title', data.updatedEditedBook.chapterTitle);
                            editedBookRowToBeUpdated.setAttribute('data-book-url', data.updatedEditedBook.bookUrl);
                            editedBookRowToBeUpdated.setAttribute('data-doi-book-id', data.updatedEditedBook.doiBookId);
                            editedBookRowToBeUpdated.setAttribute('data-number-of-nmims-authors', data.updatedEditedBook.numberOfNmimsAuthors);
                            editedBookRowToBeUpdated.setAttribute('data-nmims-authors', data.updatedEditedBook.nmimsAuthors);
                            editedBookRowToBeUpdated.setAttribute('data-nmims-campus-authors', data.updatedEditedBook.nmimsCampusAuthors);
                            editedBookRowToBeUpdated.setAttribute('data-nmims-school-authors', data.updatedEditedBook.nmimsSchoolAuthors);
                            if (updateEditedFilesData) {
                                editedBookRowToBeUpdated.setAttribute('data-supporting-documents', data.updatedEditedBookFiles.supportingDocuments);
                            }
                            editedBookRowToBeUpdated.querySelector('.author-first-name').innerText = data.updatedEditedBook.authorName;
                            editedBookRowToBeUpdated.querySelector('.book-title').innerText = data.updatedEditedBook.bookTitle;
                            editedBookRowToBeUpdated.querySelector('.publisher-name').innerText = data.updatedEditedBook.publisherName;
                            editedBookRowToBeUpdated.querySelector('.isbn-no').innerText = data.updatedEditedBook.isbnNo;
                            editedBookRowToBeUpdated.querySelector('.publication-year').innerText = data.updatedEditedBook.publicationYear;
                            Swal.fire({
							position: "top-center",
							icon: "success",
							title: `${data.message}`,
							showConfirmButton: false,
							
						});
                        $('#edited-book-modal').modal('hide');
                        }
                        else{
                        console.log('data ===>>>>', data);
                        Swal.fire({
							position: "top-center",
							icon: "error",
							title: `${data.errorCode}`,
                            // text: `${data.errorCode}`,
							color : "red",
							with : "20PX",
							html: `<span style="color: red;">${data.message}</span>`,
							showConfirmButton: false,
						});
                    }
                    })
                    .catch((error) => {
                        console.log('Eroor ::', error);
                        Swal.fire({
							position: "top-center",
							icon: "error",
							title: `${error}`,
							color : "red"
						});
                    })
            };

    updateBtn.addEventListener('click', async () => {
            formGroup = updateBtn.closest('.validate-input')
            console.log("formGroup::::::::", formGroup)
            formGroup.querySelectorAll('input[type="file"]')?.forEach(elm => {
                console.log("elm:::::::::", elm);
                elm.removeAttribute('data-validate')
            })
            const isValid = validateRequiredFormFields(submitBtn);
            if (isValid) {
                await updateEditedBookPublication('<%- BASE_URL %>research/book-publication-main/edited-book-publication/update');
                // alert('Row Data Updated Successfully');
            }
            else {
                Swal.fire({
							position: "top-center",
							icon: "error",
							title: "Validation Failed",
							color : "red",
							showConfirmButton: false,
						});
            }

        })

    // set file string value into button
    function setFileNameInButtons(data) {
            console.log('data ==>>', data);
            const editedBookFileView = document.getElementById('edited-book-file-view');
            editedBookFileView.setAttribute('data-filename', data.editedBookView.supporting_documents);
        }

  
    //eventlistner for download files
    document.addEventListener('click', async function (event) {
            const button = event.target.closest('button');
            if (button && button.id && button.classList.contains('download-file')) {
                try {
                    const fileDataString = button.getAttribute('data-filename');
                    if (!fileDataString) {
                        throw new Error('Data filename attribute not found on button.');
                    }

                    const fileArray = fileDataString.split(',').map(fileName => fileName.trim()).filter(Boolean); // Remove empty strings
                    if (fileArray.length === 0) {
                        throw new Error('No file names found in data filename attribute.');
                    }

                    const downloadPromises = fileArray.map(async (fileName) => {

                        const fileUrl = `<%- BASE_URL %>research/book-publication-main/edited-book-publication/download/${fileName}`;
                        downloadFile(fileName, fileUrl)
                        try {
                            const response = await fetch(fileUrl);
                            if (!response.ok) {
                                throw new Error(`Failed to download file: ${fileName}`);
                            }
                            console.log('File downloaded successfully:', fileName);
                            return fileName;
                        } catch (error) {
                            console.error('Error downloading file:', error);
                            throw error;
                        }
                    });

                    const downloadedFiles = await Promise.all(downloadPromises);
                    console.log('All files downloaded successfully:', downloadedFiles);
                } catch (error) {
                    console.error('Error downloading files:', error);
                    alert(`There was a problem downloading files: ${error.message}`);
                }
            }
        });


     // set string file value into button
    function setFileNameAttributeToBeDownload(data) {
            console.log('data row in side function ===>>', data);
            const editedBookDataFiles = document.getElementById('edited-book-edit');
            editedBookDataFiles.classList.remove('d-none');
            const editedBookDataString = data.getAttribute('data-supporting-documents');

            // setAttribute into button
            editedBookDataFiles.setAttribute('data-filename', editedBookDataString);
        };


</script>
 <!-- footer section -->
<%- include('./partials/pagination') %>
<%- include('./partials/footer') %>
<%- include('./partials/footer-end') %>
           