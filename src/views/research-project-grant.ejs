<%- include('./partials/head') %>
    <!-- inline css -->
    <!-- Navbar section -->
    <%- include('./partials/header') %>

        <!-- This is left sidebar  -->
        <%- include('./partials/left-sidebar') %>

            <main class="main" id="main-content">
                <div class="base-section custom-section mt-5 p-5 ">
                    <!--DASHBOARD CONTENT START-->
                    <div class="errorHtml"></div>
                    <div class="breadcrumbs-container">
                        <ul class="breadcrumb">
                            <li class="breadcrumb-link">
                                <a href="<%- BASE_URL %>dashboard-page"> Dashboard </a>
                            </li>
                            <li class="breadcrumb-link">
                                <a href="<%- BASE_URL %>research"> Research </a>
                            </li>
                            <li class="breadcrumb-link">Research Project</li>
                        </ul>
                    </div>
                    <div>
                        <div class="table-card-header text-uppercase d-flex align-items-center justify-content-between">
                            <div>
                                <h5 class="pl-2">RESEARCH PROJECT/GRANT LIST</h5>
                            </div>
                            <div>
                                <button id="add-research-project-grant" type="button" class="btn btn-primary add-modal"
                                    data-toggle="modal" data-target="#consultancy-modal">ADD
                                    <i class="fas fa-plus plus "></i>
                                </button>

                            </div>
                        </div>
                        <div class="card-body table-responsive">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <!-- <label>Show Entries</label> -->
                                    <!-- <select class="form-select" id="changeEntry">
                                        <option value="5">5</option>
                                        <option value="10">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                        <option value="150">150</option>
                                        <option value="200">200</option>
                                        <option value="250">250</option>
                                        <option value="300">300</option>
                                        <option value="350">350</option>
                                        <option value="400">400</option>
                                        <option value="500">500</option>
                                        <option value="800">800</option>
                                        <option value="1000">1000</option>
                                    </select> -->
                                </div>
                                <div>
                                    <!-- <div class="table-searchbar-container">
                                        <button type="button" id="searchBtn"><i class="fas fa-search"></i></button>
                                        <input type="search" id="searchKeyword" placeholder="Enter keywords"
                                            class="table-searchbar">
                                    </div> -->
                                </div>
                            </div>
                            <table class="table vertical-lines custom-table table-responsive research-pagination"
                                id="consultancy-list">
                                <thead>
                                    <th class="col-lg-1">Serial no</th>
                                    <th class="col-lg-1">Grant Proposal</th>
                                    <th class="col-lg-1">Type of Grant</th>
                                    <th class="col-lg-1">Title of Project</th>
                                    <th class="col-lg-1">School</th>
                                    <th class="col-lg-1">Campus</th>
                                    <th class="col-lg-1">Thrust area of Research</th>
                                    <th class="col-lg-1">Name of Funding Agency</th>
                                    <th class="col-lg-1">Funding Amount</th>
                                    <th class="col-lg-1">Project Status</th>
                                    <th class="col-lg-1">Action</th>
                                </thead>
                                <tbody class="data-list">
                                    <% researchData.forEach(function(consultancy, index) { %>

                                        <tr id="nearTd" scope="row" data-consultancy-id="<%- consultancy.project_id %>"
                                            data-submission-date="<%- consultancy.submission_date.toISOString().split('T')[0] %>"
                                            data-supporting-documents="<%- consultancy.supporting_documents %>"
                                            data-projectDuration="<%- consultancy.projectduration %>"
                                            data-scheme="<%- consultancy.scheme %>"
                                            data-paymentDate="<%- consultancy.paymentdate %>"
                                            data-amountRecieved="<%- consultancy.amountrecieved %>"
                                            data-grant-type="<%- consultancy.type_of_research_grant %>"
                                            data-grant-proposal="<%- consultancy.grant_proposal_category %>"
                                            data-nmims-school="<%- consultancy.nmims_school%>"
                                            data-nmims-campus="<%- consultancy.nmims_campus%>"
                                            data-internal-faculty-ids="<%- consultancy.faculty_id %>">
                                            <td><%- index + 1 %></td>
                                            <td class="grant-proposal col-lg-1"><%- consultancy.grant_proposal_category
                                                    %></td>
                                            <td class="grant-type col-lg-1"><%- consultancy.type_of_research_grant %>
                                            </td>
                                            <td class="title-of-project col-lg-1"><%- consultancy.title_of_project %>
                                            </td>
                                            <td class="schools col-lg-1"><%- consultancy.nmims_campus %>
                                            </td>
                                            <td class="campus col-lg-1"><%- consultancy.associated_campuses %> %>
                                            </td>

                                            <td class="thurst-area col-lg-1"><%- consultancy.thrust_area_of_research %>
                                            </td>
                                            <td class="funding-agency col-lg-1"><%- consultancy.name_of_funding_agency
                                                    %></td>
                                            <td class="funding-amount col-lg-1"><%- consultancy.funding_amount %>
                                            </td>
                                            <td class="research-project-status col-lg-1"><%-
                                                    consultancy.status_of_research_project %></td>
                                            <td class="col-lg-1">
                                                <label class="view" data-consultancy-id="<%- consultancy.id %>"><i class="fa-solid fa-eye view text-danger"
                                                        data-consultancy-id="<%- consultancy.id %>"></i></label>
                                                <label class="edit" data-consultancy-id="<%- consultancy.id %>"><i class="fa fa-edit edit text-danger"
                                                        data-consultancy-id="<%- consultancy.id %>"></i></label>
                                                <label class="delete" data-consultancy-id="<%- consultancy.id %>"><i class="fa-solid fa-trash delete text-danger"
                                                        data-consultancy-id="<%- consultancy.id %>"></i></label>
                                            </td>
                                            <!-- <td style="display:flex;justify-content: center;">
                                                <b title="View" class="border-right-0 view" style="cursor: pointer;"
                                                    data-consultancy-id="<%- consultancy.id %>">
                                                    &#128065;
                                                </b>&ensp;&ensp;&ensp;
                                                <b title="Edit" class="border-right-0 edit" style="cursor: pointer;"
                                                    data-consultancy-id="<%- consultancy.id %>">
                                                    &#9998;
                                                </b>&ensp;&ensp;&ensp;
                                                <b title="Delete" class="border-right-0 delete" style="cursor: pointer;"
                                                    data-consultancy-id="<%- consultancy.id %>">
                                                    &#128465;
                                                </b>
                                            </td> -->
                                        </tr>
                                        <% }); %>

                                </tbody>
                                <tr>
                                    <div id="no-records-message"
                                        style="display: none; color: red; margin-top: 10px; padding-left: 40%;">
                                        <b class="no-record">No records found.</b>
                                    </div>
                                </tr>
                            </table>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div>
                            <label id="total-row-count"></label>
                            <label class="d-none" id="row-count"></label>
                        </div>
                        <div>
                            <!-- <button id="prevBtn" class="btn btn-primary">Previous</button>
                            <button id="nextBtn" class="btn btn-primary">Next</button>
                            <p id="pagination" class="pagination-search"></p> -->
                        </div>
                    </div>

                    <!--Import Modal -->
                    <div class="modal fade" id="open-program-modal" tabindex="-1" aria-labelledby="open-program-modal"
                        aria-hidden="true">
                    </div>
                    <!-- EDIT PROGRAM AND UPDATE -->
                    <div class="modal fade" id="edit-program-modal" tabindex="-1" aria-labelledby="editModalLabel"
                        aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="editModalLabel">Update Program</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                                        aria-label="Close"></button>
                                </div>
                                <div id="errorHtml"></div>
                                <div class="modal-body">
                                    <div class="mb-3">
                                        <label for="exampleInputEmail1" class="form-label">Program Name</label>
                                        <input type="text" class="form-control" id="program_name" name="program_name">
                                        <input type="hidden" class="form-control" id="hidden_id" name="hidden_id">
                                    </div>
                                    <div class="mb-3">
                                        <label for="exampleInputPassword1" class="form-label">Program Type</label>
                                        <select class="form-control" name="program_type_lid" id="program_type_lid">

                                            <option value="1">Full Time</option>

                                            <option value="2">Part Time</option>

                                        </select>
                                    </div>

                                    <div class="mb-3">
                                        <label for="abbr" class="form-label">Program Abbr</label>
                                        <input type="text" class="form-control" id="abbr" name="abbr">
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary"
                                        data-bs-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary updateProgram">Update</button>
                                </div>
                            </div>
                        </div>
                    </div>
            </main>
            <!-- research consultancy modal form -->
            <div class="modal fade " id="consultancy-modal" tabindex="-1" role="dialog"
                aria-labelledby="consultancy-modal" aria-hidden="true">
                <div class="modal-dialog modal-dialog-scrollable modal-lg modal-fullscreen p-5" role="document">
                    <div class="modal-content modal-content-data validate-input">
                        <div class="modal-header">
                            <h4 class="modal-title" id="researchProjectConsultancy">RESEARCH PROJECT </h4>
                            <div class="close" id="headerClose" data-dismiss="modal" aria-label="Close">
                                <span type="button" aria-hidden="true"><i class="fas fa-times"></i></span>
                            </div>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                 <!--NMIMS School - Author-->
                                 <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="nmims-school-authors" class="form-label fw-bold ">NMIMS School <i style="color: red;">*</i></label>
                                    <input type="url" name="web-link" id="nmims-school"
                                        data-validate="isEmpty,isAlphaNumericWithSpaceNoLeadingSpace,isExist,isLength:2:255"
                                        data-err-msg="Provide Valid Input" class="form-control" required />
                                </div>
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="nmims-campus-authors" class="form-label fw-bold ">NMIMS Campus<i style="color: red;">*</i></label>
                                    <input type="url" name="web-link" id="nmims-campus"
                                        data-validate="isEmpty,isAlphaNumericWithSpaceNoLeadingSpace,isExist,isLength:2:255"
                                        data-err-msg="Provide Valid Input" class="form-control" required />
                                </div>
                               
  
                                <!-- Grant Proposal -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="grant-proposal" class="form-label fw-bold mb-3">Grant
                                        Proposal</label><br>
                                    <div class="form-check-inline">
                                        <label for="goverment" class="form-check-label">
                                            <input type="radio" class="form-check-input" id="goverment" name="grant-proposal" value="Goverment">
                                            Goverment
                                        </label>
                                    </div>
                                    <div class="form-check-inline">
                                        <label for="non-Goverment" class="form-check-label">
                                            <input type="radio" class="form-check-input" id="industry" name="grant-proposal" value="Industry"
                                                checked> Industry
                                        </label>
                                    </div>
                                </div>
                                <!-- Type of Grant -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="type-of-grant" class="form-label fw-bold mb-3">Type of Grant</label><br>
                                    <div class="form-check-inline">
                                        <label for="research" class="form-check-label">
                                            <input type="radio" class="form-check-input" id="research" name="type-of-grant" value="Research Project"
                                                checked> Research Project
                                        </label>
                                    </div>
                                    <div class="form-check-inline">
                                        <label for="consultancy" class="form-check-label">
                                            <input type="radio" class="form-check-input" id="consultancy" name="type-of-grant" value="Consultancy"
                                                checked> Consultancy
                                        </label>
                                    </div>
                                    <div class="form-check-inline">
                                        <label for="capacity" class="form-check-label">
                                            <input type="radio" class="form-check-input" id="capacity" name="type-of-grant"
                                                value="Capacity Building"> Capacity Building
                                        </label>
                                    </div>
                                </div>
                                <!-- Title of Project -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="title-of-project" class="form-label fw-bold">Title of Project <i style="color: red;">*</i></label>
                                    <input type="text" name="titleOfProject" id="title-of-project"
                                        data-validate="isEmpty,isExist,isLength:2:255" data-err-msg="Provide Valid Input"
                                        class="form-control" required>
                                </div>
                            
                            
                            
                                <!-- Thrust area of Research -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="thurst-area" class="form-label fw-bold">Thrust area of Research <i style="color: red;">*</i></label>
                                    <input type="text" name="thurst-area" id="thurst-area"
                                        data-validate="isEmpty,isAlphaNumericWithSpaceNoLeadingSpace,isExist,isLength:2:255" data-err-msg="Provide Valid Input"
                                        class="form-control" required>
                                </div>
                                <!-- Name of Funding Agency -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="funding-agency" class="form-label fw-bold">Name of Funding
                                        Agency <i style="color: red;">*</i></label>
                                    <input type="text" name="funding-agency" id="funding-agency"
                                        data-validate="isEmpty,isExist,isLength:2:255" data-err-msg="Provide Valid Input"
                                        class="form-control" required>
                                </div>
                                <!-- Funding Amount -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="funding-amount" class="form-label fw-bold">Funding Amount <i style="color: red;">*</i></label>
                                    <input type="number" name="funding-amount" id="funding-amount" data-validate="isEmpty,isDecimal"
                                        data-err-msg="Provide valid input." class="form-control" required>
                                </div>
                            
                                <!-- scheme name  -->
                                <!-- <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                                    <label for="scheme-name" class="form-label fw-bold">Name of the Scheme</label>
                                                    <input type="text" name="scheme-name" id="scheme-name" data-validate="isEmpty,isNotNumber,isExist,isLength:2:255" data-err-msg="Provide Valid Input" class="form-control" required>
                                                </div> -->
                            
                                <!-- Name of Principal Investigator  -->
                                <!-- <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                                    <label for="principal-investigator" class="form-label fw-bold">Name of Principal Investigator</label>
                                                    <input type="text" name="principla-investigator" id="principal-investigator" data-validate="isEmpty,isNotNumber,isExist,isLength:2:255" data-err-msg="Provide Valid Input" class="form-control" required>
                                                </div> -->
                            
                                <!-- Name of Co-Investigators -->
                                <!-- <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                                    <label for="co-investigators" class="form-label fw-bold">Name of Co-Investigators</label>
                                                    <input type="text" name="co-investigator" id="co-investigators" data-validate="isEmpty,isNotNumber,isExist,isLength:2:255" data-err-msg="Provide Valid Input" class="form-control" required>
                                                </div> -->
                            
                                <!-- Duration of the Project -->
                                <!-- <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                                    <label for="duration-of-project" class="form-label fw-bold">Duration of the Project</label>
                                                    <input type="text" name="project-duration" id="duration-of-project" data-validate="isEmpty,isExist" data-err-msg="This field is required and accept alpha numeric." class="form-control" required>
                                                </div> -->
                                <!-- Status of Research Project -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="research-project-status" class="form-label fw-bold mb-3">Status of
                                        Research Project</label><br>
                                    <div class="form-check-inline">
                                        <label for="submited" class="form-check-label">
                                            <input type="radio" class="form-check-input" id="submitted" name="research-project-status"
                                                value="Submitted"> Submitted
                                        </label>
                                    </div>
                                    <div class="form-check-inline">
                                        <label for="presentation" class="form-check-label">
                                            <input type="radio" class="form-check-input" id="presentation-held" name="research-project-status"
                                                value="Presentation held" checked>
                                            Presentation held
                                        </label>
                                    </div>
                                    <div class="form-check-inline">
                                        <label for="granted" class="form-check-label">
                                            <input type="radio" class="form-check-input" id="granted" name="research-project-status"
                                                value="Granted"> Granted
                                        </label>
                                    </div>
                                </div>
                            
                                <!-- Submission/Grant date-->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="submission-grant-date" class="form-label fw-bold">
                                        Submission/Grant Date <i style="color: red;">*</i>
                                    </label>
                                    <input type="date" name="submission-grant-date" id="submission-grant-date" data-validate="isEmpty,isExist"
                                        data-err-msg="Date is required" class="form-control" required>
                                </div>
                              
                            
                            <!-- //Duration Of Project In Months -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="duration-date" class="form-label fw-bold">
                                        Duration Of Project In Months <i style="color: red;">*</i>
                                    </label>
                                    <input type="text" name="duration-date" id="duration-date" data-validate="isEmpty,isExist,isLength:2:255"
                                        data-err-msg="provide valid input" class="form-control" required>
                                </div>
                            
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="scheme" class="form-label fw-bold">
                                        Scheme <i style="color: red;">*</i>
                                    </label>
                                    <input type="text" name="scheme" id="scheme" data-validate="isEmpty,isExist,isLength:2:255"
                                        data-err-msg="Field is required and provide valid input" class="form-control" required>
                                </div>
                            
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="annual-payment-date" class="form-label fw-bold">
                                        Annual Payment Date <i style="color: red;">*</i>
                                    </label>
                                    <input type="date" name="annual-payment-date" id="annual-payment-date" data-validate="isEmpty,isExist"
                                        data-err-msg="Field is required and provide valid input" class="form-control" required>
                                </div>
                            
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="amount-received" class="form-label fw-bold">
                                        Amount Received <i style="color: red;">*</i>
                                    </label>
                                    <input type="number" name="amount-received" id="amount-received" data-validate="isEmpty,isExist"
                                        data-err-msg="Field is required and provide valid input" class="form-control" required>
                                </div>

                                  <!-- Upload Supporting Documents-->
                                  <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label class="form-label fw-bold">
                                        Upload Supporting Documents <i style="color: red;">*</i>
                                    </label>
                            
                                    <div id="uploadNewSupportDocumentDiv">
                                        <label for="uploadNewSupportDocument"><small>Click to Upload New
                                                File</small></label>
                                        <input type="checkbox" name="uploadNewSupportDocument" id="uploadNewSupportDocument">
                                    </div>
                                    <div class="d-flex">
                                        <input type="file" name="researchSupportingDocument" id="supporting-documents"
                                            data-validate="isEmpty,isExist,isFile" data-err-msg="File is required." class="col-md-12 form-control"
                                            required multiple>
                                        <button class="download-btn download-file" id="consultancy-file-edit"><i
                                                class="fas fa-download text-danger"></i>Download</button>
                                    </div>
                                </div>
                            
                                <!-- if faculty choose internal Authors then show search bar -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="investor-details" class="form-label fw-bold mb-3">Details of Faculty</label>
                                    <span style="color:red;" id="facultyTypeError"></span></br>
                                    <div class="form-check-inline">
                                        <label for="is-internal" class="form-check-label enter-faculty-type">
                                            <input type="radio" class="form-check-input enternal-type" name="author-type" id="is-internal"
                                                value="Internal">
                                            <span id="enternal-text">Internal</span>
                                        </label>
                                        <div class=" col-lg-1 p-6 w-100 d-none" id="employee-list">
                                            <select id="emp-name" class="internal-faculty-list-data" style="width: 200px;" multiple>
                                                <option value="">select employee name</option>
                                                <% InternalFaculty.forEach(function(employee) { %>
                                                    <option value="<%= employee.id %>">
                                                        <%= employee.faculty_name %>
                                                    </option>
                                                    <% }); %>
                                            </select>
                                        </div>
                                    </div>
                                
                                    <div class="form-check-inline">
                                        <label for="is-external-details" class="form-check-label external-faculty">
                                            <input type="radio" class="form-check-input" id="is-external-details" name="author-type" value="External">
                                            <span id="external-text">External</span>
                                        </label>
                                    </div>
                                </div>
                                <table id="external-details-table"
                                    class="table vertical-lines custom-table table-responsive research-pagination re d-none">
                                    <thead>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">faculty Name </th>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">Designation</th>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">Institution Name</th>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">Address</th>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">Action</th>
                                    </thead>
                                    <tbody id="add-faculty-details">
                                    </tbody>
                                </table>
                                  
                            </div>
                        </div>
                        <!--  footer buttons if needed -->
                        <div class="modal-footer">
                            <button type="button" id="footerClose" class="btn btn-danger"
                                data-dismiss="modal">Close</button>
                            <button class="btn btn-md btn-primary d-none" id="submit-btn">Submit</button>
                            <button class="btn btn-md btn-primary d-none" id="update-btn">Update</button>
                        </div>
                    </div>
                </div>
            </div>


            <!-- research consultancy modal for view -->
            <div class="modal fade " id="research-consultancy-view" tabindex="-1" role="dialog"
                aria-labelledby="consultancy-modal" aria-hidden="true">
                <div class="modal-dialog modal-dialog-scrollable modal-lg modal-fullscreen p-5" role="document">
                    <div class="modal-content modal-content-data">
                        <div class="modal-header">
                            <h4 class="modal-title">Research Projects/Grants View</h4>
                            <div class="close" data-dismiss="modal" aria-label="Close">
                                <span type="button" aria-hidden="true"><i class="fas fa-times  "></i></span>
                            </div>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                  <!-- NMIMS School -->
                                  <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text">NMIMS School : </div>
                                        <label class="view-content" id="view-nmims-school"></label>
                                    </div>
                                </div>

                                 <!--NMIMS Campus   -->
                                 <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text">NMIMS Campus : </div>
                                        <label class="view-content" id="view-nmims-campus"></label>
                                    </div>
                                </div>

                               
                                <!-- Grant Proposal -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text">Grant Proposal : </div>
                                        <label class="view-content" id="view-grant-proposal"></label>
                                    </div>
                                </div>
                                <!-- Type of Grant -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text">Type of Grant : </div>
                                        <label class="view-content" id="view-grant-type"></label>
                                    </div>
                                </div>
                                <!-- Title of Project -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text"> Title of Project : </div>
                                        <label class="view-content" id="view-project-title"></label>
                                    </div>
                                </div>
                                <!-- Thrust area of Research -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text"> Thrust Area of Research: </div>
                                        <label class="view-content" id="view-thurst-aria"></label>
                                    </div>
                                </div>

                                      <!-- Submission/Grant date -->
                                      <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                        <div class="box">
                                            <div class="task-sub-title sub-title-text">Duration Of Project In Months : </div>
                                            <label class="view-content" id="view-project-duration"></label>
                                        </div>
                                    </div>
                                <!-- Name of Funding Agency -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text"> Name of Funding Agency : </div>
                                        <label class="view-content" id="view-funding-agency"></label>
                                    </div>
                                </div>
                                <!-- Funding Amount -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text"> Funding Amount: </div>
                                        <label class="view-content" id="view-funding-amount"></label>
                                    </div>
                                </div>

                               
                                <!-- Status of Research Project -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text"> Status of Research Project: </div>
                                        <label class="view-content" id="view-project-status"></label>
                                    </div>
                                </div>

                                  <!-- Amount Received-->
                                  <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text"> Amount Received: </div>
                                        <label class="view-content" id="view-recieved-amount"></label>
                                    </div>
                                </div>
                                <!-- Submission/Grant date -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text"> Submission/Grant Date: </div>
                                        <label class="view-content" id="view-submission-date"></label>
                                    </div>
                                </div>

                                   <!-- Submission/Grant date -->
                                   <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text"> Annual Payment Date : </div>
                                        <label class="view-content" id="view-anual-payment-date"></label>
                                    </div>
                                </div>


                                <!-- Upload Supporting Documents -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text"><button
                                                class="btn btn-primary h-10 w-10 download-file"
                                                id="consultancy-file-view">
                                                <i class="fas fa-download text-danger"></i> Download Documents
                                            </button></div>
                                        <label class="view-content" id="view-supporting-document"></label>
                                    </div>
                                </div>

                                <!-- Faculty Type -->
                                <div class="col-lg-12 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text fw-bold"> Faculty Details: 
                                        </div>
                                        <label class="view-content" id="faculty-details-container"></label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!--  footer buttons if needed -->
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>

            <div id="employees-list-data" data-employees='<%- JSON.stringify(InternalFaculty) %>'
                style="display: none;"></div>

            <script src="https://cdnjs.cloudflare.com/ajax/libs/tom-select/2.3.1/js/tom-select.complete.min.js"
                integrity="sha512-zdXqksVc9s0d2eoJGdQ2cEhS4mb62qJueasTG4HjCT9J8f9x5gXCQGSdeilD+C7RqvUi1b4DdD5XaGjJZSlP9Q=="
                crossorigin="anonymous" referrerpolicy="no-referrer"></script>

            <!-- inline javascript -->
            <script>

                let projectGrantId;
                let rowCount = document.getElementById('row-count');
                const totalRowCount = document.getElementById('total-row-count');
                let rowIndex = rowCount.innerText;
                let indexValue = parseInt(rowIndex, 10);

                const researchProjectConsultancyList = document.getElementById('consultancy-list');
                const submitBtn = document.getElementById('submit-btn');
                const updateBtn = document.getElementById('update-btn');
                const InsertDetails = document.getElementById('insert-details')
                const schoolDropDown = document.getElementById('nmims-school-list');
                const campusDropDown = document.getElementById('nmims-campus-list');

                let consultantId, consultantRowToBeUpdated;
                let facultyIdContainer = [];
                let externalFacultyData = [];
                let externalFacultyIdArray = [];
                const facultyTableList = document.getElementById('faculty-table-list');

                const employeeDropdown = document.getElementById("emp-name");
                const addMoreDetailsButton = document.getElementById("add-more-details");
                const enternalFacultyType = document.getElementById('is-internal');
                const externalFacultyType = document.getElementById('is-external');
                const employeeList = document.getElementById('employee-list');
                const authorDetails = document.getElementById('author-details');
                const addResearchConsultancyModal = document.getElementById('add-research-project-grant');

                addResearchConsultancyModal.addEventListener('click', function (event) {

                    if (event.target.tagName === 'BUTTON' && event.target.classList.contains('add-modal') || event.target.classList.contains('plus')) {
                        submitBtn.classList.remove('d-none');
                        updateBtn.classList.add('d-none');
                        document.getElementById('researchProjectConsultancy').innerHTML = 'RESEARCH PROJECT';
                        removeErrorMsg()
                        document.querySelector('#uploadNewSupportDocumentDiv').classList.add('d-none');
                        document.querySelector('#supporting-documents').classList.remove('d-none');
                        document.querySelector('#uploadNewSupportDocument').checked = false;
                        $('#consultancy-modal').modal({
                            backdrop: 'static'
                        });

                        // d-none download button
                        const consultancyDataFiles = document.querySelector('#consultancy-file-edit');
                        consultancyDataFiles.classList.add('d-none');
                        employeeList.classList.add('d-none');
                        // authorDetails.classList.add('d-none');
                        InternalAuthorValue = '';
                        externalAuthorValue = '';
                        storedFacultyValue = '';
                        const isGrantProposalCategoryGoverement = document.getElementById('goverment');
                        const isProposalCatIndustry = document.getElementById('industry');
                        const grantResearchProject = document.getElementById('research');
                        const grantConsultancy = document.getElementById('consultancy');
                        const grantCapacityBuilding = document.getElementById('capacity');
                        const titleOfProject = document.getElementById('title-of-project');
                        const thurstAreaOfResearch = document.getElementById('thurst-area');
                        const fundingAgency = document.getElementById('funding-agency');
                        const fundingAmount = document.getElementById('funding-amount');
                        const statusSubmitted = document.getElementById('submitted');
                        const statusPresentationHeld = document.getElementById('presentation-held');
                        const statusGranted = document.getElementById('granted');
                        const submissionGrantDate = document.getElementById('submission-grant-date');
                        const supportingDocument = document.getElementById('supporting-documents');
                        const isInternalFaculty = document.getElementById('is-internal');
                        const isExternalFaculty = document.getElementById('is-external');
                        // document.getElementById('author-details').classList.add('d-none');
                        titleOfProject.value = '';
                        thurstAreaOfResearch.value = '';
                        fundingAgency.value = '';
                        fundingAmount.value = '';
                        statusGranted.checked = false;
                        submissionGrantDate.value = '';
                        supportingDocument.value = '';
                        // isInternalFaculty.checked = false;
                        // isExternalFaculty.checked = false;

                        const employeesListData = document.getElementById('employees-list-data').dataset.employees;
                        const employeesDataObj = JSON.parse(employeesListData);
                        let employeeListArray = [];


                        // ajax for search bar to search employee name 
                        const facultyOptions = employeesDataObj.map(faculty => ({
                            value: faculty.id,
                            text: `   ${faculty.faculty_name}`
                        }));

                        new TomSelect("#emp-name", {
                            options: facultyOptions,
                            placeholder: "Select Employee Name",
                            hidePlaceholder: true,
                            create: false,
                            plugins: ['remove_button'],
                            onItemAdd: function () {
                                this.setTextboxValue('');
                                this.refreshOptions();
                            },
                            render: {
                                option: function (data, escape) {
                                    return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                },
                                item: function (data, escape) {
                                    return '<div>' + escape(data.text) + '</div>';
                                }
                            }
                        });
                    }
                });

                const insertResearchConsultancyForm = async (url) => {
                    const researchConsultancyData = new FormData();
                    const grantProposalCategory = document.querySelector('input[name="grant-proposal"]:checked').value;
                    const typeOfGrant = document.querySelector('input[name="type-of-grant"]:checked').value;
                    const titleOfProject = document.getElementById('title-of-project').value;
                    const thurstAreaOfResearch = document.getElementById('thurst-area').value;
                    const fundingAgency = document.getElementById('funding-agency').value;
                    const fundingAmount = document.getElementById('funding-amount').value;
                    const amountRecieved = document.getElementById('amount-received').value;
                    const scheme = document.getElementById('scheme').value;
                    const annualPaymentDate = document.getElementById('annual-payment-date').value;
                    const durationDate = document.getElementById('duration-date').value;

                    console.log('new created json ', durationDate);

                    const nmimsSchool = document.getElementById('nmims-school').value;
                    const nmimsCampus = document.getElementById('nmims-campus').value;

                    // const school = document.getElementById('school').value;
                    // console.log('school ====>>>', school)
                    // const campus = document.getElementById('campus').value;
                    // // const industry =  document.getElementById('industry');
                    // const facultyDept = document.getElementById('faculty-department').value;
                    // const schemeName = document.getElementById('scheme-name').value;
                    // const principalInvestigator = document.getElementById('principal-investigator').value;
                    // const coInvestigator = document.getElementById('co-investigators').value;
                    // const totalGrntSanctioRupee = document.getElementById('total-grant-sanction-rupees').value;
                    // const recievedAmount =  document.getElementById('recieved-amount').value;
                    // const recievedAmountDate = document.getElementById('amount-recieved-date').value;
                    const statusOfResearchProject = document.querySelector('input[name="research-project-status"]:checked').value;
                    const submissionGrantDate = document.getElementById('submission-grant-date').value;
                    // const projectDuration = document.getElementById('duration-of-project').value

                    const supportingDocument = document.getElementById('supporting-documents');
                    const consultancyFilesData = supportingDocument.files;
                    if (consultancyFilesData.length > 0) {
                        for (let i = 0; i <= consultancyFilesData.length - 1; i++) {
                            if (consultancyFilesData[i].name) {
                                console.log('file name  ===>>>', consultancyFilesData[i].name);
                                researchConsultancyData.append('researchSupportingDocument', consultancyFilesData[i]);

                            }
                        }
                    }

                    let externalFacultyDetailsRow = document.querySelectorAll('.external-faculty-details');
                    let externalFacultyDetails = [];

                    externalFacultyDetailsRow.forEach((field, index) => {
                        if (field.value !== '') {
                            externalFacultyDetails.push(field.value);
                        }
                    });

                    const facultyIdsArray = facultyIdContainer ? facultyIdContainer[facultyIdContainer.length - 1] : null;
                    const facultyContainer = facultyIdsArray ? JSON.stringify(facultyIdsArray) : null;

                    // appending into form
                    researchConsultancyData.append('nmimsSchool' , nmimsSchool);
                    researchConsultancyData.append('nmimsCampus', nmimsCampus);
                    researchConsultancyData.append('facultyContainer', facultyContainer);
                    researchConsultancyData.append('grantProposalCategory', grantProposalCategory);
                    researchConsultancyData.append('typeOfGrant', typeOfGrant);
                    researchConsultancyData.append('titleOfProject', titleOfProject);
                    researchConsultancyData.append('thurstAreaOfResearch', thurstAreaOfResearch);
                    researchConsultancyData.append('fundingAgency', fundingAgency);
                    researchConsultancyData.append('fundingAmount', fundingAmount);
                    researchConsultancyData.append('statusOfResearchProject', statusOfResearchProject);
                    researchConsultancyData.append('submissionGrantDate', submissionGrantDate);
                    researchConsultancyData.append('scheme', scheme);
                    researchConsultancyData.append('durationDate', durationDate);
                    researchConsultancyData.append('amountReceived', amountRecieved);
                    researchConsultancyData.append('annualPaymentDate', annualPaymentDate);
                    researchConsultancyData.append('externalFacultyDetails', JSON.stringify(externalFacultyDetails));


                    // researchConsultancyData.append('school', school);
                    // researchConsultancyData.append('campus', campus);
                    // researchConsultancyData.append('facultyDept', facultyDept);
                    // researchConsultancyData.append('schemeName', schemeName);
                    // researchConsultancyData.append('principalInvestigator', principalInvestigator);
                    // researchConsultancyData.append('coInvestigator', coInvestigator);
                    // researchConsultancyData.append('totalGrntSanctioRupee', totalGrntSanctioRupee);
                    // researchConsultancyData.append('recievedAmount', recievedAmount);
                    // researchConsultancyData.append('recievedAmountDate', recievedAmountDate);
                    // researchConsultancyData.append('projectDuration' , projectDuration);


                    fetch(url, {
                        method: 'POST',
                        body: researchConsultancyData
                    })
                        .then((result) => {
                            return result.json();
                        })
                        .then((data) => {
                            if (data.status === 'Done') {
                                //         console.log('data ==>>', data);
                                //         const consultantId = data.consultantId
                                //         const rowCountInteger = parseInt(data.rowCount, 10);
                                //         const IndexEntry = rowCountInteger + indexValue;
                                //         indexValue = IndexEntry;
                                //         console.log('indexValue ==>>>>', indexValue);
                                //         console.log('IndexEntry ===>>>', IndexEntry);
                                //         console.log('id ==', consultantId)
                                //         const newResearchConsultant = document.createElement('tr');
                                //         newResearchConsultant.setAttribute('data-consultancy-id', data.consultantId)
                                //         // newResearchConsultant.setAttribute('data-grant-type', data.researchConsultantData.typeOfGrant);
                                //         // newResearchConsultant.setAttribute('data-grant-proposal', data.researchConsultantData.grantProposalCategory)
                                //         newResearchConsultant.setAttribute('data-submission-date', data.researchConsultantData.submissionGrantDate);
                                //         newResearchConsultant.setAttribute('data-supporting-documents', data.consultancyFileName);
                                //         // newResearchConsultant.setAttribute('data-recieved-amount-date', data.researchConsultantData.recievedAmountDate);
                                //         // newResearchConsultant.setAttribute('data-recieved-amount', data.researchConsultantData.recievedAmount);
                                //         // newResearchConsultant.setAttribute('data-total-grant-sanction-rupee', data.researchConsultantData.totalGrntSanctioRupee);
                                //         // newResearchConsultant.setAttribute('data-scheme-name', data.researchConsultantData.schemeName);
                                //         // newResearchConsultant.setAttribute('data-principal-investigator', data.researchConsultantData.principalInvestigator);
                                //         // newResearchConsultant.setAttribute('data-author-table' , data.tableName)
                                //         // newResearchConsultant.setAttribute('data-co-investigator', data.researchConsultantData.coInvestigator);
                                //         // newResearchConsultant.setAttribute('data-project-duration', data.researchConsultantData.projectDuration)
                                //         newResearchConsultant.innerHTML = `
                                // <td>${IndexEntry}</td>
                                // <td class="grant-type">${data.researchConsultantData.typeOfGrant}</td>
                                // <td class="grant-proposal">${data.researchConsultantData.grantProposalCategory}</td>
                                // <td class="title-of-project">${data.researchConsultantData.titleOfProject}</td>
                                // <td class="thurst-area">${data.researchConsultantData.thurstAreaOfResearch}</td>
                                // <td class="funding-agency">${data.researchConsultantData.fundingAgency}</td>
                                // <td class="funding-amount">${data.researchConsultantData.fundingAmount}</td>
                                // <td class="research-project-status">${data.researchConsultantData.statusOfResearchProject}</td>

                                // <td title="View" class="border-right-0 view" style="cursor: pointer;" data-consultancy-id="${consultantId}">
                                //     &#128065;
                                // </td>
                                // <td title="Edit" class="border-right-0 edit" style="cursor: pointer;" data-consultancy-id="${consultantId}">
                                //     &#9998;
                                // </td>
                                // <td title="Delete" class="border-right-0 delete" style="cursor: pointer;"  data-consultancy-id="${consultantId}">
                                //     &#128465;
                                // </td>
                                // `;

                                //         researchProjectConsultancyList.appendChild(newResearchConsultant);
                                //         rowCount.classList.remove('d-none');
                                //         totalRowCount.classList.add('d-none');
                                //         rowCount.innerText = `Total entries : ${IndexEntry}`
                                $('#consultancy-modal').modal('hide');
                                Swal.fire({
                                    position: "top-center",
                                    icon: "success",
                                    title: `${data.message}`,
                                    showConfirmButton: true,
                                    allowOutsideClick: false,
                                    confirmButtonText: "OK",
                                    confirmButtonColor: "#DD6B55"
                                    // timer: 1500
                                })
                                .then(() => {
                                    document.location.reload()
                                });
                            }
                            else {
                                console.log('data ====>>>>>', data);
                                Swal.fire({
                                    position: "top-center",
                                    icon: "error",
                                    title: `${data.errorCode}`,
                                    color: "red",
                                    with: "20PX",
                                    html: `<span style="color: red;">${data.message}</span>`,
                                    showConfirmButton: true,
                                    allowOutsideClick: false,
                                    confirmButtonText: "OK",
                                    confirmButtonColor: "#DD6B55"
                                });
                            }
                        })
                        .catch((error) => {
                            console.error('Error:', error);
                            const message = error;
                            Swal.fire({
                                position: "top-center",
                                icon: "error",
                                title: "Data Insertion Failed",
                                color: "red",
                                with: "20PX",
                                html: `<span style="color: red;">${message}</span>`,
                                showConfirmButton: true,
                                allowOutsideClick: false,
                                confirmButtonText: "OK",
                                confirmButtonColor: "#DD6B55"
                            });
                        });
                }

                submitBtn.addEventListener('click', async () => {
                    const isValid = validateRequiredFormFields(submitBtn);
                    const internalAuthor = document.getElementById('is-internal');
                    const externalAuthor = document.getElementById('is-external-details');

                    if ((isValid && internalAuthor.checked || externalAuthor.checked)) {
                        await insertResearchConsultancyForm('<%- BASE_URL %>research/research-project-grant/insert');

                    }
                    else {
                        Swal.fire({
                            position: "top-center",
                            icon: "error",
                            title: "Validation Failed",
                            color: "red",
                            showConfirmButton: true,
                            allowOutsideClick: false,
                            confirmButtonText: "OK",
                            confirmButtonColor: "#DD6B55"
                        }).then(() => {
                            if (internalAuthor.checked || externalAuthor.checked) {
                                document.getElementById('facultyTypeError').innerText = ''
                            } else {
                                document.getElementById('facultyTypeError').innerText = 'Select One Of The Faculty Type'
                            }
                        });;
                    }
                });

                researchProjectConsultancyList.addEventListener('click', async function (event) {
                    console.log('clikedddd')
                    if (event.target.classList.contains('edit')) {
                        consultantRowToBeUpdated = event.target.closest('tr');

                        const employeesListData = document.getElementById('employees-list-data').dataset.employees;
                        const employeesDataObj = JSON.parse(employeesListData);
                        let employeeListArray = [];

                        const internalFaculyIdsArray = consultantRowToBeUpdated.getAttribute('data-internal-faculty-ids').split(',').map(str => parseInt(str.trim(), 10));
                        console.log('internalFaculyIdsArray =====>>>>>', internalFaculyIdsArray);


                        let internalEmp = JSON.parse('<%- JSON.stringify(InternalFaculty) %>')



                        let employeesList = internalEmp.filter(data => consultantId == data.research_project_grant_id).filter(consultant => consultant)
                        console.log('employee json ', JSON.stringify(internalEmp))

                      //employee array list push
                        Array.from(employeesDataObj).forEach(data => {
                                Array.from(internalFaculyIdsArray).forEach(intrnl => {
                                    if (data.id == intrnl) {
                                        employeeListArray.push(data.id)
                                    }
                                })
                            })

                       // ajax for search bar to search employee name 
                       const facultyOptions = employeesDataObj.map(faculty => ({
                            value: faculty.id,
                            text: `   ${faculty.faculty_name}`
                        }));


                        // Initialize TomSelect dropdown with options containing id and faculty_name
                       const consultancyInternalFaculty =  new TomSelect("#emp-name", {
                            options: facultyOptions,
                            items: employeeListArray,
                            // placeholder: "Select Employee Name",
                            hidePlaceholder: true,
                            create: false,
                            plugins: ['remove_button'],
                            onItemAdd: function () {
                                this.setTextboxValue('');
                                this.refreshOptions();
                            },
                            render: {
                                option: function (data, escape) {
                                    return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                },
                                item: function (data, escape) {
                                    return '<div>' + escape(data.text) + '</div>';
                                }
                            },
                            onDelete: function (values) {
                                console.log('Remove button clicked :::::', values);

                                const message = values.length > 1
                                    ? `Are you sure you want to remove these ${values.length} items?`
                                    : `Are you sure you want to remove "${values[0]}"?`;

                                Swal.fire({
                                    title: 'Confirm Deletion',
                                    text: message,
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Yes, delete it!'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        fetch('<%- BASE_URL %>research/research-project-grant/consultancy-internal-faculty/delete', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({ internalId: values, consultantId: consultantId })
                                        })
                                            .then(response => response.json())
                                            .then(data => {
                                                console.log('data ====>>>>>>>', data);
                                                if (data.status === "Done") {
                                                    Swal.fire(
                                                        'Deleted!',
                                                        'Your item(s) has been deleted.',
                                                        'success'
                                                    );

                                                    values.forEach(value => {
                                                        consultancyInternalFaculty.removeOption(value);
                                                    });
                                                }
                                            })
                                            .catch(error => {
                                                Swal.fire(
                                                    'Error!',
                                                    'There was a problem with the delete operation: ' + error.message,
                                                    'error'
                                                );
                                            });
                                    }
                                });

                                return false;
                            }
                        });

                        $('#consultancy-modal').modal({
                            backdrop: 'static'
                        });

                        removeErrorMsg();
                        submitBtn.classList.add('d-none');
                        updateBtn.classList.remove('d-none');
                        document.querySelector('#uploadNewSupportDocumentDiv').classList.remove('d-none');
                        document.querySelector('#supporting-documents').classList.add('d-none');
                        document.getElementById('researchProjectConsultancy').innerHTML = 'RESEARCH PROJECT EDIT';
                        $('#consultancy-modal').modal('show');
                        


                        // function call for download button
                        setFileNameAttributeToBeDownload(consultantRowToBeUpdated);
                        consultantId = consultantRowToBeUpdated.getAttribute('data-consultancy-id');
                        console.log('consultantId ==>>', consultantId);
                        const isGrantProposalCategoryGoverement = document.getElementById('goverment');
                        const isGrantProposalCategoryIndustry = document.getElementById('industry');
                        const grantResearchProject = document.getElementById('research');
                        const grantConsultancy = document.getElementById('consultancy');
                        const grantCapacityBuilding = document.getElementById('capacity');
                        const titleOfProject = consultantRowToBeUpdated.querySelector('.title-of-project');
                        const thurstAreaOfResearch = consultantRowToBeUpdated.querySelector('.thurst-area');
                        const fundingAgency = consultantRowToBeUpdated.querySelector('.funding-agency');
                        const fundingAmount = consultantRowToBeUpdated.querySelector('.funding-amount');
                        const statusSubmitted = document.getElementById('submitted');
                        const statusPresentationHeld = document.getElementById('presentation-held');
                        const statusGranted = document.getElementById('granted');
                        const internalAuthor = document.getElementById('is-internal');
                        const externalAuthor = document.getElementById('is-external');
                        const supportingDocument = consultantRowToBeUpdated.getAttribute('data-supporting-documents');

                        document.getElementById('nmims-school').value = consultantRowToBeUpdated.getAttribute('data-nmims-school');
                        document.getElementById('nmims-campus').value = consultantRowToBeUpdated.getAttribute('data-nmims-campus');

                        // const facultyDept = consultantRowToBeUpdated.getAttribute('data-faculty-dept');
                        // console.log('facultyDept ====>>>>>', facultyDept)
                        // const projectDuration = consultantRowToBeUpdated.getAttribute('data-project-duration');
                        // console.log('projectDuration ====>>>', projectDuration);
                        // const schemeName = consultantRowToBeUpdated.getAttribute('data-scheme-name');
                        // const principalInvestigator = consultantRowToBeUpdated.getAttribute('data-principal-investigator');
                        // const coInvestigator = consultantRowToBeUpdated.getAttribute('data-co-investigator');
                        // const totalGrntSanctioRupee = consultantRowToBeUpdated.getAttribute('data-total-grant-sanction-rupee');
                        // const recievedAmount = consultantRowToBeUpdated.getAttribute('data-recieved-amount');
                        // const recievedAmountDate = consultantRowToBeUpdated.getAttribute('data-recieved-amount-date')
                        // assigning value with actuall value
                        const GrantProposalCategory = consultantRowToBeUpdated.getAttribute('data-grant-proposal');
                        console.log('GrantProposalCategory', GrantProposalCategory)
                        if (GrantProposalCategory === 'Goverment') {
                            isGrantProposalCategoryGoverement.checked = true;
                        }
                        else {
                            isGrantProposalCategoryIndustry.checked = true;
                        }
                        const grantType = consultantRowToBeUpdated.getAttribute('data-grant-type');
                        console.log('grantType', grantType)
                        if (grantType) {
                            if (grantType === 'Research Project') {
                                grantResearchProject.checked = true;
                                grantConsultancy.checked = false;
                                grantCapacityBuilding.checked = false;
                            }
                            else if (grantType === 'Consultancy') {
                                grantConsultancy.checked = true;
                                grantResearchProject.checked = false;
                                grantCapacityBuilding.checked = false;
                            }
                            else if (grantType === 'Capacity Building') {
                                grantCapacityBuilding.checked = true;
                                grantResearchProject.checked = false;
                                grantConsultancy.checked = false;
                            }

                        }

                        document.getElementById('title-of-project').value = titleOfProject.innerText.trim();
                        // document.getElementById('school').value = school.innerText.trim();
                        // document.getElementById('campus').value = campus.innerText.trim();
                        // document.getElementById('faculty-department').value = facultyDept;
                        // document.getElementById('scheme-name').value = schemeName;
                        // document.getElementById('principal-investigator').value = principalInvestigator;
                        // document.getElementById('co-investigators').value = coInvestigator;
                        // document.getElementById('total-grant-sanction-rupees').value = totalGrntSanctioRupee;
                        // document.getElementById('recieved-amount').value = recievedAmount;
                        //const receivedAmountDateFormate = formatDateToYYYYMMDD(recievedAmountDate);
                        document.getElementById('duration-date').value = consultantRowToBeUpdated.getAttribute('data-projectduration');
                        document.getElementById('scheme').value = consultantRowToBeUpdated.getAttribute('data-scheme');
                        document.getElementById('amount-received').value = consultantRowToBeUpdated.getAttribute('data-amountRecieved');

                        let paymentdate = consultantRowToBeUpdated.getAttribute('data-paymentDate');
                        console.log('payment date ', paymentdate)
                        const PaymentDate = formatDateToYYYYMMDD(paymentdate);
                        document.getElementById('annual-payment-date').value = PaymentDate




                        document.getElementById('thurst-area').value = thurstAreaOfResearch.innerText.trim();
                        console.log('thurstAreaOfResearch ===>>>>', thurstAreaOfResearch)
                        document.getElementById('funding-agency').value = fundingAgency.innerText.trim();
                        document.getElementById('funding-amount').value = fundingAmount.innerText.trim();
                        const projectStatus = consultantRowToBeUpdated.querySelector('.research-project-status');
                        if (projectStatus) {
                            if (projectStatus.innerText === 'Presentation held') {
                                statusPresentationHeld.checked = true;
                                statusGranted.checked = false;
                                statusSubmitted.checked = false;
                            }
                            if (projectStatus.innerText === 'Submitted') {
                                statusPresentationHeld.checked = false;
                                statusGranted.checked = false;
                                statusSubmitted.checked = true;
                            }
                            if (projectStatus.innerText === 'Granted') {
                                statusPresentationHeld.checked = false;
                                statusGranted.checked = true;
                                statusSubmitted.checked = false;
                            }
                        }
                        const submissionGrantDate = consultantRowToBeUpdated.getAttribute('data-submission-date');
                        const formattedDate = formatDateToYYYYMMDD(submissionGrantDate);
                        console.log('formattedDate ==>>', formattedDate)
                        document.getElementById('submission-grant-date').value = formattedDate;
                        const externalAuthorName = consultantRowToBeUpdated.getAttribute('data-author-name');
                        console.log('externalAuthorName ====>>>>', externalAuthorName)
                        const authorTable = consultantRowToBeUpdated.getAttribute('data-author-table');

                        storedFacultyValue = externalAuthorName;
                        console.log('storedFacultyValue ====>>>', storedFacultyValue)
                        // console.log('externalAuthorName ====>>>', externalAuthorName)
                  
                        const supportingDocuments = consultantRowToBeUpdated.getAttribute('data-supporting-documents');
                        console.log('supportingDocuments ==>>', supportingDocuments)

                        fetch('<%- BASE_URL %>research/research-project-grant/external-details', {
                            method: 'POST',
                            headers: {
                                'content-type': 'application/json'
                            },
                            body: JSON.stringify({ consultantId })
                        })
                            .then((Response) => {
                                return Response.ok ? Response.json() : "There was network issue"
                            })
                            .then((data) => {
                                if (data.status === "Done") {
                                    console.log('data ====>>>>', data);
                                    const facultyHeader = ['faculty Name',
                                        'Designation',
                                        'Institution Name',
                                        'Address',
                                        'Action']
                                    createTableRows('external-details-table', data.exetrnalData, 'external-faculty-data-details', 'delete-details', facultyHeader)
                                }
                            })
                            .catch((error) => {
                                console.error('error ===>>>>>', error)
                            })
                    }

                    //for delete
                    if (event.target.classList.contains('delete')) {
                        console.log('clekeddddd');
                        const consultantRowToBEDeleted = event.target.closest('tr');
                        console.log('consultantRowToBEDeleted  ==>>', consultantRowToBEDeleted);
                        consultantId = consultantRowToBEDeleted.getAttribute('data-consultancy-id');
                        console.log('consultantId ===>>', consultantId);
                        let confirmDelete = "Do you want to delete the Book  Publication?";
                        if (confirmDelete) {
                            Swal.fire({
                                title: "Are you sure?",
                                text: "You won't be able to revert this!",
                                icon: "warning",
                                showCancelButton: true,
                                confirmButtonColor: "#3085d6",
                                allowOutsideClick: false,
                                cancelButtonColor: "#d33",
                                confirmButtonText: "Yes, delete it!"
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    // Execute fetch request here after confirmation
                                    fetch('<%- BASE_URL %>research/research-project-grant/delete', {
                                        method: 'POST',
                                        headers: {
                                            'content-type': 'application/json'
                                        },
                                        body: JSON.stringify({ consultantId })
                                    })
                                        .then((result) => result.json())
                                        .then((data) => {
                                            if (data.status === 'Done') {
                                                console.log('data ==>>', data);
                                                // Assuming bookPublicatRowToBeDeleted is correctly defined earlier in your code
                                                consultantRowToBEDeleted.remove();
                                                Swal.fire({
                                                    title: "Deleted!",
                                                    text: "Record has been deleted.",
                                                    icon: "success",
                                                    showConfirmButton: true,
                                                    allowOutsideClick: false,
                                                    confirmButtonText: "OK",
                                                    confirmButtonColor: "#DD6B55"
                                                }).then(() => {
                                                    location.reload();
                                                });
                                            }
                                        })
                                        .catch((error) => {
                                            console.error('Error:', error);
                                            const message = error
                                            Swal.fire({
                                                position: "top-center",
                                                icon: "error",
                                                title: `${message}`,
                                                color: "red",
                                                showConfirmButton: true,
                                                allowOutsideClick: false,
                                                confirmButtonText: "OK",
                                                confirmButtonColor: "#DD6B55"
                                            });
                                        });
                                }
                            });
                        }
                        else {
                            return
                        }
                    }


                    //for view data the form data
                    if (event.target.classList.contains('view')) {
                        console.log('clickeddddd');
                        const consultantRowToBeViewed = event.target.closest('tr');

                        $('#research-consultancy-view').modal({
                            backdrop: 'static'
                        });

                        console.log('consultantRowToBeViewed ==>>', consultantRowToBeViewed);
                        consultantId = consultantRowToBeViewed.getAttribute('data-consultancy-id');
                        console.log('consultantId ==>>', consultantId);
                        const viewGrantProposalCategory = document.getElementById('view-grant-proposal');
                        // const viewTypeOfGrant = document.getElementById('view-grant-type');
                        const viewTitleOfProject = document.getElementById('view-project-title');
                        const viewThurstAreaOfResearch = document.getElementById('view-thurst-aria');
                        const viewFundingAgency = document.getElementById('view-funding-agency');
                        const viewFundingAmount = document.getElementById('view-funding-amount');
                        const viewStatusOfResearchProject = document.getElementById('view-project-status');

                        // const viewSubmissionGrantDate = document.getElementById('view-date');
                        // const viewFacultyType = document.getElementById('view-faculty-type');
                        // const viewSchool = document.getElementById('view-school-name');
                        // const viewCampus = document.getElementById('view-campus-name');
                        // const viewFacultyDept = document.getElementById('view-faculty-dept');
                        // const viewSchemeName = document.getElementById('view-scheme-name');
                        // const viewProjectDuration = document.getElementById('view-project-duration');
                        // const viewProjectSancktionDate = document.getElementById('view-project-sanction-date');
                        // const viewPrincipalInvestigatorName = document.getElementById('view-princilpal-investigator-name');
                        // const viewCoInvestigatorName = document.getElementById('view-co-investigator-name');
                        // const totalGrantSanctionedRupped = document.getElementById('view-total-grant-sanctioned-rupee');
                        // const viwRecievedMoney = document.getElementById('view-recieved-amount');
                        // const viewRecievedAmountDate = document.getElementById('view-amount-recieved-date');
                        const viewSupportingDocument = document.getElementById('view-supporting-document');
                        fetch('<%- BASE_URL %>research/research-project-grant/view', {
                            method: 'POST',
                            headers: {
                                'content-type': 'application/json'
                            },
                            body: JSON.stringify({ consultantId })
                        })
                            .then((result) => {
                                return result.json()
                            })
                            .then((data) => {
                                if (data.status === 'Done') {
                                    console.log('data ==>>', data)
                                    setFileNameInButtons(data)
                                    viewGrantProposalCategory.innerText = data.researchData.grant_proposal_category;
                                    document.getElementById('view-grant-type').innerText = data.researchData.type_of_research_grant;
                                    viewTitleOfProject.innerText = data.researchData.title_of_project;
                                    viewThurstAreaOfResearch.innerText = data.researchData.thrust_area_of_research;
                                    viewFundingAgency.innerText = data.researchData.name_of_funding_agency;
                                    viewFundingAmount.innerText = data.researchData.funding_amount;
                                    viewStatusOfResearchProject.innerText = data.researchData.status_of_research_project;
                                    // viewSubmissionGrantDate.innerText = formatDateToYYYYMMDD(data.consultantData.submission_grant_date);
                                    // viewFacultyType.innerText = data.consultantData.faculty_type.replace(/,/g, ' ');
                                    // viewSupportingDocument.innerText = data.researchData.supporting_documents;
                                    document.getElementById('view-anual-payment-date').innerText = formatDateToYYYYMMDD(data.researchData.paymentdate);
                                    document.getElementById('view-project-duration').innerText = data.researchData.projectduration;
                                    document.getElementById('view-nmims-campus').innerText = data.researchData.nmims_campus;
                                    document.getElementById('view-nmims-school').innerText = data.researchData.nmims_school;
                                    document.getElementById('view-recieved-amount').innerText = data.researchData.amountrecieved;

                                    console.log('submission date ', data.submissionGrantDate)
                                    document.getElementById('view-submission-date').innerText = data.submissionGrantDate;
                                    let facultyDetailsHTML = `
                            <table class="table" border='1px'>
                                <thead>
                                    <th>#</th>
                                    <th>Faculty Name</th>
                                    <th>Designation</th>
                                    <th>Institution Name</th>
                                    <th>Address</th>
                                </thead>
                                <tbody>`;

                                    data.facultyInfoArray.forEach((faculty, index) => {
                                        facultyDetailsHTML += `
                            <tr>
                                <td class="view-content">${index + 1}</td>
                                <td class="view-content">${faculty.facultyName}</td>
                                <td class="view-content">${faculty.designation}</td>
                                <td class="view-content">${faculty.address}</td>
                            </tr>`;
                                    });

                                    facultyDetailsHTML += `
                            </tbody>
                        </table>`;

                                    // Set the generated faculty details HTML
                                    document.getElementById('faculty-details-container').innerHTML = facultyDetailsHTML;

                                    // const viewFacultyType = document.getElementById('view-faculty-type');
                                    // viewSchool.innerText = data.consultantData.school;
                                    // viewCampus.innerText = data.consultantData.campus;
                                    // viewFacultyDept.innerText = data.consultantData.faculty_dept;
                                    // viewSchemeName.innerText = data.consultantData.scheme_name;
                                    // viewProjectDuration.innerText = data.consultantData.project_duration;
                                    // viewProjectSancktionDate.innerText = data.sanctionGrantDate;
                                    // viewPrincipalInvestigatorName.innerText = data.consultantData.principal_investigator;
                                    // viewCoInvestigatorName.innerText = data.consultantData.co_investigator;
                                    // totalGrantSanctionedRupped.innerText = data.consultantData.total_grant_sanction_rupees;
                                    // viwRecievedMoney.innerText = data.consultantData.recieved_amount;
                                    // viewRecievedAmountDate.innerText = data.recievedAmountDate;
                                }
                            })

                        $('#research-consultancy-view').modal('show');

                    }
                })

                const updateResearchConsultancy = async (url) => {
                        console.log('clickeddd')
                        const updatedConsultantData = new FormData();
                        const grantProposalCategory = document.querySelector('input[name="grant-proposal"]:checked').value;
                        const typeOfGrant = document.querySelector('input[name="type-of-grant"]:checked').value;
                        const titleOfProject = document.getElementById('title-of-project').value;
                        const thurstAreaOfResearch = document.getElementById('thurst-area').value;
                        const fundingAgency = document.getElementById('funding-agency').value;
                        const fundingAmount = document.getElementById('funding-amount').value;
                        const amountRecieved = document.getElementById('amount-received').value;
                        const scheme = document.getElementById('scheme').value;
                        const annualPaymentDate = document.getElementById('annual-payment-date').value;
                        const durationDate = document.getElementById('duration-date').value;
                        const nmimsSchool = document.getElementById('nmims-school').value;
                        const nmimsCampus = document.getElementById('nmims-campus').value;

                        // const school = document.getElementById('school').value;
                        // console.log('school ====>>>', school)
                        // const campus = document.getElementById('campus').value;
                        // // const industry =  document.getElementById('industry');
                        // const facultyDept = document.getElementById('faculty-department').value;
                        // const schemeName = document.getElementById('scheme-name').value;
                        // const principalInvestigator = document.getElementById('principal-investigator').value;
                        // const coInvestigator = document.getElementById('co-investigators').value;
                        // const totalGrntSanctioRupee = document.getElementById('total-grant-sanction-rupees').value;
                        // const recievedAmount =  document.getElementById('recieved-amount').value;
                        // const recievedAmountDate = document.getElementById('amount-recieved-date').value;
                        const statusOfResearchProject = document.querySelector('input[name="research-project-status"]:checked').value;
                        const submissionGrantDate = document.getElementById('submission-grant-date').value;
                        // const projectDuration = document.getElementById('duration-of-project').value

                        const updatedSupportingDocument = document.getElementById('supporting-documents');

                        let updatedConsultantFiles = updatedSupportingDocument.files;
                        if (updatedConsultantFiles.length > 0) {
                            for (let i = 0; i <= updatedConsultantFiles.length - 1; i++) {
                                console.log('file name ==>>>', updatedConsultantFiles[i].name);
                                if (updatedConsultantFiles[i].name) {
                                    updatedConsultantData.append('researchSupportingDocument', updatedConsultantFiles[i]);
                                }
                            }
                        }
                        else {
                            updatedConsultantFiles = null;
                            updatedConsultantData.append('researchSupportingDocument', updatedConsultantFiles);
                        }

                        // insert external new details
                        let externalFacultyDetailsRow = document.querySelectorAll('.external-faculty-details');
                        let externalFacultyDetails = [];

                        externalFacultyDetailsRow.forEach((field, index) => {
                            if (field.value !== '') {
                                externalFacultyDetails.push(field.value);
                            }
                        });

                        //update exeternal details 
                        const updateExternalDetails = document.querySelectorAll('.external-faculty-data-details');
                        const updateExternalFacultyData = [];

                        updateExternalDetails.forEach((field, index) => {
                            if (field.value !== '') {
                                updateExternalFacultyData.push(field.value);
                            }
                            console.log('field ===>>>>>>', field.value);
                        });

                        const facultyIdsArray = facultyIdContainer ? facultyIdContainer[facultyIdContainer.length - 1] : null;
                        const facultyContainer = facultyIdsArray ? JSON.stringify(facultyIdsArray) : null;
                       //update external authors details 
                        const updateExternalData = updateExternalFacultyData ? JSON.stringify(updateExternalFacultyData) : null;
                        //insert external authors details
                        const externalDataInsert = externalFacultyDetails ? JSON.stringify(externalFacultyDetails) : null;

                        // appending into form
                        updatedConsultantData.append('consultantId', consultantId);
                        updatedConsultantData.append('nmimsSchool', nmimsSchool);
                        updatedConsultantData.append('nmimsCampus', nmimsCampus);
                        updatedConsultantData.append('facultyContainer', facultyContainer);
                        updatedConsultantData.append('grantProposalCategory', grantProposalCategory);
                        updatedConsultantData.append('typeOfGrant', typeOfGrant);
                        updatedConsultantData.append('titleOfProject', titleOfProject);
                        updatedConsultantData.append('thurstAreaOfResearch', thurstAreaOfResearch);
                        updatedConsultantData.append('fundingAgency', fundingAgency);
                        updatedConsultantData.append('fundingAmount', fundingAmount);
                        updatedConsultantData.append('statusOfResearchProject', statusOfResearchProject);
                        updatedConsultantData.append('submissionGrantDate', submissionGrantDate);
                        updatedConsultantData.append('scheme', scheme);
                        updatedConsultantData.append('durationDate', durationDate);
                        updatedConsultantData.append('amountReceived', amountRecieved);
                        updatedConsultantData.append('annualPaymentDate', annualPaymentDate);
                        updatedConsultantData.append('externalFacultyDetails', externalDataInsert);
                        updatedConsultantData.append('updateExternalData', updateExternalData);


                        // const updatedSchool = document.getElementById('school').value;
                        // const updatedCampus = document.getElementById('campus').value;
                        // const updatedFacultyDept = document.getElementById('faculty-department').value;
                        // const updatedSchemeName = document.getElementById('scheme-name').value;
                        // const updatedPrincipalInvestigator = document.getElementById('principal-investigator').value;
                        // const updatedCoInvestigator = document.getElementById('co-investigators').value;
                        // const updatedTotalGrntSanctionRupee = document.getElementById('total-grant-sanction-rupees').value;
                        // const updatedRecievedAount = document.getElementById('recieved-amount').value;
                        // const updatedRecievedAountDate = document.getElementById('amount-recieved-date').value

                        // updatedConsultantData.append('school', updatedSchool);
                        // updatedConsultantData.append('projectDuration' , updateProjectDuration);
                        // updatedConsultantData.append('campus', updatedCampus);
                        // updatedConsultantData.append('facultyDept', updatedFacultyDept);
                        // updatedConsultantData.append('schemeName', updatedSchemeName);
                        // updatedConsultantData.append('principalInvestigator', updatedPrincipalInvestigator);
                        // updatedConsultantData.append('coInvestigator', updatedCoInvestigator);
                        // updatedConsultantData.append('totalGrntSanctioRupee', updatedTotalGrntSanctionRupee);
                        // updatedConsultantData.append('recievedAmount', updatedRecievedAount);
                        // updatedConsultantData.append('recievedAmountDate', updatedRecievedAountDate);
                        // updatedConsultantData.append('facultyType' , updatedFacultyType);

                        fetch(url, {
                            method: 'POST',
                            body: updatedConsultantData
                        })
                            .then((result) => {
                                return result.json()
                            })
                            .then((data) => {
                                if (data.status === 'Done') {
                                    // consultantRowToBeUpdated.setAttribute('data-grant-type', data.updatedConsultant.typeOfGrant);
                                    // consultantRowToBeUpdated.setAttribute('data-grant-proposal', data.updatedConsultant.grantProposalCategory)
                                    // consultantRowToBeUpdated.setAttribute('data-submission-date', data.updatedConsultant.submissionGrantDate);
                                    // consultantRowToBeUpdated.setAttribute('data-author-type', data.externalAuthorName);
                                    // updatedConsultantFiles = updatedConsultantFiles ? consultantRowToBeUpdated.setAttribute('data-supporting-documents', data.updatedConsultantFilesString) : '';
                                    // consultantRowToBeUpdated.setAttribute('data-recieved-amount-date', data.updatedConsultant.recievedAmountDate);
                                    // consultantRowToBeUpdated.setAttribute('data-recieved-amount', data.updatedConsultant.recievedAmount);
                                    // consultantRowToBeUpdated.setAttribute('data-total-grant-sanction-rupee', data.updatedConsultant.totalGrntSanctioRupee);
                                    // consultantRowToBeUpdated.setAttribute('data-scheme-name', data.updatedConsultant.schemeName);
                                    // consultantRowToBeUpdated.setAttribute('data-project-duration', data.updatedConsultant.projectDuration);

                                    // consultantRowToBeUpdated.setAttribute('data-principal-investigator', data.updatedConsultant.principalInvestigator);
                                    // consultantRowToBeUpdated.setAttribute('data-co-investigator', data.updatedConsultant.coInvestigator);
                                    // consultantRowToBeUpdated.querySelector('.title-of-project').innerText = data.updatedConsultant.titleOfProject;
                                    // consultantRowToBeUpdated.querySelector('.thurst-area').innerText = data.updatedConsultant.thurstAreaOfResearch;
                                    // consultantRowToBeUpdated.querySelector('.funding-agency').innerText = data.updatedConsultant.fundingAgency;
                                    // consultantRowToBeUpdated.querySelector('.research-project-status').innerText = data.updatedConsultant.statusOfResearchProject;
                                    // consultantRowToBeUpdated.querySelector('.grant-type').innerText = data.updatedConsultant.grantType;
                                    // consultantRowToBeUpdated.querySelector('.grant-proposal').innerText = data.updatedConsultant.grantProposalCategory;
                                    Swal.fire({
                                        position: "top-center",
                                        icon: "success",
                                        title: `${data.message}`,
                                        showConfirmButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonText: "OK",
                                        confirmButtonColor: "#DD6B55",
                                        // timer: 1500
                                    })
                                    .then(() => {
                                        document.location.reload();
                                    });
                                    $('#consultancy-modal').modal('hide');
                                }
                                else {
                                    const message = data.message;
                                    console.log('data ===>>>', data)
                                    console.log('message ==:::', message);
                                    Swal.fire({
                                        position: "top-center",
                                        icon: "error",
                                        title: `${data.errorCode}`,
                                        color: "red",
                                        with: "20PX",
                                        html: `<span style="color: red;">${data.message}</span>`,
                                        showConfirmButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonText: "OK",
                                        confirmButtonColor: "#DD6B55"
                                    });
                                }
                            })
                            .catch((error) => {
                                const message = error
                                Swal.fire({
                                    position: "top-center",
                                    icon: "error",
                                    title: `${message}`,
                                    color: "red",
                                    showConfirmButton: true,
                                    allowOutsideClick: false,
                                    confirmButtonText: "OK",
                                    confirmButtonColor: "#DD6B55"
                                });
                            })
                    };

                updateBtn.addEventListener('click', async () => {
                    console.log('clickedddd')
                    formGroup = updateBtn.closest('.validate-input')
                    console.log("formGroup::::::::", formGroup)
                    formGroup.querySelectorAll('input[type="file"]')?.forEach(elm => {
                        if(elm.files.length > 0){
                            const validate = elm.getAttribute('data-validate');
                            const elemVal = elm.value;
                        }
                        
                        else{
                            elm.removeAttribute('data-validate')
                        }
                        
                    })
                    const isValid = validateRequiredFormFields(updateBtn);
                    // const internalAuthor = document.getElementById('is-internal');
                    // const externalAuthor = document.getElementById('is-external-update');
                    if (isValid) {
                        await updateResearchConsultancy('<%- BASE_URL %>research/research-project-grant/update');
                    }
                    else {
                        Swal.fire({
                            position: "top-center",
                            icon: "error",
                            title: "Validation Failed",
                            color: "red",
                            showConfirmButton: true,
                            allowOutsideClick: false,
                            confirmButtonText: "OK",
                            confirmButtonColor: "#DD6B55"
                        });
                        // .then(() => {
                        //     if (internalAuthor.checked || externalAuthor.checked) {
                        //         document.getElementById('facultyTypeError').innerText = ''
                        //     } else {
                        //         document.getElementById('facultyTypeError').innerText = 'Select One Of The Faculty Type'
                        //     }
                        // });
                    }
                });

                // for file setattribute in button
                function setFileNameInButtons(data) {
                    console.log('data ==>>', data);
                    const researchConFile = document.getElementById('consultancy-file-view');
                    console.log('researchConFile ==>>', researchConFile);
                    researchConFile.setAttribute('data-filename', data.researchData.supporting_documents);
                };

                //eventlistner for download files
                document.addEventListener('click', async function (event) {
                    const button = event.target.closest('button');
                    if (button && button.id && button.classList.contains('download-file')) {
                        console.log('button ===>>>', button)
                        try {
                            const fileDataString = button.getAttribute('data-filename');
                            if (!fileDataString) {
                                throw new Error('Data filename attribute not found on button.');
                            }

                            const fileArray = fileDataString.split(',').map(fileName => fileName.trim()).filter(Boolean);
                            if (fileArray.length === 0) {
                                throw new Error('No file names found in data filename attribute.');
                            }

                            const downloadPromises = fileArray.map(async (fileName) => {
                                console.log('fileName ===>>>', fileName)
                                const fileUrl = `<%- BASE_URL %>research/research-project-grant/download/${fileName}`;
                                downloadFile(fileName, fileUrl)
                                try {
                                    const response = await fetch(fileUrl);
                                    if (!response.ok) {
                                        throw new Error(`Failed to download file: ${fileName}`);
                                    }
                                    console.log('File downloaded successfully:', fileName);
                                    return fileName;
                                } catch (error) {
                                    console.error('Error downloading file:', error);
                                    throw error;
                                }
                            });

                            const downloadedFiles = await Promise.all(downloadPromises);
                            console.log('All files downloaded successfully:', downloadedFiles);
                        } catch (error) {
                            console.error('Error downloading files:', error);
                            alert(`There was a problem downloading files: ${error.message}`);
                        }
                    }
                });


                // set value into button inside
                function setFileNameAttributeToBeDownload(data) {
                    console.log('data row in side function ===>>', data);
                    const consultancyDataFiles = document.getElementById('consultancy-file-edit');
                    consultancyDataFiles.classList.remove('d-none');
                    const consultancyDataString = data.getAttribute('data-supporting-documents');

                    // setAttribute into button
                    consultancyDataFiles.setAttribute('data-filename', consultancyDataString);

                };


                // EVENT LIST THAT WILL USE USE TO OPEN DROP DOWN LIST  

                let storedSelectedValue;
                let additionalDetails = [];

                const enternalText = document.getElementById('enternal-text');


                function handleEmployeeDropdownChange() {
                        const selectedValues = Array.from(employeeDropdown.options)
                            .filter(option => option.selected)
                            .map(option => option.value);
                        const facultyIds = selectedValues.length === 0 ? "" : selectedValues;
                        console.log('facultyIds ===>>>>>', facultyIds);
                        if (!facultyIdContainer.some(ids => ids === facultyIds)) {
                            facultyIdContainer.push(facultyIds);
                        }
                        console.log("Selected employee values:", facultyIdContainer);

                    }

                employeeDropdown.addEventListener("change", handleEmployeeDropdownChange);


                $("#consultancy-list").DataTable({

                    "pageLength": 5,
                    "lengthMenu": [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
                })


                document.querySelector('#uploadNewSupportDocument').addEventListener('click', function (e) {

                    let is_checked = document.querySelector('#uploadNewSupportDocument').checked;
                    console.log("is_checked :", is_checked);
                    if (is_checked) {
                        document.querySelector('#supporting-documents').classList.remove('d-none');
                    } else {
                        document.querySelector('#supporting-documents').classList.add('d-none');
                    }
                });

                function checkAlphabets(facultyName, idName) {

                    let facultyError = document.getElementById(idName);

                    // if (facultyName.length == 0 && idName === 'facultyError' || ) {
                    //     facultyError.innerText = "Name is Required";
                    //     return false;
                    // }

                    // if (facultyName.length == 0 && idName === 'desError') {
                    //     facultyError.innerText = "Designation is Required";
                    //     return false;
                    // }

                    if (!facultyName || facultyName.trim() === "") {
                        facultyError.innerText = "Provide Valid Input";
                        return false;
                    }

                    const words = facultyName.split(" ");

                    for (const word of words) {
                        for (let i = 0; i < word.length; i++) {
                            const charCode = word.charCodeAt(i);
                            if (
                                (charCode < 65 || charCode > 90) &&
                                (charCode < 97 || charCode > 122)
                            ) {
                                facultyError.innerText = "Provide Valid Input";
                                return false;
                            }
                        }
                    }

                    facultyError.innerText = "";
                    return true;
                }

                function checkEmpError(facultyEmpId, errid) {
                    let empError = document.getElementById(errid);
                    let bool = true;

                    if (facultyEmpId.length === 0) {
                        empError.innerText = 'Provide Valid Input';
                        return false;
                    }

                    for (let i = 0; i < facultyEmpId.length; i++) {
                        const charCode = facultyEmpId.charAt(i);
                        if (!(charCode >= '0' && charCode <= '9')) {
                            empError.innerText = 'Provide Valid Input';
                            bool = false;
                            break;
                        }
                    }

                    if (bool) {
                        empError.innerText = '';
                    }

                    return bool;
                }


                document.getElementById('headerClose').addEventListener('click', () => {
                    document.location.reload();
                })

                document.getElementById('footerClose').addEventListener('click', () => {
                    document.location.reload();
                })


                function enternalFacultyDropDownList() {
                        employeeList.classList.remove('d-none');
                        document.getElementById("external-details-table").classList.add('d-none');
                    }

            
                // addEventListener 
                enternalFacultyType.addEventListener('click', enternalFacultyDropDownList)

                 // for creating input field for table 
                 document.querySelector('#is-external-details').addEventListener('click', () => {
                        console.log('clickedd external author');
                        document.getElementById("external-details-table").classList.remove('d-none');
                        employeeList.classList.add('d-none');
                        console.log("BUTTON CLICKED");
                        let newRow = `
                                <tr>
                                    <td><input type="text"  class="external-faculty-details"></td>
                                    <td><input type="text" class="external-faculty-details"></td>
                                    <td><input type="text" class="external-faculty-details"></td>
                                    <td><input type="text" class="external-faculty-details"></td>
                                    <td><button class="delete-row  btn btn-danger">Delete</button></td>
                                </tr> 
                            `;

                        document.querySelector('#add-faculty-details').insertAdjacentHTML('afterend', newRow);
                        let deleteButton = document.querySelector('#add-faculty-details').nextElementSibling.querySelector('.delete-row');
                        deleteButton.addEventListener('click', handleDeleteButtonClick);
                })

                 // foe delete empy input field 
                 function handleDeleteButtonClick() {
                    this.parentNode.parentNode.remove();
                }


                function createTableRows(tableId, data, inputClassName, deleteId, headers) {
                        console.log('data to create table ===>>>>>', data);
                        let table = document.querySelector(`#${tableId}`);
                        let tbody = table.querySelector('tbody');
                        let thead = table.querySelector('thead');
                        tbody.innerHTML = '';
                        thead.innerHTML = '';

                        let serialNumber = 1;

                        // Create table header
                        let headerRow = document.createElement('tr');

                        // Serial number header
                        // let serialHeader = document.createElement('th');
                        // serialHeader.textContent = 'Serial';
                        // headerRow.appendChild(serialHeader);

                         // Create headers from the provided headers array
                         headers.forEach(function (header) {
                            let th = document.createElement('th');
                            th.textContent = header;
                            headerRow.appendChild(th);
                        });
                       
                        

                        //
                        // if (data[0] && typeof data[0] === 'object') {
                        //     Object.keys(data[0]).forEach(function (key) {
                        //         if (key !== 'id') {
                        //             let th = document.createElement('th');
                        //             th.textContent = key;
                        //             headerRow.appendChild(th);
                        //         }
                        //     });
                        // } else {
                        //     console.error('Data is not in the expected format.');
                        // }

                        // Add id header and hide it

                        let idHeader = document.createElement('th');
                        idHeader.textContent = 'ID';
                        idHeader.classList.add('d-none');
                        headerRow.appendChild(idHeader);
                        // Add data cells based on headers
                      

                        thead.appendChild(headerRow);

                        // Create table rows
                        data.forEach(function (rowData) {
                            let row = document.createElement('tr');
                            row.setAttribute('data-table-id', rowData.id);

                            // Add serial number cell
                            // let serialCell = document.createElement('td');
                            // serialCell.textContent = serialNumber++;
                            // row.appendChild(serialCell);




                            // Add data cells
                            Object.keys(rowData).forEach(function (key) {
                                if (key !== 'id') {
                                    let cell = document.createElement('td');
                                    let input = document.createElement('input');
                                    input.type = 'text';
                                    input.value = rowData[key];
                                    if (inputClassName) {
                                        input.classList.add(inputClassName);
                                    }
                                    cell.appendChild(input);
                                    row.appendChild(cell);
                                }
                            });

                            // Add hidden id cell
                            let idCell = document.createElement('td');
                            let idInput = document.createElement('input');
                            idInput.type = 'text';
                            idInput.value = rowData.id;
                            idCell.classList.add('d-none');
                            if (inputClassName) {
                                idInput.classList.add(inputClassName);
                            }
                            idCell.appendChild(idInput);
                            row.appendChild(idCell);

                            // Add delete button cell
                            let deleteCell = document.createElement('td');
                            let deleteButton = document.createElement('button');
                            console.log('rowData.id ====>>>>', rowData.id);
                            deleteButton.setAttribute('data-table-id', rowData.id);

                            const dataRecordId = rowData.id;
                            deleteButton.classList.add(inputClassName);

                            deleteButton.textContent = 'Delete';
                            deleteButton.classList.add('btn', 'btn-danger');

                            deleteButton.addEventListener('click', function () {
                                // Find and remove the row after fetch confirmation
                                document.querySelector(`button[data-table-id='${dataRecordId}']`).click();
                            });

                            deleteCell.appendChild(deleteButton);
                            row.appendChild(deleteCell);

                            // Append the row to the table body
                            tbody.appendChild(row);
                        });
                    }
                
                //for delete exetrnal faculty record 
                document.addEventListener('click', (event) => {
                        const button = event.target.closest('button');
                        if (!button) return;

                        const relativeClass = button.className;
                        const tableId = button.getAttribute('data-table-id');
                        const specificClasses = ['external-faculty-data-details'];

                        const classList = relativeClass.split(' ');

                        specificClasses.forEach(specificClass => {
                            if (classList.includes(specificClass)) {
                                console.log(`Yes, the button contains the class: ${specificClass}`);
                                let confirmDelete = `Do you want to delete the ${specificClass} ?`;
                                if (confirmDelete) {
                                    Swal.fire({
                                        title: "Are you sure?",
                                        text: "You won't be able to revert this!",
                                        icon: "warning",
                                        showCancelButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonColor: "#3085d6",
                                        cancelButtonColor: "#d33",
                                        confirmButtonText: "Yes, delete it!"
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            // Execute fetch request here after confirmation
                                            fetch(`<%- BASE_URL %>research/research-project-grant/${specificClass}/delete`, {
                                                method: 'POST',
                                                headers: {
                                                    'content-type': 'application/json'
                                                },
                                                body: JSON.stringify({ tableId })
                                            })
                                                .then((result) => result.json())
                                                .then((data) => {
                                                    if (data.status === 'Done') {
                                                        console.log('data ==>>', data);
                                                        // Find the row and remove it
                                                        const row = document.querySelector(`tr[data-table-id='${tableId}']`);
                                                        if (row) {
                                                            row.remove();
                                                        }
                                                        Swal.fire({
                                                            title: "Deleted!",
                                                            text: "Record has been deleted.",
                                                            icon: "success",
                                                            showConfirmButton: true,
                                                            allowOutsideClick: false,
                                                            confirmButtonText: "OK",
                                                            confirmButtonColor: "#DD6B55"
                                                        })
                                                    }
                                                })
                                                .catch((error) => {
                                                    console.error('Error:', error);
                                                    const message = error;
                                                    Swal.fire({
                                                        position: "top-center",
                                                        icon: "error",
                                                        title: `${message}`,
                                                        color: "red",
                                                        showConfirmButton: true,
                                                        allowOutsideClick: false,
                                                        confirmButtonText: "OK",
                                                        confirmButtonColor: "#DD6B55"
                                                    });
                                                });
                                        }
                                    });
                                } else {
                                    return;
                                }
                            }
                        });
                    });

                

            </script>
            <!-- inline javascript -->
            <!-- <%- include('./partials/pagination') %> -->
            <%- include('./partials/footer') %>
                <%- include('./partials/footer-end') %>