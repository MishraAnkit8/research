<%- include('./partials/head') %>
    <!-- inline css -->
    <!-- Navbar section -->
    <%- include('./partials/header') %>
        <!-- This is left sidebar  -->
        <%- include('./partials/left-sidebar') %>

            <main class="main" id="main-content">
                <div class="base-section coustom-section">
                    <!--DASHBOARD CONTENT START-->
                    <div class="errorHtml"></div>
                    <div class="breadcrumbs-container">
                        <ul class="breadcrumb">
                            <li class="breadcrumb-link">
                                <a href="<%- BASE_URL %>dashboard-page"> Dashboard </a>
                            </li>
                            <li class="breadcrumb-link">
                                <a href="<%- BASE_URL %>research"> Research </a>
                            </li>
                            <li class="breadcrumb-link">IPR</li>
                        </ul>
                    </div>
                    <div>
                        <div class="table-card-header text-uppercase d-flex align-items-center justify-content-between">
                            <div>
                                <h5 class="pl-2">IPR LIST</h5>
                            </div>
                            <div>
                                <button id="ipr-add-modal" type="button" class="btn btn-primary add-modal"
                                    data-toggle="modal" data-target="#ipr-modal-form">ADD
                                    <i class="fas fa-plus plus"></i></button>
                                </button>
                            </div>
                        </div>
                        <div class="card-body table-responsive">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <!-- <label>Show Entries</label>
                                    <select class="form-select" id="changeEntry">
                                        <option value="5">5</option>
                                        <option value="10">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                        <option value="150">150</option>
                                        <option value="200">200</option>
                                        <option value="250">250</option>
                                        <option value="300">300</option>
                                        <option value="350">350</option>
                                        <option value="400">400</option>
                                        <option value="500">500</option>
                                        <option value="800">800</option>
                                        <option value="1000">1000</option>
                                    </select> -->
                                </div>
                                <div>
                                    <!-- <div class="table-searchbar-container">
                                        <button type="button" id="searchBtn"><i class="fas fa-search"></i></button>
                                        <input type="search" id="searchKeyword" placeholder="Enter keywords"
                                            class="table-searchbar">
                                    </div> -->
                                </div>
                            </div>
                            <table class="table vertical-lines custom-table table-responsive  research-pagination"
                                id="ipr-data-list">
                                <thead>
                                    <th class="col-lg-1">Serial no</th>
                                    <th class="col-lg-1 nmims-school">NMIMS School</th>
                                    <th class="col-lg-1 nmims-campus">NMIMS Campus</th>
                                    <th class="col-lg-1">Type Of Invention(IPR)</th>
                                    <th class="col-lg-1">Title OfPatent/Invention</th>
                                    <th class="col-lg-1">Patent Status</th>
                                    <th class="col-lg-1">Patent/Invention Application Number</th>
                                    <th class="col-lg-1">Patent Applicant Name</th>
                                    <th class="col-lg-1">Action</th>
                                </thead>
                                <tbody class="data-list">
                                    <% if (IPRDataList) { %>
                                        <% IPRDataList.forEach(function(iprData,index) {%>
                                            <tr data-ipr-id="<%- iprData.ipr_id %>"
                                                data-filed-date="<%- iprData.patent_filed_date %>"
                                                data-grant-date="<%- iprData.patent_grant_date %>"
                                                data-published-date="<%- iprData.patent_published_date %>"
                                                data-grant-number="<%- iprData.patent_grant_number %>"
                                                data-published-number="<%- iprData.patent_publication_number %>"
                                                data-institute-affiliation="<%- iprData.institutional_affiliation %>"
                                                data-supporting-documents="<%- iprData.supporting_documents %>"
                                                data-school-ids="<%- iprData.school_id %>"
                                                data-campus-ids="<%- iprData.campus_id %>"
                                                data-status-ids="<%- iprData.patent_stage_id %>"
                                                data-invention-ids="<%- iprData.invention_types_id %>"
                                                data-sdg-goals-ids="<%- iprData.sdg_id %>"
                                                data-internal-faculty-ids="<%- iprData.faculty_id %>">
                                                <td><%- index+1 %></td>
                                                <td class="nmims-school"><%- iprData.nmims_school %></td>
                                                <td class="nmims-campus"><%- iprData.nmims_campus %></td>
                                                <td class="type-of-invention col-lg-1"><%- iprData.invention_types %>
                                                </td>
                                                <td class="title-of-invention col-lg-1"><%- iprData.patent_title %></td>
                                                <td class="patent-stage col-lg-1"><%- iprData.patent_stage_statuses %>
                                                </td>
                                                <td class="application-no col-lg-1"><%-
                                                        iprData.patent_application_number %></td>
                                                <td class="applicant-name col-lg-1"><%- iprData.applicant_name %></td>
                                                
                                                <td class="col-lg-1">
                                                    <label class="view" data-ipr-id="<%- iprData.id %>"><i class="fa-solid fa-eye view text-danger"
                                                            data-ipr-id="<%- iprData.id %>"></i></label>
                                                    <label class="edit" data-ipr-id="<%- iprData.id %>"><i class="fa fa-edit edit text-danger"
                                                            data-ipr-id="<%- iprData.id %>"></i></label>
                                                    <label class="delete" data-ipr-id="<%- iprData.id %>"><i class="fa-solid fa-trash delete text-danger"
                                                            data-ipr-id="<%- iprData.id %>"></i></label>
                                                </td>
                                                <!-- <td style="display:flex;justify-content: center;">
                                                    <b title="View" class="view border-right-0" style="cursor: pointer;"
                                                        data-ipr-id="<%- iprData.id %>">
                                                        &#128065;
                                                    </b>
                                                    <b title="Edit" class="edit border-right-0" style="cursor: pointer;"
                                                        data-ipr-id="<%- iprData.id %>">
                                                        &#9998;
                                                    </b>
                                                    <b title="Delete" class="delete border-right-0"
                                                        style="cursor: pointer;" data-ipr-id="<%- iprData.id %>">
                                                        &#128465;

                                                    </b>
                                                </td> -->
                                            </tr>
                                            <% }); %>
                                                <% } else { %>
                                                    <tr>
                                                        <td>Sorry No Data Is Present </td>
                                                    </tr>
                                                    <% } %>
                                </tbody>
                                <tr>
                                    <div id="no-records-message"
                                        style="display: none; color: red; margin-top: 10px; padding-left: 40%;">
                                        <b class="no-record">No records found.</b>
                                    </div>
                                </tr>
                            </table>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div>
                            <label>
                            </label>
                            <label class="d-none" id="row-count"></label>
                        </div>
                        <div>
                            <!-- <button id="prevBtn" class="btn btn-primary">Previous</button>
                            <button id="nextBtn" class="btn btn-primary">Next</button>
                            <p id="pagination" class="pagination-search"></p> -->
                        </div>
                    </div>
                    <!--Import Modal -->
                    <div class="modal fade" id="open-program-modal" tabindex="-1" aria-labelledby="open-program-modal"
                        aria-hidden="true">
                    </div>
                    <!-- EDIT PROGRAM AND UPDATE -->
                    <div class="modal fade" id="edit-program-modal" tabindex="-1" aria-labelledby="editModalLabel"
                        aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="editModalLabel">Update Program</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                                        aria-label="Close"></button>
                                </div>
                                <div id="errorHtml"></div>
                                <div class="modal-body">
                                    <div class="mb-3">
                                        <label for="exampleInputEmail1" class="form-label">Program Name</label>
                                        <input type="text" class="form-control" id="program_name" name="program_name">
                                        <input type="hidden" class="form-control" id="hidden_id" name="hidden_id">
                                    </div>
                                    <div class="mb-3">
                                        <label for="exampleInputPassword1" class="form-label">Program Type</label>
                                        <select class="form-control" name="program_type_lid" id="program_type_lid">
                                            <option value="1">Full Time</option>
                                            <option value="2">Part Time</option>
                                        </select>
                                    </div>

                                    <div class="mb-3">
                                        <label for="abbr" class="form-label">Program Abbr</label>
                                        <input type="text" class="form-control" id="abbr" name="abbr">
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary"
                                        data-bs-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary updateProgram">Update</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
            <!--IPR   Modal  form -->
            <div class="modal fade " id="ipr-modal-form" tabindex="-1" role="dialog" aria-labelledby="ipr-modal-form"
                aria-hidden="true">
                <div class="modal-dialog modal-dialog-scrollable modal-lg modal-fullscreen p-5" role="document">
                    <div class="modal-content modal-content-data validate-input">
                        <div class="modal-header">
                            <h5 class="modal-title" id="patent-study"> Invention IPR </h5>
                            <div type="button" class="close" id="headerClose" data-dismiss=" modal" aria-label="Close">
                                <span aria-hidden="true"><i class="fas fa-times "></i></span>
                            </div>
                        </div>
                        <div class="modal-body">
                            <div class="row">

                                <!-- nmims School-->
                                <!-- <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="nmims-school" class="form-label fw-bold">School <i style="color: red;">*</i></label>
                                    <select class="select-option" id="nmims-school-list" data-validate="isEmpty,isExist"
                                        data-err-msg="This field is required and select value" required multiple>
                                        <option value="">Select School</option>
                                        <% nmimsSchoolList.forEach(function(school) { %>
                                            <option value="<%= school.id %>">
                                                <%= school.name %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>

                                nmims campus -->
                                <!-- <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="nmims-campus" class="form-label fw-bold">Campus <i style="color: red;">*</i></label>
                                    <select class="select-option" id="nmims-campus-list" data-validate="isEmpty,isExist"
                                        data-err-msg="This field is required and select value" required multiple>
                                        <option value="">Select campus</option>
                                        <% nmimsCampusList.forEach(function(campus) { %>
                                            <option value="<%= campus.id %>">
                                                <%= campus.name %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div> -->
                                 <!--NMIMS School - Author-->
                                 <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="nmims-school-authors" class="form-label fw-bold ">NMIMS School - Author <i style="color: red;">*</i></label>
                                    <input type="url" name="web-link" id="nmims-school"
                                        data-validate="isEmpty,isExist,isLength:2:255"
                                        data-err-msg="Provide Valid Input" class="form-control" required />
                                </div>

                                <!-- NMIMS Campus - Author -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="nmims-campus-authors" class="form-label fw-bold ">NMIMS Campus - Author <i style="color: red;">*</i></label>
                                    <input type="url" name="web-link" id="nmims-campus"
                                        data-validate="isEmpty,isExist,isLength:2:255"
                                        data-err-msg="Provide Valid Input" class="form-control" required />
                                </div>
                               
                                <!-- Sustainable Development Goals (SDG) [dropdown list to be added] ? -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="sdg-goals" class="form-label fw-bold ">Sustainable Development Goals
                                        (SDG)? <i style="color: red;">*</i></label>
                                    <select class="select-option drop-list" id="sdg-goals-data"
                                        data-validate="isEmpty,isExist"
                                        data-err-msg="This field is required and select value" required multiple>
                                        <option value="" selected>Select SDG Goals</option>
                                        <% patentSdgGoalData.forEach(function(goals) { %>
                                            <option value="<%= goals.id %>">
                                                <%= goals.name %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>

                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="type-of-invention" class="form-label fw-bold">Type of
                                        Invention(IPR) <i style="color: red;">*</i></label>
                                    <select id="type-of-invention" class="select-option" data-validate="isEmpty,isExist"
                                        data-err-msg="This field is required and select value" required multiple>
                                        <option value="">Select option</option>
                                        <!-- Use server-side or client-side code to dynamically generate options -->
                                        <% inventionTypData.forEach(function(invention) { %>
                                            <option value="<%= invention.id %>">
                                                <%= invention.name %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>
                                <!-- Title of Invention -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="title-of-invention" class="form-label fw-bold">Title of Patent /
                                        Invention <i style="color: red;">*</i></label>
                                    <input type="text" name="titleInvention" id="title-of-invention" data
                                        data-err-msg="This field is required" class="form-control fname"
                                        data-validate="isEmpty,isLength:2:255" required>
                                </div>
                                <!-- Patent Stage -->
                                <!-- Patent Stage -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="patent-stage" class="form-label fw-bold">Patent Status <i style="color: red;">*</i></label>
                                    <select class="select-option" id="patent-stage" data-validate="isEmpty,isExist"
                                        data-err-msg="This field is required and select value" required>
                                        <option value="">Select option</option>
                                        <% patentStatus.forEach(function(status) { %>
                                            <option value="<%= status.id %>">
                                                <%= status.name %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>

                                <!-- Application Number -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="application-no" class="form-label fw-bold">
                                        Patent/Invention Application Number <i style="color: red;">*</i>
                                    </label>
                                    <input type="number" name="applicationNo" id="application-no"
                                        data-validate="isEmpty,isNumber" data-err-msg="Numeric value is required'."
                                        class="form-control number" required>
                                </div>

                                <!-- applicant name -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="patent-published-date" class="form-label fw-bold">
                                        Applicants Names <i style="color: red;">*</i>
                                    </label>
                                    <input type="text" name="nmims-school" id="applicant-name"
                                        data-validate="isEmpty,isExist,isLength:2:255"
                                        data-err-msg="This field is required" class="form-control" required>
                                </div>

                                <!-- Date of Filed -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="patent-filed-date" class="form-label fw-bold">
                                        Patent Filed Date <i style="color: red;">*</i>
                                    </label>
                                    <input type="date" name="patent-filed-date" id="patent-filed-date"
                                        data-validate="isEmpty,isExist" data-err-msg="Date is required"
                                        class="form-control patent-filed-date" required>
                                    <span style="color:red;" id="patentFiledError"></span>
                                </div>

                                <!-- Date of Grant -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="patent-grant-date" class="form-label fw-bold">
                                        Patent Grant Date
                                    </label>
                                    <input type="date" name="patent-grant-date" id="patent-grant-date"
                                        data-validate="isEmpty,isExist" data-err-msg="Date is required"
                                        class="form-control patent-grant-date" >
                                    <!-- <span style="color:red;" id="patentGrantError"></span> -->

                                </div>

                                <!-- Date of Published -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="patent-published-date" class="form-label fw-bold">
                                        Patent /Invention Published Date 
                                    </label><span id="patent-published-date-span"
                                        style="color: red; padding: 2px;"></span>
                                    <input type="date" name="GrantDate" id="patent-published-date"
                                        data-validate="isEmpty,isExist" data-err-msg="Date is required"
                                        class="form-control patent-published-date" >
                                    <!-- <span style="color:red;" id="patentPublishError"></span> -->
                                </div>

                                <!-- Patent Publication Number -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="patent-published-number" class="form-label fw-bold">
                                        Patent/Invention Publication Number
                                    </label>
                                    <input type="number" name="patent-published-number" id="patent-published-number"
                                        data-validate="isEmpty,isNumber" data-err-msg="Numeric Value is required."
                                        class="form-control">
                                </div>

                                <!-- Patent Granted Number -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="patent-granted-number" class="form-label fw-bold">
                                        Patent/Invention Granted Number
                                    </label>
                                    <input type="number" name="granted-number" id="patent-granted-number"
                                        data-validate="isEmpty,isNumber" data-err-msg="Numeric Value is required."
                                        class="form-control">
                                </div>

                                <!-- Institite Affiliation -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="institute-affiliation" class="form-label fw-bold">
                                        Institute Affiliation <i style="color: red;">*</i>
                                    </label>
                                    <input type="text" name="institute-affiliation" id="institute-affiliation"
                                        data-validate="isEmpty,isExist,isLength:2:255" data-err-msg="Provide valid Input"
                                        class="form-control" required>
                                </div>

                                <!-- Upload Supporting Documents-->
                                <div class="form-group col-lg-6 col-md-8 col-sm-12 mb-4">
                                    <div class="col-lg-6 col-md-8 col-sm-12">
                                        <label for="supporting-documents" class="form-label fw-bold ">
                                            Upload Supporting Documents <i style="color: red;">*</i>
                                            <div id="uploadNewSupportDocumentDiv">
                                                <label for="uploadNewSupportDocument"><small>Click to Upload New
                                                        File</small></label>
                                                <input type="checkbox" name="uploadNewSupportDocument"
                                                    id="uploadNewSupportDocument">
                                            </div>
                                        </label>
                                        <div class="d-flex">
                                            <input type="file" name="IPRFile" id="ipr-file"
                                                class="col-md-12 form-control" data-validate="isEmpty,isExist,isFile"
                                                data-err-msg="File is required." required multiple>
                                            <button class="download-btn download-file" id="ipr-data-file-edit"><i
                                                    class="fas fa-download text-danger"></i>Download</button>
                                        </div>
                                    </div>
                                </div>
                                <!-- Details of Other Inventors -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="investor-details" class="form-label fw-bold mb-3">Details of Inventors</label>
                                    <span style="color:red;" id="facultyTypeError"></span></br>
                                    <div class="form-check-inline">
                                        <label for="is-internal" class="form-check-label enter-faculty-type">
                                            <input type="radio" class="form-check-input enternal-type" name="author-type" id="is-internal"
                                                value="Internal">
                                            <span id="enternal-text">Internal</span>
                                        </label>
                                        <div class=" col-lg-1 p-6 w-100 d-none" id="employee-list">
                                            <select id="emp-name" class="internal-faculty-list-data" style="width: 200px;" multiple>
                                                <option value="">select employee name</option>
                                                <% internalFacultyData.forEach(function(employee) { %>
                                                    <option value="<%= employee.id %>">
                                                        <%= employee.faculty_name %>
                                                    </option>
                                                    <% }); %>
                                            </select>
                                        </div>
                                    </div>
                                
                                    <div class="form-check-inline">
                                        <label for="is-external-details" class="form-check-label external-faculty">
                                            <input type="radio" class="form-check-input" id="is-external-details" name="author-type" value="External">
                                            <span id="external-text">External</span>
                                        </label>
                                    </div>
                                </div>
                                <table id="external-details-table"
                                    class="table vertical-lines custom-table table-responsive research-pagination re d-none">
                                    <thead>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">faculty Name </th>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">Designation</th>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">Institution Name</th>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">Address</th>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">Action</th>
                                    </thead>
                                    <tbody id="add-faculty-details">
                                    </tbody>
                                </table>


                            </div>
                        </div>

                        <!-- Add your modal footer buttons if needed -->
                        <div class="modal-footer">
                            <button type="button" id="footerClose" class="btn btn-danger"
                                data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-md btn-primary submit-btn d-none"
                                id="submit-btn">Submit</button>
                            <button class="btn btn-md btn-primary update-btn d-none" id="update-btn">Update</button>
                        </div>
                    </div>
                </div>
            </div>

            <!--  IPR Modal form For View -->
            <div class="modal fade " id="ipr-data-modal-view" tabindex="-1" role="dialog"
                aria-labelledby="patent-submission-modal" aria-hidden="true">
                <div class="modal-dialog modal-dialog-scrollable modal-lg modal-fullscreen p-5" role="document">
                    <div class="modal-content modal-content-data">
                        <div class="modal-header">
                            <h5 class="modal-title" id="patent-study">IPR Data Form View</h5>
                            <div type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true"><i class="fas fa-times "></i></span>
                            </div>
                        </div>
                        <div class="modal-body">
                            <div class="row">

                                
                                <!-- NMIMS School -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title"> NMIMS School :</div>
                                        <label class="view-content" id="view-nmims-school"></label>
                                    </div>
                                </div>

                                <!-- NMIMS Campus -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title"> NMIMS Campus :</div>
                                        <label class="view-content" id="view-nmims-campus"></label>
                                    </div>
                                </div>
                                <!-- type of invetion -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">Type Of Invention(IPR) :</div>
                                        <label class="view-content" id="view-type-of-invetion"></label>
                                    </div>
                                </div>
                                <!-- title of invention -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">Title Of Patent / Invention :</div>
                                        <label class="view-content" id="view-title-of-invetion"></label>
                                    </div>
                                </div>
                                <!-- PATENT STAGE -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">Patent Status :</div>
                                        <label class="view-content" id="view-patent-stage"></label>
                                    </div>
                                </div>
                                <!-- patent Applicant Name -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title"> Applicants Names :</div>
                                        <label class="view-content" id="view-applicant-name"></label>
                                    </div>
                                </div>
                                <!-- APPLICATION NUMBER -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">Patent Applicaton Number :</div>
                                        <label class="view-content" id="view-application-number"></label>
                                    </div>
                                </div>
                                <!-- Patent  Filed Date -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title"> Patent Filed Date:</div>
                                        <label class="view-content" id="view-filed-date"></label>
                                    </div>
                                </div>

                                <!-- Patent  Grant Date -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title"> Patent /Invention Granted Date:</div>
                                        <label class="view-content" id="view-grant-date"></label>
                                    </div>
                                </div>

                                <!-- Patent Published Date -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title"> Patent Published Date:</div>
                                        <label class="view-content" id="view-published-date"></label>
                                    </div>
                                </div>
                                <!-- Institute Affiliation -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">Institute Affiliation :</div>
                                        <label class="view-content" id="view-institute-affiliation"></label>
                                    </div>
                                </div>

                                <!-- Patent/Invention Publication Number -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title"> Patent/Invention Publication Number :
                                        </div>
                                        <label class="view-content" id="view-publication-number"></label>
                                    </div>
                                </div>

                                <!-- Patent Granted Number -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title"> Patent/Invention Granted Number :</div>
                                        <label class="view-content" id="view-granted-number"></label>
                                    </div>
                                </div>
                                <!-- Upload Data -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">
                                            <button class="btn btn-primary h-10 w-10 download-file"
                                                id="supporting-document">
                                                <i class="fas fa-download text-danger"></i> Download patentDocument
                                            </button>
                                        </div>
                                        <label class="view-content" id="view-patent-file"></label>
                                    </div>
                                </div>
                                <!-- Faculty Type -->
                                <div class="col-lg-12 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text fw-bold"> Faculty Details:
                                        </div>
                                        <label class="view-content" id="faculty-details-container"></label>
                                    </div>
                                </div>
                                <!-- Sustainable Development Goals (SDG) -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text fw-bold"> Sustainable Development
                                            Goals (SDG): </div>
                                        <label class="view-content" id="sdg-goals-container"></label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Add your modal footer buttons if needed -->
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
            <div id="invention-types" data-invention='<%- JSON.stringify(inventionTypData) %>' style="display: none;">
            </div>
            <div id="sdg-goals-list" data-goals='<%- JSON.stringify(patentSdgGoalData) %>' style="display: none;"></div>

            <div id="patent-status-list" data-status='<%- JSON.stringify(patentStatus) %>' style="display: none;"></div>
            <!-- <div id="school-data-list" data-school='<%- JSON.stringify(nmimsSchoolList) %>' style="display: none;">
            </div>
            <div id="campus-data-list" data-campus='<%- JSON.stringify(nmimsCampusList) %>' style="display: none;">
            </div> -->
            <div id="employees-list-data" data-employees='<%- JSON.stringify(internalEmpList) %>'
                style="display: none;"></div>



            <script src="https://cdnjs.cloudflare.com/ajax/libs/tom-select/2.3.1/js/tom-select.complete.min.js"
                integrity="sha512-zdXqksVc9s0d2eoJGdQ2cEhS4mb62qJueasTG4HjCT9J8f9x5gXCQGSdeilD+C7RqvUi1b4DdD5XaGjJZSlP9Q=="
                crossorigin="anonymous" referrerpolicy="no-referrer"></script>

            <script>
                //   for index icrement
                const rowCount = document.getElementById('row-count');
                let rowIndex = rowCount.innerText;
                let indexValue = parseInt(rowIndex, 10);
                const addIPRModal = document.getElementById('ipr-add-modal');
                const submitBtn = document.getElementById('submit-btn');
                const updateBtn = document.getElementById('update-btn');
                // const fileView = document.getElementById('file-view');
                const downloadLink = document.getElementById('downloadLink');
                const iprDataList = document.getElementById('ipr-data-list');
               
                const facultyTableList = document.getElementById('faculty-table-list');

                const enternalFacultyType = document.getElementById('is-internal');
                const externalFacultyType = document.getElementById('is-external-details');
                const employeeList = document.getElementById('employee-list');

                const invnstiontypeDropDown = document.getElementById('type-of-invention');
                const schoolDropDown = document.getElementById('nmims-school-list');
                const campusDropDown = document.getElementById('nmims-campus-list');
                const sdgGoalsDropDown = document.getElementById('sdg-goals-data');
                const employeeDropdown = document.getElementById("emp-name");
                const patentStageDropDown = document.getElementById('patent-stage');

                let iprId, rowToBeUpdated;
                let storedFacultyValue, InternalAuthorValue, externalAuthorValue;

                let facultyIdContainer = [];
                let externalFacultyData = [];
                let sdgGoalsIdContainer = [];
                let typeOfInventionsIdContainer = [];
                let patentStatusIdcontainer = [];
                let externalFacultyDetails = [];
                
                let storedPatentStatusIds, storedInventionsIds

                addIPRModal.addEventListener('click', function (event) {
                        if (event.target.tagName === 'BUTTON' && event.target.classList.contains('add-modal') || event.target.classList.contains('plus')) {
                            submitBtn.classList.remove('d-none');
                            updateBtn.classList.add('d-none');
                            document.getElementById('patent-study').innerHTML = 'Invention IPR';
                            document.querySelector('#ipr-file').classList.remove('d-none');
                            document.querySelector('#uploadNewSupportDocumentDiv').classList.add('d-none');
                            document.querySelector('#uploadNewSupportDocument').checked = false;
                            // document.querySelector('#case-study-doc-edit').classList.add('d-none');
                            removeErrorMsg()


                            $('#edited-book-modal').modal({
                                backdrop: 'static'
                            });
                            //d-none download button
                            InternalAuthorValue = '';
                            externalAuthorValue = '';
                            storedFacultyValue = '';
                            employeeList.classList.add('d-none');
                            // authorDetails.classList.add('d-none');
                            const IPRDataFiles = document.querySelector('#ipr-data-file-edit');
                            IPRDataFiles.classList.add('d-none');

                            const supportingDocuments = document.querySelector('input[type="file"]');
                            const isInternalFaculty = document.getElementById('is-internal');
                            const isExternalFaculty = document.getElementById('is-external');

                            // const patentInventionType = document.getElementById('invention-types').dataset.invention;
                            // const inventionTypeData = JSON.parse(patentInventionType);

                            //             // ajax for search bar to search status
                            // const inventionTypeValue = inventionTypeData.map(invention => ({
                            //     value: invention.id,
                            //     text: `  ${invention.name}`
                            // }));


                            // Hide all items with the 'item' class
                            const selectItems = document.querySelectorAll('.item');
                            selectItems.forEach(item => {
                                item.classList.add('d-none');
                            });

                            // document.getElementById('nmims-school-list-ts-control').value = '';
                            // document.getElementById('nmims-school-list').value = '';
                            // // campusDropDown.removeEventListener("change", handleCampusDropDownList);
                            document.getElementById('title-of-invention').value = '';
                            document.getElementById('application-no').value = '';
                            document.getElementById('patent-filed-date').value = '';
                            document.getElementById('patent-grant-date').value = '';
                            document.getElementById('patent-published-date').value = '';
                            document.getElementById('patent-granted-number').value = '';
                            document.getElementById('institute-affiliation').value = '';
                            // document.getElementById('nmims-school-list').value = '';
                            // document.getElementById('nmims-campus-list').value = '';
                            document.getElementById('patent-published-number').value = '';
                            document.getElementById('applicant-name').value = '';
                            document.getElementById('patent-stage').value = '';
                            document.getElementById('nmims-campus').value = '';
                            document.getElementById('nmims-school').value = '';

                            // isInternalFaculty.checked = false;
                            // isExternalFaculty.checked = false;

                            // const patentStatusList = document.getElementById('patent-status-list').dataset.status;
                            // const patentInventionType = document.getElementById('invention-types').dataset.invention;
                            // const nmimsSchoolList = document.getElementById('school-data-list').dataset.school;
                            // const nmimsCampusList = document.getElementById('campus-data-list').dataset.campus;
                            // const sdgGoalsList = document.getElementById('sdg-goals-list').dataset.goals;

                            // employeesListData data came from backend
                            const employeesListData = document.getElementById('employees-list-data').dataset.employees;
                            const employeesDataObj = JSON.parse(employeesListData);
                            // const patentStatusData = JSON.parse(patentStatusList);

                            // const schoolDataList = JSON.parse(nmimsSchoolList);
                            // const campusDataList = JSON.parse(nmimsCampusList);
                            // const sdgGoalsDataList = JSON.parse(sdgGoalsList);

                            // let employeeListArray = [];


                            // ajax for search bar to search status
                            // const statusOptions = patentStatusData.map(status => ({
                            //     value: status.id,
                            //     text: `${status.name}`
                            // }));



                            // ajax for search bar to search status
                            // const selectedSchool = schoolDataList.map(school => ({
                            //     value: school.id,
                            //     text: `${school.school_name}`
                            // }));

                            // ajax for search bar to search status
                            // const selectedCampus = campusDataList.map(campus => ({
                            //     value: campus.id,
                            //     text: `${campus.campus_name}`
                            // }));

                            // ajax for search bar to search employee name 
                            const facultyOptions = employeesDataObj.map(faculty => ({
                                value: faculty.id,
                                text: `  ${faculty.faculty_name}`
                            }));

                            // ajax for search bar to search employee name 
                            // const sdgOptions = sdgGoalsDataList.map(sdg => ({
                            //             value: sdg.id,
                            //             text: ` ${sdg.name}`
                            //         }));

                            // new TomSelect("#patent-stage", {
                            //         options: statusOptions,
                            //         placeholder: "Select Options",
                            //         plugins: ['remove_button'],
                            //         hidePlaceholder: true
                            //         ,
                            //         create: false,
                            //         onItemAdd: function () {
                            //             this.setTextboxValue('');
                            //             this.refreshOptions();
                            //         },
                            //         render: {
                            //             option: function (data, escape) {
                            //                 return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                            //             },
                            //             item: function (data, escape) {
                            //                 return '<div>' + escape(data.text) + '</div>';
                            //             }
                            //         }
                            //     });

                            // new TomSelect("#type-of-invention", {
                            //         options: inventionTypeValue,
                            //         placeholder: "Select Options",
                            //         plugins: ['remove_button'],
                            //         hidePlaceholder: true,
                            //         create: false,
                            //         onItemAdd: function () {
                            //             this.setTextboxValue('');
                            //             this.refreshOptions();
                            //         },
                            //         render: {
                            //             option: function (data, escape) {
                            //                 return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                            //             },
                            //             item: function (data, escape) {
                            //                 return '<div>' + escape(data.text) + '</div>';
                            //             }
                            //         }
                            //     });

                            // new TomSelect("#nmims-campus-list", {
                            //         options: selectedCampus,
                            //         placeholder: "Select Options",
                            //         hidePlaceholder: true,
                            //         hidePlaceholder: true,
                            //         create: false,
                            //         plugins: ['remove_button'],
                            //         onItemAdd: function () {
                            //             this.setTextboxValue('');
                            //             this.refreshOptions();
                            //         },
                            //         render: {
                            //             option: function (data, escape) {
                            //                 return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                            //             },
                            //             item: function (data, escape) {
                            //                 return '<div>' + escape(data.text) + '</div>';
                            //             }
                            //         }
                            //     });

                            // new TomSelect("#nmims-school-list", {
                            //         options: selectedSchool,
                            //         placeholder: "Select Options",
                            //         plugins: ['remove_button'],
                            //         hidePlaceholder: true
                            //         ,
                            //         create: false,
                            //         onItemAdd: function () {
                            //             this.setTextboxValue('');
                            //             this.refreshOptions();
                            //         },
                            //         render: {
                            //             option: function (data, escape) {
                            //                 return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                            //             },
                            //             item: function (data, escape) {
                            //                 return '<div>' + escape(data.text) + '</div>';
                            //             }
                            //         }
                            //     });

                            const patentInventionType = document.getElementById('invention-types').dataset.invention;
                            const inventionTypeData = JSON.parse(patentInventionType);

                            // ajax for search bar to search status
                            const inventionTypeValue = inventionTypeData.map(invention => ({
                                value: invention.id,
                                text: `  ${invention.name}`
                            }));

                            new TomSelect("#type-of-invention", {
                                options: inventionTypeValue,
                                placeholder: "Select Options",
                                hidePlaceholder: true,
                                create: false,
                                plugins: ['remove_button'],
                                onItemAdd: function () {
                                    this.setTextboxValue('');
                                    this.refreshOptions();
                                },
                                render: {
                                    option: function (data, escape) {
                                        return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                    },
                                    item: function (data, escape) {
                                        return '<div>' + escape(data.text) + '</div>';
                                    }
                                }
                            });


                            const patentStatusList = document.getElementById('patent-status-list').dataset.status;

                            const patentStatusData = JSON.parse(patentStatusList);

                            // ajax for search bar to search status
                            const statusOptions = patentStatusData.map(status => ({
                                value: status.id,
                                text: `${status.name}`
                            }));

                            new TomSelect("#patent-stage", {
                                options: statusOptions,
                                placeholder: "Select patent status",
                                hidePlaceholder: true,
                                create: false,
                                plugins: ['remove_button'],
                                onItemAdd: function () {
                                    this.setTextboxValue('');
                                    this.refreshOptions();
                                },
                                render: {
                                    option: function (data, escape) {
                                        return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                    },
                                    item: function (data, escape) {
                                        return '<div>' + escape(data.text) + '</div>';
                                    }
                                }
                            });


                            const sdgGoalsList = document.getElementById('sdg-goals-list').dataset.goals;

                            const sdgGoalsDataList = JSON.parse(sdgGoalsList);

                            // ajax for search bar to search employee name 
                            const sdgOptions = sdgGoalsDataList.map(sdg => ({
                                value: sdg.id,
                                text: ` ${sdg.name}`
                            }));


                            new TomSelect("#sdg-goals-data", {
                                options: sdgOptions,
                                placeholder: "Select SDG Goals",
                                hidePlaceholder: true,
                                create: false,
                                plugins: ['remove_button'],
                                onItemAdd: function () {
                                    this.setTextboxValue('');
                                    this.refreshOptions();
                                },
                                render: {
                                    option: function (data, escape) {
                                        return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                    },
                                    item: function (data, escape) {
                                        return '<div>' + escape(data.text) + '</div>';
                                    }
                                }
                            });

                            new TomSelect("#emp-name", {
                                options: facultyOptions,
                                placeholder: "Select Options",
                                hidePlaceholder: true,
                                create: false,
                                plugins: ['remove_button'],
                                onItemAdd: function () {
                                    this.setTextboxValue('');
                                    this.refreshOptions();
                                },
                                render: {
                                    option: function (data, escape) {
                                        return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                    },
                                    item: function (data, escape) {
                                        return '<div>' + escape(data.text) + '</div>';
                                    }
                                },
                                onDelete: function (values) {
                                    return facultyIdContainer.pop();
                                    ;
                                }
                                              });


                            // Initialize TomSelect dropdown with options containing id and faculty_name
                            // new TomSelect("#sdg-goals-data", {
                            //     options: sdgOptions,
                            //     placeholder: "Select SDG Goals",
                            //     hidePlaceholder: true,
                            //     create: false,
                            //     plugins: ['remove_button'],
                            //     onItemAdd: function () {
                            //         this.setTextboxValue('');
                            //         this.refreshOptions();
                            //     },
                            //     render: {
                            //         option: function (data, escape) {
                            //             return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                            //         },
                            //         item: function (data, escape) {
                            //             return '<div>' + escape(data.text) + '</div>';
                            //         }
                            //     }
                            // });


                        }
                    })

                const insertIPRforms = async (url) => {
                    const IPRData = new FormData();

                    const iprFiles = document.getElementById('ipr-file');
                    // patentFile
                    const iprFilesData = iprFiles.files;
                    console.log('iprFilesData ===>>>', iprFilesData)
                    for (let i = 0; i < iprFilesData.length; i++) {
                        console.log('file name  ==>>', iprFilesData[i].name);
                        IPRData.append('supportingDocuments', iprFilesData[i]);
                    }


                    const sdgGoalsOjectArray = sdgGoalsIdContainer[sdgGoalsIdContainer.length - 1]

                    const sdgGoalsContainer = sdgGoalsOjectArray ? JSON.stringify(sdgGoalsOjectArray) : null;
                    console.log('sdgGoalsContainer ===>>>>', sdgGoalsContainer);
                    // patentSubmissionsData.append('sdgGoalsContainer', sdgGoalsContainer);

                    const inventionTypeArrayObject = typeOfInventionsIdContainer[typeOfInventionsIdContainer.length - 1];
                    const inventionTypeContainer = JSON.stringify(inventionTypeArrayObject);
                    console.log('inventionTypeContainer ====>>>>', inventionTypeContainer);
                    // patentSubmissionsData.append('typeOfInvention', inventionTypeContainer);

                    const titleOfInvention = document.getElementById('title-of-invention').value;
                    const selectPatentStatus = document.getElementById('patent-stage').value;
                    const applicationNum = document.getElementById('application-no').value;
                    const patentFiledDate = document.getElementById('patent-filed-date').value;
                    const patentGrantDate = document.getElementById('patent-grant-date').value;
                    const patentPublishedDate = document.getElementById('patent-published-date').value;
                    const patentPublishedNumber = document.getElementById('patent-published-number').value;
                    const patentGrantedNo = document.getElementById('patent-granted-number').value;
                    const instituteAffiliation = document.getElementById('institute-affiliation').value;
                    const applicantName = document.getElementById('applicant-name').value;
                    const nmimsCampus = document.getElementById('nmims-campus').value;
                    const nmimsSchool = document.getElementById('nmims-school').value;

                    const investorDetails = document.querySelector('input[name="investor-details"]:checked');

                    let externalFacultyDetailsRow = document.querySelectorAll('.external-faculty-details');
                    

                    externalFacultyDetailsRow.forEach((field, index) => {
                        if (field.value !== '') {
                            externalFacultyDetails.push(field.value);
                        }
                    });

                    const facultyContainer = facultyIdContainer ? JSON.stringify(facultyIdContainer) : null;

                    IPRData.append('facultyContainer', facultyContainer);
                    // const facultyContainer = facultyIdContainer ? JSON.stringify(facultyIdContainer) : null;


                    // IPRData.append('facultyContainer', facultyContainer);
                    IPRData.append('nmimsCampus', nmimsCampus);
                    IPRData.append('nmimsSchool', nmimsSchool);
                    IPRData.append('titleOfInvention', titleOfInvention);
                    IPRData.append('patentStage', selectPatentStatus);
                    IPRData.append('applicationNum', applicationNum);
                    IPRData.append('patentFiledDate', patentFiledDate);
                    IPRData.append('patentGrantDate', patentGrantDate);
                    IPRData.append('patentPublishedDate', patentPublishedDate);
                    IPRData.append('patentPublishedNumber', patentPublishedNumber);
                    IPRData.append('patentGrantedNo', patentGrantedNo);
                    IPRData.append('instituteAffiliation', instituteAffiliation);
                    IPRData.append('applicantName', applicantName);
                    IPRData.append('externalFacultyDetails', JSON.stringify(externalFacultyDetails));
                    IPRData.append('inventionTypeContainer', JSON.stringify(inventionTypeArrayObject)); 
                    IPRData.append('sdgGoalsContainer', JSON.stringify(sdgGoalsOjectArray));
                    
                    // fetch api call
                    fetch(url, {
                        method: 'POST',
                        body: IPRData
                    })
                        .then((result) => {
                            return result.json()
                        })
                        .then((data) => {
                            if (data.status === 'Done') {
                                //             console.log('data >>>', data);
                                //             iprId = data.iprId;
                                //             const rowCountInteger = parseInt(data.rowCount, 10);
                                //             const IndexEntry = rowCountInteger + indexValue
                                //             console.log('IndexEntry ===>>>', IndexEntry);
                                //             const newIprRow = document.createElement('tr');
                                //             newIprRow.setAttribute('data-filed-date', data.IprData.patentFiledDate);
                                //             newIprRow.setAttribute('data-published-date', data.IprData.patentPublishedDate);
                                //             newIprRow.setAttribute('data-grant-number', data.IprData.patentGrantedNo)
                                //             newIprRow.setAttribute('data-published-number', data.IprData.patentPublishedNumber);
                                //             newIprRow.setAttribute('data-institute-affiliation', data.IprData.instituteAffiliation);
                                //             newIprRow.setAttribute('data-supporting-documents', data.IprData.iprFilesNamesArray);
                                //             newIprRow.setAttribute('data-investor-details', data.investorDetailsString);
                                //             newIprRow.innerHTML = `
                                // <td>${IndexEntry}</td>
                                // <td class="type-of-invention col-lg-1">${data.invetionTypeNames}</td>
                                // <td class="title-of-invention col-lg-1">${data.IprData.titleOfInvention}</td>
                                // <td class="patent-stage col-lg-1">${data.statusTypeName}</td>
                                // <td class="application-no col-lg-1">${data.IprData.applicationNum}</td>
                                // <td class="applicant-name col-lg-1">${data.IprData.applicantName}</td>
                                // <td class="nmims-school col-lg-1">${data.schoolNames}</td>
                                // <td class="nmims-campus col-lg-1">${data.campusNames}</td>

                                // <td title="View" class="border-right-0 view" style="cursor: pointer;"  data-ipr-id="${data.iprId}">
                                //     &#128065;
                                // </td>
                                // <td title="Edit" class="border-right-0 edit" style="cursor: pointer;"  data-ipr-id="${data.iprId}">
                                //     &#9998;
                                // </td>
                                // <td title="Delete" class="border-right-0 delete" style="cursor: pointer;"   data-ipr-id="${data.iprId}">
                                //     &#128465;
                                // </td> `;

                                //             iprDataList.appendChild(newIprRow);
                                $('#ipr-modal-form').modal('hide');
                                Swal.fire({
                                    position: "top-center",
                                    icon: "success",
                                    title: `${data.message}`,
                                    showConfirmButton: true,
                                    confirmButtonText: "OK",
                                    allowOutsideClick: false,
                                    confirmButtonColor: "#DD6B55"
                                    // timer: 1500

                                })
                                .then(() => {
                                    document.location.reload()
                                });
                            }
                            else {
                                console.log('data ====>>>>>', data);
                                Swal.fire({
                                    position: "top-center",
                                    icon: "error",
                                    title: `${data.errorCode}`,
                                    color: "red",
                                    with: "20PX",
                                    html: `<span style="color: red;">${data.message}</span>`,
                                    showConfirmButton: true,
                                    allowOutsideClick: false,
                                    confirmButtonText: "OK",
                                    confirmButtonColor: "#DD6B55"
                                });
                            }
                        })
                        .catch((error) => {
                            console.error('Error:', error);
                            const message = error;
                            Swal.fire({
                                position: "top-center",
                                icon: "error",
                                title: "Data Insertion Failed",
                                color: "red",
                                with: "20PX",
                                html: `<span style="color: red;">${message}</span>`,
                                showConfirmButton: true,
                                allowOutsideClick: false,
                                confirmButtonText: "OK",
                                confirmButtonColor: "#DD6B55"
                            });
                        });
                };

                submitBtn.addEventListener('click', async () => {
                    const isValid = validateRequiredFormFields(submitBtn);
                    const internalAuthor = document.getElementById('is-internal');
                    const externalAuthor = document.getElementById('is-external-details');
                    // const patentFiledDate = document.getElementById('patent-filed-date').value;
                    // const patentGrantDate = document.getElementById('patent-grant-date').value;
                    // const patentPublishedDate = document.getElementById('patent-published-date').value;


                    // let date1 = new Date(patentFiledDate);
                    // let date2 = new Date(patentGrantDate);
                    // let date3 = new Date(patentPublishedDate);

                    // let dateValidate = date1 < date2 && date2 < date3;

                    if (isValid && (externalAuthor.checked || facultyIdContainer.length > 0)) {
                        await insertIPRforms('<%- BASE_URL %>research/IPR/insert');

                    }
                    else {
                        Swal.fire({
                            position: "top-center",
                            icon: "error",
                            title: "Validation Failed",
                            color: "red",
                            showConfirmButton: true,
                            allowOutsideClick: false,
                            confirmButtonText: "OK",
                            confirmButtonColor: "#DD6B55"
                        }).then(() => {
                            if ((externalAuthor.checked || facultyIdContainer.length > 0)) {
                                document.getElementById('facultyTypeError').innerText = ''
                            } else {
                                document.getElementById('facultyTypeError').innerText = 'Select One Of The Faculty Type'
                            }

                            // if (date1 > date2) {
                            //     document.getElementById('patentFiledError').innerText = 'Patent Filed Date Must Be Smaller Than Grant Date'
                            // } else {
                            //     document.getElementById('patentFiledError').innerText = ''

                            // }

                            // if (date2 > date3) {
                            //     document.getElementById('patentGrantError').innerText = 'Patent Grant Date Must Be Smaller Than Published Date'
                            // } else {
                            //     document.getElementById('patentGrantError').innerText = ''

                            // }
                           
                        });
                    }
                });

                iprDataList.addEventListener('click', async function (event) {

                    if (event.target.classList.contains('edit')) {
                        rowToBeUpdated = event.target.closest('tr');

                        iprId = rowToBeUpdated.getAttribute('data-ipr-id');

                        console.log('ipr id ', iprId);

                        submitBtn.classList.add('d-none');
                        updateBtn.classList.remove('d-none');
                        document.getElementById('patent-study').innerHTML = 'Invention IPR Edit';
                        employeeList.classList.add('d-none');
                        document.querySelector('#ipr-file').classList.add('d-none');
                        document.querySelector('#uploadNewSupportDocumentDiv').classList.remove('d-none');

                        $('#ipr-modal-form').modal({
                            backdrop: 'static'
                        });

                        removeErrorMsg();
                        console.log('rowToBeUpdated in siode edit ====>>>', rowToBeUpdated);

                        // function call for download button
                        setFileNameAttributeToBeDownload(rowToBeUpdated);

                        console.log('Id For Updation', iprId);
                        const typeOfInvention = document.getElementById('type-of-invention')
                        const titleOfInvention = document.getElementById('title-of-invention');
                        const patentStage = document.getElementById('patent-stage');
                        const applicationNum = document.getElementById('application-no');
                        const internalAuthor = document.getElementById('is-internal');
                        const externalAuthor = document.getElementById('is-external');
                        const applicantName = document.getElementById('applicant-name');
                        const patentFiledDate = document.getElementById('patent-filed-date');
                        const patentGrantDate = document.getElementById('patent-grant-date');
                        const patentPyblishedDate = document.getElementById('patent-published-date');
                        const patentPublishedNumber = document.getElementById('patent-published-number');
                        const patentGrantedNo = document.getElementById('patent-granted-number');
                        const instituteAffiliation = document.getElementById('institute-affiliation');
                        let iprDocuments = document.getElementById('ipr-file');
                        const investorDetailsString = rowToBeUpdated.getAttribute('data-investor-details');
                        const authorTable = rowToBeUpdated.getAttribute('data-author-table');
                        console.log('authorTable ====>>>', authorTable)
                        console.log('investorDetailsString ====>>>', investorDetailsString)

                        const patentStatusList = document.getElementById('patent-status-list').dataset.status;
                        const patentInventionType = document.getElementById('invention-types').dataset.invention;
                        const sdgGoalsList = document.getElementById('sdg-goals-list').dataset.goals;

                        // employeesListData data came from backend
                        const employeesListData = document.getElementById('employees-list-data').dataset.employees;
                        const employeesDataObj = JSON.parse(employeesListData);
                        const patentStatusData = JSON.parse(patentStatusList);
                        const inventionTypeData = JSON.parse(patentInventionType);
                        // const schoolDataList = JSON.parse(nmimsSchoolList);
                        // const campusDataList = JSON.parse(nmimsCampusList);
                        const sdgGoalsDataList = JSON.parse(sdgGoalsList);
                        const patentStatusIdArr = rowToBeUpdated.getAttribute('data-status-ids').split(',').map(str => parseInt(str.trim(), 10));
                        const sdgGoalsIdArray = rowToBeUpdated.getAttribute('data-sdg-goals-ids').split(',').map(str => parseInt(str.trim(), 10));
                        const internalFaculyIdsArray = rowToBeUpdated.getAttribute('data-internal-faculty-ids').split(',').map(str => parseInt(str.trim(), 10));
                        const inventionTypeIdsArray = rowToBeUpdated.getAttribute('data-invention-ids').split(',').map(str => parseInt(str.trim(), 10));

                        let employeeListArray = [];

                        let statusArr = [];
                        let inventionArr = [];
                        let sdgArr = [];
                        let internalArr = [];

                        //sdgGoalsDataList array list push
                        Array.from(sdgGoalsDataList).forEach(data => {
                            Array.from(sdgGoalsIdArray).forEach(sdg => {
                                if (data.id == sdg) {
                                    sdgArr.push(data.id)
                                }
                            })
                        })

                        //patent status array list push
                        Array.from(patentStatusData).forEach(data => {
                            Array.from(patentStatusIdArr).forEach(status => {
                                if (data.id == status) {
                                    statusArr.push(data.id)
                                }
                            })
                        })

                        //invention type array list push
                        Array.from(inventionTypeData).forEach(data => {
                            Array.from(inventionTypeIdsArray).forEach(inv => {
                                if (data.id == inv) {
                                    inventionArr.push(data.id)
                                }
                            })
                        })

                        //employee array list push
                        Array.from(employeesDataObj).forEach(data => {
                            Array.from(internalFaculyIdsArray).forEach(intrnl => {
                                if (data.id == intrnl) {
                                    internalArr.push(data.id)
                                }
                            })
                        })


                        // ajax for search bar to search status
                        const statusOptions = patentStatusData.map(status => ({
                            value: status.id,
                            text: `${status.name}`
                        }));

                        // ajax for search bar to search status
                        const inventionTypeValue = inventionTypeData.map(invention => ({
                            value: invention.id,
                            text: `  ${invention.name}`
                        }));

                        // ajax for search bar to search employee name 
                        const facultyOptions = employeesDataObj.map(faculty => ({
                            value: faculty.id,
                            text: `  ${faculty.faculty_name}`
                        }));

                        // ajax for search bar to search employee name 
                        const sdgOptions = sdgGoalsDataList.map(sdg => ({
                            value: sdg.id,
                            text: ` ${sdg.name}`
                        }));


                       const iprStatus =  new TomSelect("#patent-stage", {
                            options: statusOptions,
                            items: statusArr,
                            // placeholder: "Select Options",
                            plugins: ['remove_button'],
                            hidePlaceholder: true,
                            create: false,
                            onItemAdd: function () {
                                this.setTextboxValue('');
                                this.refreshOptions();
                            },
                            render: {
                                option: function (data, escape) {
                                    return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                },
                                item: function (data, escape) {
                                    return '<div>' + escape(data.text) + '</div>';
                                }
                            },
                            onDelete: function (values) {
                                console.log('Remove button clicked :::::', values);

                                const message = values.length > 1
                                    ? `Are you sure you want to remove these ${values.length} items?`
                                    : `Are you sure you want to remove "${values[0]}"?`;

                                Swal.fire({
                                    title: 'Confirm Deletion',
                                    text: message,
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Yes, delete it!'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        fetch('<%- BASE_URL %>research/IPR/patent-status/delete', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({ internalId: values, iprId: iprId })
                                        })
                                            .then(response => response.json())
                                            .then(data => {
                                                console.log('data ====>>>>>>>', data);
                                                if (data.status === "Done") {
                                                    Swal.fire(
                                                        'Deleted!',
                                                        'Your item(s) has been deleted.',
                                                        'success'
                                                    );

                                                    values.forEach(value => {
                                                        iprStatus.removeOption(value);
                                                    });
                                                }
                                            })
                                            .catch(error => {
                                                Swal.fire(
                                                    'Error!',
                                                    'There was a problem with the delete operation: ' + error.message,
                                                    'error'
                                                );
                                            });
                                    }
                                });

                                return false;
                            }
                        });

                       const iprInventionType =  new TomSelect("#type-of-invention", {
                            options: inventionTypeValue,
                            // placeholder: "Select Options",
                            items: inventionArr,
                            plugins: ['remove_button'],
                            hidePlaceholder: true,
                            create: false,
                            onItemAdd: function () {
                                this.setTextboxValue('');
                                this.refreshOptions();
                            },
                            render: {
                                option: function (data, escape) {
                                    return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                },
                                item: function (data, escape) {
                                    return '<div>' + escape(data.text) + '</div>';
                                }
                            },
                            onDelete: function (values) {
                                console.log('Remove button clicked :::::', values);

                                const message = values.length > 1
                                    ? `Are you sure you want to remove these ${values.length} items?`
                                    : `Are you sure you want to remove "${values[0]}"?`;

                                Swal.fire({
                                    title: 'Confirm Deletion',
                                    text: message,
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Yes, delete it!'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        fetch('<%- BASE_URL %>research/IPR/ipr-invention-type/delete', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({ internalId: values, iprId: iprId })
                                        })
                                            .then(response => response.json())
                                            .then(data => {
                                                console.log('data ====>>>>>>>', data);
                                                if (data.status === "Done") {
                                                    Swal.fire(
                                                        'Deleted!',
                                                        'Your item(s) has been deleted.',
                                                        'success'
                                                    );

                                                    values.forEach(value => {
                                                        iprInventionType.removeOption(value);
                                                    });
                                                }
                                            })
                                            .catch(error => {
                                                Swal.fire(
                                                    'Error!',
                                                    'There was a problem with the delete operation: ' + error.message,
                                                    'error'
                                                );
                                            });
                                    }
                                });

                                return false;
                            }
                        });

                        const iprInternalFaculty =  new TomSelect("#emp-name", {
                            options: facultyOptions,
                            // placeholder: "Select Options",
                            items: internalArr,
                            hidePlaceholder: true,
                            create: false,
                            plugins: ['remove_button'],
                            onItemAdd: function () {
                                this.setTextboxValue('');
                                this.refreshOptions();
                            },
                            render: {
                                option: function (data, escape) {
                                    return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                },
                                item: function (data, escape) {
                                    return '<div>' + escape(data.text) + '</div>';
                                }
                            },
                            onDelete: function (values) {
                                console.log('Remove button clicked :::::', values);

                                const message = values.length > 1
                                    ? `Are you sure you want to remove these ${values.length} items?`
                                    : `Are you sure you want to remove "${values[0]}"?`;

                                Swal.fire({
                                    title: 'Confirm Deletion',
                                    text: message,
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Yes, delete it!'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        fetch('<%- BASE_URL %>research/IPR/ipr-internal-faculty/delete', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({ internalId: values, iprId: iprId })
                                        })
                                            .then(response => response.json())
                                            .then(data => {
                                                console.log('data ====>>>>>>>', data);
                                                if (data.status === "Done") {
                                                    Swal.fire(
                                                        'Deleted!',
                                                        'Your item(s) has been deleted.',
                                                        'success'
                                                    );

                                                    values.forEach(value => {
                                                        iprInternalFaculty.removeOption(value);
                                                    });
                                                }
                                            })
                                            .catch(error => {
                                                Swal.fire(
                                                    'Error!',
                                                    'There was a problem with the delete operation: ' + error.message,
                                                    'error'
                                                );
                                            });
                                    }
                                });

                                return false;
                            }
                        });

                        // Initialize TomSelect dropdown with options containing id and faculty_name
                        const iprSdgGoals = new TomSelect("#sdg-goals-data", {
                            options: sdgOptions,
                            // placeholder: "Select SDG Goals",
                            items: sdgArr,
                            hidePlaceholder: true,
                            create: false,
                            plugins: ['remove_button'],
                            onItemAdd: function () {
                                this.setTextboxValue('');
                                this.refreshOptions();
                            },
                            render: {
                                option: function (data, escape) {
                                    return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                },
                                item: function (data, escape) {
                                    return '<div>' + escape(data.text) + '</div>';
                                }
                            },
                            onDelete: function (values) {
                                console.log('Remove button clicked :::::', values);

                                const message = values.length > 1
                                    ? `Are you sure you want to remove these ${values.length} items?`
                                    : `Are you sure you want to remove "${values[0]}"?`;

                                Swal.fire({
                                    title: 'Confirm Deletion',
                                    text: message,
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Yes, delete it!'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        fetch('<%- BASE_URL %>research/IPR/ipr-sdg-goals/delete', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({ internalId: values, iprId: iprId })
                                        })
                                            .then(response => response.json())
                                            .then(data => {
                                                console.log('data ====>>>>>>>', data);
                                                if (data.status === "Done") {
                                                    Swal.fire(
                                                        'Deleted!',
                                                        'Your item(s) has been deleted.',
                                                        'success'
                                                    );

                                                    values.forEach(value => {
                                                        iprSdgGoals.removeOption(value);
                                                    });
                                                }
                                            })
                                            .catch(error => {
                                                Swal.fire(
                                                    'Error!',
                                                    'There was a problem with the delete operation: ' + error.message,
                                                    'error'
                                                );
                                            });
                                    }
                                });

                                return false;
                            }
                        });

                        titleOfInvention.value = rowToBeUpdated.querySelector('.title-of-invention').innerText;
                        patentStage.value = rowToBeUpdated.querySelector('.patent-stage').innerText;
                        applicationNum.value = rowToBeUpdated.querySelector('.application-no').innerText;
                        applicantName.value = rowToBeUpdated.querySelector('.applicant-name').innerText;
                        document.getElementById('nmims-campus').value = rowToBeUpdated.querySelector('.nmims-campus').innerText;
                        document.getElementById('nmims-school').value = rowToBeUpdated.querySelector('.nmims-school').innerText;
                        const fileDateData = rowToBeUpdated.getAttribute('data-filed-date');
                        const grantDateData = rowToBeUpdated.getAttribute('data-grant-date');
                        const publishedDateData = rowToBeUpdated.getAttribute('data-published-date');
                        const filedDateFormate = formatDateToYYYYMMDD(fileDateData);
                        const grantDateFormate = formatDateToYYYYMMDD(grantDateData);
                        const publishedDateFormate = formatDateToYYYYMMDD(publishedDateData);
                        console.log('publishedDateFormate ===>>>>', publishedDateFormate)

                        patentFiledDate.value = filedDateFormate;
                        patentGrantDate.value = grantDateFormate;
                        patentPyblishedDate.value = publishedDateFormate;

                        patentPublishedNumber.value = rowToBeUpdated.getAttribute('data-published-number');
                        patentGrantedNo.value = rowToBeUpdated.getAttribute('data-grant-number')
                        instituteAffiliation.value = rowToBeUpdated.getAttribute('data-institute-affiliation');


                        iprDocuments = rowToBeUpdated.getAttribute('data-supporting-documents');
                        console.log('iprDocuments ==>>>', iprDocuments);

                        fetch('<%- BASE_URL %>research/IPR/external-details', {
                            method: 'POST',
                            headers: {
                                'content-type': 'application/json'
                            },
                            body: JSON.stringify({ iprId })
                        })
                            .then((Response) => {
                                return Response.ok ? Response.json() : "There was network issue"
                            })
                            .then((data) => {
                                if (data.status === "Done") {
                                    console.log('data ====>>>>', data);
                                    const facultyHeader = ['faculty Name',
                                        'Designation',
                                        'Institution Name',
                                        'Address',
                                        'Action']
                                    createTableRows('external-details-table', data.exetrnalData, 'external-faculty-data-details', 'delete-details', facultyHeader)
                                }
                            })
                            .catch((error) => {
                                console.error('error ===>>>>>', error)
                            })

                        $('#ipr-modal-form').modal('show');

                    }

                    //   for delete patent submission form
                    if (event.target.classList.contains('delete')) {
                        const IPRDeleteRow = event.target.closest('tr');
                        iprId = IPRDeleteRow.getAttribute('data-ipr-id');
                        console.log('iprId ===>>>>', iprId);
                        let confirmDelete = "Do you want to delete an IPR record?";
                        if (confirmDelete) {
                            Swal.fire({
                                title: "Are you sure?",
                                text: "You won't be able to revert this!",
                                icon: "warning",
                                showCancelButton: true,
                                allowOutsideClick: false,
                                confirmButtonColor: "#3085d6",
                                cancelButtonColor: "#d33",
                                confirmButtonText: "Yes, delete it!"
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    // Execute fetch request here after confirmation
                                    fetch('<%- BASE_URL %>research/IPR/delete', {
                                        method: 'POST',
                                        headers: {
                                            'content-type': 'application/json'
                                        },
                                        body: JSON.stringify({ iprId })
                                    })
                                        .then((result) => result.json())
                                        .then((data) => {
                                            if (data.status === 'Done') {
                                                console.log('data ==>>', data);
                                                IPRDeleteRow.remove();
                                                Swal.fire({
                                                    title: "Deleted!",
                                                    text: "Record has been deleted.",
                                                    icon: "success",
                                                    showConfirmButton: true,
                                                    allowOutsideClick: false,
                                                    confirmButtonText: "OK",
                                                    confirmButtonColor: "#DD6B55"
                                                }).then(() => {
                                                    location.reload();
                                                });
                                            }
                                        })
                                        .catch((error) => {
                                            console.error('Error:', error);
                                            const message = error;
                                            Swal.fire({
                                                position: "top-center",
                                                icon: "error",
                                                title: `${message}`,
                                                color: "red",
                                                showConfirmButton: true,
                                                allowOutsideClick: false,
                                                confirmButtonText: "OK",
                                                confirmButtonColor: "#DD6B55"
                                            });
                                        });
                                }
                            });
                        }
                        else {
                            return
                        }
                    }

                    // patent submission view
                    if (event.target.classList.contains('view')) {
                        console.log('data ready for view');
                        $('#ipr-data-modal-view').modal({
                            backdrop: 'static'
                        });
                        const iprRowToBeViewed = event.target.closest('tr');
                        console.log('row to be viewed', iprRowToBeViewed);
                        let iprFile = iprRowToBeViewed.getAttribute('data-supporting-documents');
                        console.log('iprFile ==>>', iprFile)
                        iprId = iprRowToBeViewed.getAttribute('data-ipr-id')
                        $('#ipr-data-modal-view').modal('show');


                        fetch('<%- BASE_URL %>research/IPR/view', {
                            method: 'POST',
                            headers: {
                                'content-type': 'application/json'
                            },
                            body: JSON.stringify({ iprId }
                            )
                        })
                            .then((result) => {
                                return result.json();
                            })
                            .then((data) => {
                                if (data.status === 'Done') {
                                    console.log('data', data)
                                    setFileNameInButtons(data)
                                    document.getElementById('view-type-of-invetion').innerText = data.IPRData.invention_types;
                                    document.getElementById('view-title-of-invetion').innerText = data.IPRData.patent_title;
                                    document.getElementById('view-filed-date').innerText = data.IPRData.patent_filed_date ? formatDateToYYYYMMDD(data.IPRData.patent_filed_date) : '';
                                    document.getElementById('view-grant-date').innerText = data.IPRData.patent_grant_date ? formatDateToYYYYMMDD(data.IPRData.patent_grant_date) : '';
                                    document.getElementById('view-published-date').innerText = data.IPRData.patent_published_date ? formatDateToYYYYMMDD(data.IPRData.patent_published_date) : '';
                                    document.getElementById('view-publication-number').innerText = data.IPRData.patent_publication_number;
                                    document.getElementById('view-granted-number').innerText = data.IPRData.patent_grant_number;
                                    // document.getElementById('supporting-document').innerText = data.IPRData.supporting_documents;
                                    document.getElementById('view-institute-affiliation').innerText = data.IPRData.institutional_affiliation;
                                    // document.getElementById('view-investors-details').innerText = data.IPRData;
                                    document.getElementById('view-nmims-school').innerText = data.IPRData.nmims_school;
                                    document.getElementById('view-nmims-campus').innerText = data.IPRData.nmims_campus;
                                    document.getElementById('view-applicant-name').innerText = data.IPRData.applicant_name;
                                    document.getElementById('view-patent-stage').innerText = data.IPRData.patent_stage_statuses;
                                    document.getElementById('view-application-number').innerText = data.IPRData.patent_application_number;
                                    let facultyDetailsHTML = `
                            <table class="table" border='1px'>
                                <thead>
                                    <th>#</th>
                                    <th>Faculty Name</th>
                                    <th>Designation</th>
                                    <th>Institution Name</th>
                                    <th>Address</th>
                                    
                                </thead>
                                <tbody>`;

                                    data.facultyData.forEach((faculty, index) => {
                                        facultyDetailsHTML += `
                            <tr>
                                <td class="view-content">${index + 1}</td>
                                <td class="view-content">${faculty.faculty_name}</td>
                                <td class="view-content">${faculty.designation}</td>
                                <td class="view-content">${faculty.institution_name}</td>
                                <td class="view-content">${faculty.address}</td>
                                
                            </tr>`;
                                    });

                                    facultyDetailsHTML += `
                            </tbody>
                        </table>`
                                    document.getElementById('faculty-details-container').innerHTML = facultyDetailsHTML;


                                    let sdgGoalsDetailsHtml = `
                            <table class="table" border='1px'>
                                <thead>
                                    <th>#</th>
                                    <th>Sustainable Development Goals (SDG)</th>
                                </thead>
                                <tbody>`;

                                    data.sdgGoals.forEach((sdg, index) => {
                                        sdgGoalsDetailsHtml += `
                            <tr>
                                <td class="view-content">${index + 1}</td>
                                <td class="view-content">${sdg.name}</td>
                            </tr>`;
                                    });

                                    sdgGoalsDetailsHtml += `
                            </tbody>
                        </table>`

                                    document.getElementById('sdg-goals-container').innerHTML = sdgGoalsDetailsHtml;

                                }
                                else {
                                    Swal.fire({
                                        position: "top-center",
                                        icon: "error",
                                        title: `${data.errorCode}`,
                                        color: "red",
                                        with: "20PX",
                                        html: `<span style="color: red;">${data.message}</span>`,
                                        showConfirmButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonText: "OK",
                                        confirmButtonColor: "#DD6B55"
                                    });
                                }
                            })
                            .catch((error) => {
                                Swal.fire({
                                    position: "top-center",
                                    icon: "error",
                                    title: `${error}`,
                                    color: "red",
                                    showConfirmButton: true,
                                    allowOutsideClick: false,
                                    confirmButtonText: "OK",
                                    confirmButtonColor: "#DD6B55"
                                })
                            })

                    }
                });
                // update function for update the record
                const updatedIprData = async (url) => {

                        const updatedIPRData = new FormData();

                        const updatedIPRFiles = document.getElementById('ipr-file');
                        console.log('updatedIPRFiles ==>>', updatedIPRFiles);
                        let updatedIprFilesData = updatedIPRFiles.files;

                        console.log('updatediprFilesData ======>>>>', updatedIprFilesData);

                        updatedIprFilesData ?
                            Array.from(updatedIprFilesData).forEach(file => {
                                console.log('file name  ==>>', file.name);
                                updatedIPRData.append('supportingDocuments', file);
                            }) :
                            (updatedIprFilesData = null, updatedIPRData.append('supportingDocuments', updatedIprFilesData));
                        console.log('iprId ===>>>>>>', iprId);

                        const sdgGoalsOjectArray = sdgGoalsIdContainer[sdgGoalsIdContainer.length - 1]
                        const sdgGoalsContainer = sdgGoalsOjectArray ? JSON.stringify(sdgGoalsOjectArray) : null;

                        console.log('sdgGoalsContainer ===>>>>', sdgGoalsContainer);

                        const inventionTypeArrayObject = typeOfInventionsIdContainer[typeOfInventionsIdContainer.length - 1];
                        const inventionTypeContainer = JSON.stringify(inventionTypeArrayObject);

                        console.log('inventionTypeContainer ====>>>>', inventionTypeContainer);

                        const titleOfInvention = document.getElementById('title-of-invention').value;
                        const selectPatentStatus = document.getElementById('patent-stage').value;
                        const applicationNum = document.getElementById('application-no').value;
                        const patentFiledDate = document.getElementById('patent-filed-date').value;
                        const patentGrantDate = document.getElementById('patent-grant-date').value;
                        const patentPublishedDate = document.getElementById('patent-published-date').value;
                        const patentPublishedNumber = document.getElementById('patent-published-number').value;
                        const patentGrantedNo = document.getElementById('patent-granted-number').value;
                        const instituteAffiliation = document.getElementById('institute-affiliation').value;
                        const applicantName = document.getElementById('applicant-name').value;
                        const nmimsCampus = document.getElementById('nmims-campus').value;
                        const nmimsSchool = document.getElementById('nmims-school').value;

                        const investorDetails = document.querySelector('input[name="investor-details"]:checked');

                        // insert external new details
                        let externalFacultyDetailsRow = document.querySelectorAll('.external-faculty-details');
                        let externalFacultyDetails = [];

                        externalFacultyDetailsRow.forEach((field, index) => {
                            if (field.value !== '') {
                                externalFacultyDetails.push(field.value);
                            }
                        });

                        //update exeternal details 
                        const updateExternalDetails = document.querySelectorAll('.external-faculty-data-details');
                        const updateExternalFacultyData = [];

                        updateExternalDetails.forEach((field, index) => {
                            if (field.value !== '') {
                                updateExternalFacultyData.push(field.value);
                            }
                            console.log('field ===>>>>>>', field.value);
                        });

                        console.log('updateExternalFacultyData ====>>>>>>', updateExternalFacultyData)

                        const updateExternalData = updateExternalFacultyData ? JSON.stringify(updateExternalFacultyData) : null;
                        // internal id container
                        const facultyContainer = facultyIdContainer ? JSON.stringify(facultyIdContainer) : null;

                       
                        //exetrnal if there then
                        const externalDataInsert = externalFacultyDetails ? JSON.stringify(externalFacultyDetails) : null;
                        // invention type ids 
                        const inventionTypeIds = inventionTypeArrayObject ? JSON.stringify(inventionTypeArrayObject) : null;
                        //const sdg goals type ids
                        const sdgGoalsIds = sdgGoalsOjectArray ? JSON.stringify(sdgGoalsOjectArray) : null;

                        updatedIPRData.append('iprId', iprId);
                        updatedIPRData.append('externalFacultyDetails', externalDataInsert);
                        updatedIPRData.append('updateExternalData', updateExternalData);
                        updatedIPRData.append('inventionTypeContainer', inventionTypeIds);
                        updatedIPRData.append('sdgGoalsContainer', sdgGoalsIds);
                        updatedIPRData.append('facultyContainer', facultyContainer);
                        // updatedIPRData.append('facultyContainer', facultyContainer);
                        updatedIPRData.append('nmimsCampus', nmimsCampus);
                        updatedIPRData.append('nmimsSchool', nmimsSchool);
                        updatedIPRData.append('titleOfInvention', titleOfInvention);
                        updatedIPRData.append('patentStage', selectPatentStatus);
                        updatedIPRData.append('applicationNum', applicationNum);
                        updatedIPRData.append('patentFiledDate', patentFiledDate);
                        updatedIPRData.append('patentGrantDate', patentGrantDate);
                        updatedIPRData.append('patentPublishedDate', patentPublishedDate);
                        updatedIPRData.append('patentPublishedNumber', patentPublishedNumber);
                        updatedIPRData.append('patentGrantedNo', patentGrantedNo);
                        updatedIPRData.append('instituteAffiliation', instituteAffiliation);
                        updatedIPRData.append('applicantName', applicantName);

                        // fetch api
                        fetch(url, {
                            method: 'POST',
                            body: updatedIPRData
                        })
                            .then((result) => {
                                return result.json();

                            })
                            .then((data) => {
                                if (data.status === 'Done') {
                                    console.log('Updated Data ==> ', data)
                                    // console.log('updated data title ===>', data.updatedIPRData.typeOfInvention);
                                    // rowToBeUpdated.setAttribute('data-filed-date', data.updatedIPRData.patentFiledDate);
                                    // rowToBeUpdated.setAttribute('data-published-date', data.updatedIPRData.patentPublishedDate);
                                    // rowToBeUpdated.setAttribute('data-grant-number', data.updatedIPRData.patentGrantedNo)
                                    // rowToBeUpdated.setAttribute('data-published-number', data.updatedIPRData.patentPublishedNumber);
                                    // rowToBeUpdated.setAttribute('data-institute-affiliation', data.updatedIPRData.instituteAffiliation);
                                    // rowToBeUpdated.setAttribute('data-supporting-documents', data.updatedIPRData.iprFilesString);
                                    // rowToBeUpdated.setAttribute('data-investor-details', data.investorDetailsString);
                                    // // if(updatedIprFilesData){
                                    // //     rowToBeUpdated.setAttribute('data-supporting-documents').innerText = data.iprFilesString;
                                    // // }
                                    // updatedIprFilesData ? rowToBeUpdated.setAttribute('data-supporting-documents', data.iprFilesString) : null;
                                    // rowToBeUpdated.querySelector('.type-of-invention').innerText = data.invetionTypeNames;
                                    // rowToBeUpdated.querySelector(".title-of-invention").innerText = data.updatedIPRData.titleOfInvention;
                                    // rowToBeUpdated.querySelector(".patent-stage").innerText = data.statusTypeName;
                                    // rowToBeUpdated.querySelector(".application-no").innerText = data.updatedIPRData.applicationNum
                                    // rowToBeUpdated.querySelector(".applicant-name").innerText = data.updatedIPRData.applicantName;
                                    // rowToBeUpdated.querySelector(".nmims-school").innerText = data.schoolNames;
                                    // rowToBeUpdated.querySelector(".nmims-campus").innerText = data.campusNames;

                                    $('#ipr-modal-form').modal('hide');
                                    Swal.fire({
                                        position: "top-center",
                                        icon: "success",
                                        title: `${data.message}`,
                                        showConfirmButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonText: "OK",
                                        confirmButtonColor: "#DD6B55",
                                        timer: 1500
                                    }).then(data => {
                                        document.location.reload();
                                    });

                                }
                                else {
                                    const message = data.message;
                                    console.log('data ===>>>', data)
                                    console.log('message ==:::', message);
                                    Swal.fire({
                                        position: "top-center",
                                        icon: "error",
                                        title: `${data.errorCode}`,
                                        color: "red",
                                        with: "20PX",
                                        html: `<span style="color: red;">${data.message}</span>`,
                                        showConfirmButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonText: "OK",
                                        confirmButtonColor: "#DD6B55"
                                    });
                                }

                            })
                            .catch((error) => {
                                const message = error
                                Swal.fire({
                                    position: "top-center",
                                    icon: "error",
                                    title: `${message}`,
                                    color: "red",
                                    showConfirmButton: true,
                                    allowOutsideClick: false,
                                    confirmButtonText: "OK",
                                    confirmButtonColor: "#DD6B55"
                                });
                            })
                    };

                updateBtn.addEventListener('click', async () => {
                    formGroup = updateBtn.closest('.validate-input')
                    console.log("formGroup::::::::", formGroup)
                    formGroup.querySelectorAll('input[type="file"]')?.forEach(elm => {
                        if(elm.files.length > 0){
                            const validate = elm.getAttribute('data-validate');
                            const elemVal = elm.value;
                        }
                        
                        else{
                            elm.removeAttribute('data-validate')
                        }
                        
                    })
                    formGroup.querySelectorAll('.select-option')?.forEach(elm => {
                        console.log("elm:::::::::", elm);
                        elm.removeAttribute('data-validate')
                    })
                    const isValid = validateRequiredFormFields(updateBtn);
                    // const internalAuthor = document.getElementById('is-internal');
                    // const externalAuthor = document.getElementById('is-external-update');
                    // const patentFiledDate = document.getElementById('patent-filed-date').value;
					// const patentGrantDate = document.getElementById('patent-grant-date').value;
					// const patentPublishedDate = document.getElementById('patent-published-date').value;


                    // let date1 = new Date(patentFiledDate);
                    // let date2 = new Date(patentGrantDate);
                    // let date3 = new Date(patentPublishedDate);

                    // let dateValidate = date1 < date2 && date2 < date3;
                    if (isValid) {
                        await updatedIprData('<%- BASE_URL %>research/IPR/update');
                    }
                    else {
                        Swal.fire({
                            position: "top-center",
                            icon: "error",
                            title: "Validation Failed",
                            color: "red",
                            showConfirmButton: true,
                            allowOutsideClick: false,
                            confirmButtonText: "OK",
                            confirmButtonColor: "#DD6B55"
                        })
                        // .then(() => {
                        //     if (date1 > date2) {
                        //         document.getElementById('patentFiledError').innerText = 'Patent Filed Date Must Be Smaller Than Grant Date'
                        //     } else {
                        //         document.getElementById('patentFiledError').innerText = ''

                        //     }

                        //     if(date2 > date3){
                        //         document.getElementById('patentGrantError').innerText='Patent Grant Date Must Be Smaller Than Published Date'
                        //     }else{
                        //         document.getElementById('patentGrantError').innerText=''

                        //     }
                        // });
                    }
                })

                //  set file string into button
                function setFileNameInButtons(data) {
                    console.log('data ==>>>', data);
                    iprDocFiles = document.getElementById('supporting-document');
                    iprDocFiles.setAttribute('data-filename', data.IPRData.supporting_documents);
                }

                //eventlistner for download files
                document.addEventListener('click', async function (event) {
                    const button = event.target.closest('button');
                    if (button && button.id && button.classList.contains('download-file')) {
                        console.log('button ===>>>', button)
                        try {
                            const fileDataString = button.getAttribute('data-filename');
                            if (!fileDataString) {
                                throw new Error('Data filename attribute not found on button.');
                            }

                            const fileArray = fileDataString.split(',').map(fileName => fileName.trim()).filter(Boolean);
                            if (fileArray.length === 0) {
                                throw new Error('No file names found in data filename attribute.');
                            }

                            const downloadPromises = fileArray.map(async (fileName) => {
                                console.log('fileName ===>>>', fileName)
                                const fileUrl = `<%- BASE_URL %>research/IPR/download/${fileName}`;
                                downloadFile(fileName, fileUrl)
                                try {
                                    const response = await fetch(fileUrl);
                                    if (!response.ok) {
                                        throw new Error(`Failed to download file: ${fileName}`);
                                    }
                                    console.log('File downloaded successfully:', fileName);
                                    return fileName;
                                } catch (error) {
                                    console.error('Error downloading file:', error);
                                    throw error;
                                }
                            });

                            const downloadedFiles = await Promise.all(downloadPromises);
                            console.log('All files downloaded successfully:', downloadedFiles);
                        } catch (error) {
                            console.error('Error downloading files:', error);
                            alert(`There was a problem downloading files: ${error.message}`);
                        }
                    }
                });


                // set string file value into button
                function setFileNameAttributeToBeDownload(data) {
                        console.log('data row in side function ===>>', data);
                        const IPRDataFiles = document.getElementById('ipr-data-file-edit');
                        IPRDataFiles.classList.remove('d-none');
                        const IPRDataString = data.getAttribute('data-supporting-documents');

                        // setAttribute into button
                        IPRDataFiles.setAttribute('data-filename', IPRDataString);

                    };

        
                // function for invention type drop down list selectedTypeOfInvention
                function handleEmployeeDropdownChange() {
                    facultyIdContainer = Array.from(employeeDropdown.options)
                        .filter(option => option.selected)
                        .map(option => option.value);
                    // const facultyIds = selectedValues.length === 0 ? "" : selectedValues;
                    console.log('facultyIdContainer ===>>>>>', facultyIdContainer);

                    }


                // function for Sustainable Development Goals drop down list
                function handleSdgGoalsDropDownChange() {
                        const selectedValues = Array.from(sdgGoalsDropDown.options)
                            .filter(option => option.selected)
                            .map(option => option.value);
                        const sdgGoalsValues = selectedValues.length === 0 ? "" : selectedValues;
                        console.log('sdgGoalsValues ===>>>>>', sdgGoalsValues);
                        if (!sdgGoalsIdContainer.some(goals => goals === sdgGoalsValues)) {
                            sdgGoalsIdContainer.push(sdgGoalsValues);
                        }
                        console.log("Selected sdgGoalsIdContainer ids :", sdgGoalsIdContainer);

                    }

                //function for patent status drop down list
                function handlePatentSatgeDropDownChange() {
                        const selectedValues = Array.from(patentStageDropDown.options)
                            .filter(option => option.selected)
                            .map(option => option.value);
                        const patentStatus = selectedValues.length === 0 ? "" : selectedValues;
                        console.log('patentStatus ===>>>>>', patentStatus);
                        if (!patentStatusIdcontainer.some(status => status === patentStatus)) {
                            patentStatusIdcontainer.push(patentStatus);
                        }
                        console.log("Selected status  ids :", patentStatusIdcontainer);

                    }


                // function for invention type drop down list selectedTypeOfInvention
                function handleInventionsTypeDropDownChange() {
                        const selectedValues = Array.from(invnstiontypeDropDown.options)
                            .filter(option => option.selected)
                            .map(option => option.value);
                        const inventionsTypeValues = selectedValues.length === 0 ? "" : selectedValues;
                        console.log('inventionsTypeValues ===>>>>>', inventionsTypeValues);
                        if (!typeOfInventionsIdContainer.some(inventions => inventions === inventionsTypeValues)) {
                            typeOfInventionsIdContainer.push(inventionsTypeValues);
                        }
                        console.log("Selected typeOfInventionsIdContainer ids :", typeOfInventionsIdContainer);
                    }


                employeeDropdown.addEventListener("change", handleEmployeeDropdownChange);
                sdgGoalsDropDown.addEventListener("change", handleSdgGoalsDropDownChange);
                invnstiontypeDropDown.addEventListener("change", handleInventionsTypeDropDownChange);
                patentStageDropDown.addEventListener("change", handlePatentSatgeDropDownChange);
             
                function enternalFacultyDropDownList() {
                        employeeList.classList.remove('d-none');
                        document.getElementById("external-details-table").classList.add('d-none');
                    }

            
                // addEventListener 
                enternalFacultyType.addEventListener('click', enternalFacultyDropDownList)
                // externalFacultyType.addEventListener('click', externalFacultyDetails);
              


                function compareDates(date1, date2) {
                    const firstDate = new Date(date1);
                    const secondDate = new Date(date2);

                    if (secondDate > firstDate) {
                        return true;
                    } else {
                        return false;
                    }
                }

                document.querySelector('#uploadNewSupportDocument').addEventListener('click', function (e) {

                    let is_checked = document.querySelector('#uploadNewSupportDocument').checked;
                    console.log("is_checked :", is_checked);
                    if (is_checked) {
                        document.querySelector('#ipr-file').classList.remove('d-none');
                    } else {
                        document.querySelector('#ipr-file').classList.add('d-none');
                    }
                })

                $("#ipr-data-list").DataTable({
                    "pageLength": 5,
                    "lengthMenu": [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
                })

                function checkAlphabets(facultyName, idName) {

                    let facultyError = document.getElementById(idName);

                    // if (facultyName.length == 0 && idName === 'facultyError' || ) {
                    //     facultyError.innerText = "Name is Required";
                    //     return false;
                    // }

                    // if (facultyName.length == 0 && idName === 'desError') {
                    //     facultyError.innerText = "Designation is Required";
                    //     return false;
                    // }

                    if (!facultyName || facultyName.trim() === "") {
                        facultyError.innerText = "Provide Valid Input";
                        return false;
                    }

                    const words = facultyName.split(" ");

                    for (const word of words) {
                        for (let i = 0; i < word.length; i++) {
                            const charCode = word.charCodeAt(i);
                            if (
                                (charCode < 65 || charCode > 90) &&
                                (charCode < 97 || charCode > 122)
                            ) {
                                facultyError.innerText = "Provide Valid Input";
                                return false;
                            }
                        }
                    }

                    facultyError.innerText = "";
                    return true;
                }

                function checkEmpError(facultyEmpId, errid) {
                    let empError = document.getElementById(errid);
                    let bool = true;

                    if (facultyEmpId.length === 0) {
                        empError.innerText = 'Provide Valid Input';
                        return false;
                    }

                    for (let i = 0; i < facultyEmpId.length; i++) {
                        const charCode = facultyEmpId.charAt(i);
                        if (!(charCode >= '0' && charCode <= '9')) {
                            empError.innerText = 'Provide Valid Input';
                            bool = false;
                            break;
                        }
                    }

                    if (bool) {
                        empError.innerText = '';
                    }

                    return bool;
                }

                document.getElementById('headerClose').addEventListener('click', () => {
                    document.location.reload();
                })

                document.getElementById('footerClose').addEventListener('click', () => {
                    document.location.reload();
                });

               
                // for creating input field for table 
                document.querySelector('#is-external-details').addEventListener('click', () => {
                        console.log('clickedd external author');
                        document.getElementById("external-details-table").classList.remove('d-none');
                        employeeList.classList.add('d-none');
                        console.log("BUTTON CLICKED");
                        let newRow = `
                                <tr>
                                    <td><input type="text"  class="external-faculty-details"></td>
                                    <td><input type="text" class="external-faculty-details"></td>
                                    <td><input type="text" class="external-faculty-details"></td>
                                    <td><input type="text" class="external-faculty-details"></td>
                                    <td><button class="delete-row  btn btn-danger">Delete</button></td>
                                </tr> 
                            `;

                        document.querySelector('#add-faculty-details').insertAdjacentHTML('afterend', newRow);
                        let deleteButton = document.querySelector('#add-faculty-details').nextElementSibling.querySelector('.delete-row');
                        deleteButton.addEventListener('click', handleDeleteButtonClick);
                })

                 // foe delete empy input field 
                 function handleDeleteButtonClick() {
                    this.parentNode.parentNode.remove();
                }

                function createTableRows(tableId, data, inputClassName, deleteId, headers) {
                        console.log('data to create table ===>>>>>', data);
                        let table = document.querySelector(`#${tableId}`);
                        let tbody = table.querySelector('tbody');
                        let thead = table.querySelector('thead');
                        tbody.innerHTML = '';
                        thead.innerHTML = '';

                        let serialNumber = 1;

                        // Create table header
                        let headerRow = document.createElement('tr');

                        // Serial number header
                        // let serialHeader = document.createElement('th');
                        // serialHeader.textContent = 'Serial';
                        // headerRow.appendChild(serialHeader);

                         // Create headers from the provided headers array
                         headers.forEach(function (header) {
                            let th = document.createElement('th');
                            th.textContent = header;
                            headerRow.appendChild(th);
                        });
                       
                        

                        //
                        // if (data[0] && typeof data[0] === 'object') {
                        //     Object.keys(data[0]).forEach(function (key) {
                        //         if (key !== 'id') {
                        //             let th = document.createElement('th');
                        //             th.textContent = key;
                        //             headerRow.appendChild(th);
                        //         }
                        //     });
                        // } else {
                        //     console.error('Data is not in the expected format.');
                        // }

                        // Add id header and hide it

                        let idHeader = document.createElement('th');
                        idHeader.textContent = 'ID';
                        idHeader.classList.add('d-none');
                        headerRow.appendChild(idHeader);
                        // Add data cells based on headers
                      

                        thead.appendChild(headerRow);

                        // Create table rows
                        data.forEach(function (rowData) {
                            let row = document.createElement('tr');
                            row.setAttribute('data-table-id', rowData.id);

                            // Add serial number cell
                            // let serialCell = document.createElement('td');
                            // serialCell.textContent = serialNumber++;
                            // row.appendChild(serialCell);




                            // Add data cells
                            Object.keys(rowData).forEach(function (key) {
                                if (key !== 'id') {
                                    let cell = document.createElement('td');
                                    let input = document.createElement('input');
                                    input.type = 'text';
                                    input.value = rowData[key];
                                    if (inputClassName) {
                                        input.classList.add(inputClassName);
                                    }
                                    cell.appendChild(input);
                                    row.appendChild(cell);
                                }
                            });

                            // Add hidden id cell
                            let idCell = document.createElement('td');
                            let idInput = document.createElement('input');
                            idInput.type = 'text';
                            idInput.value = rowData.id;
                            idCell.classList.add('d-none');
                            if (inputClassName) {
                                idInput.classList.add(inputClassName);
                            }
                            idCell.appendChild(idInput);
                            row.appendChild(idCell);

                            // Add delete button cell
                            let deleteCell = document.createElement('td');
                            let deleteButton = document.createElement('button');
                            console.log('rowData.id ====>>>>', rowData.id);
                            deleteButton.setAttribute('data-table-id', rowData.id);

                            const dataRecordId = rowData.id;
                            deleteButton.classList.add(inputClassName);

                            deleteButton.textContent = 'Delete';
                            deleteButton.classList.add('btn', 'btn-danger');

                            deleteButton.addEventListener('click', function () {
                                // Find and remove the row after fetch confirmation
                                document.querySelector(`button[data-table-id='${dataRecordId}']`).click();
                            });

                            deleteCell.appendChild(deleteButton);
                            row.appendChild(deleteCell);

                            // Append the row to the table body
                            tbody.appendChild(row);
                        });
                    }
                
                //for delete exetrnal faculty record 
                document.addEventListener('click', (event) => {
                        const button = event.target.closest('button');
                        if (!button) return;

                        const relativeClass = button.className;
                        const tableId = button.getAttribute('data-table-id');
                        const specificClasses = ['external-faculty-data-details'];

                        const classList = relativeClass.split(' ');

                        specificClasses.forEach(specificClass => {
                            if (classList.includes(specificClass)) {
                                console.log(`Yes, the button contains the class: ${specificClass}`);
                                let confirmDelete = `Do you want to delete the ${specificClass} ?`;
                                if (confirmDelete) {
                                    Swal.fire({
                                        title: "Are you sure?",
                                        text: "You won't be able to revert this!",
                                        icon: "warning",
                                        showCancelButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonColor: "#3085d6",
                                        cancelButtonColor: "#d33",
                                        confirmButtonText: "Yes, delete it!"
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            // Execute fetch request here after confirmation
                                            fetch(`<%- BASE_URL %>research/IPR/${specificClass}/delete`, {
                                                method: 'POST',
                                                headers: {
                                                    'content-type': 'application/json'
                                                },
                                                body: JSON.stringify({ tableId })
                                            })
                                                .then((result) => result.json())
                                                .then((data) => {
                                                    if (data.status === 'Done') {
                                                        console.log('data ==>>', data);
                                                        // Find the row and remove it
                                                        const row = document.querySelector(`tr[data-table-id='${tableId}']`);
                                                        if (row) {
                                                            row.remove();
                                                        }
                                                        Swal.fire({
                                                            title: "Deleted!",
                                                            text: "Record has been deleted.",
                                                            icon: "success",
                                                            showConfirmButton: true,
                                                            allowOutsideClick: false,
                                                            confirmButtonText: "OK",
                                                            confirmButtonColor: "#DD6B55"
                                                        })
                                                    }
                                                })
                                                .catch((error) => {
                                                    console.error('Error:', error);
                                                    const message = error;
                                                    Swal.fire({
                                                        position: "top-center",
                                                        icon: "error",
                                                        title: `${message}`,
                                                        color: "red",
                                                        showConfirmButton: true,
                                                        allowOutsideClick: false,
                                                        confirmButtonText: "OK",
                                                        confirmButtonColor: "#DD6B55"
                                                    });
                                                });
                                        }
                                    });
                                } else {
                                    return;
                                }
                            }
                        });
                    });
                
            </script>
            <!-- footer section -->
            <!-- <%- include('./partials/pagination') %> -->
            <%- include('./partials/footer') %>
                <%- include('./partials/footer-end') %>