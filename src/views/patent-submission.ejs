<%- include('./partials/head') %>
    <!-- inline css -->
    <style>
        .search-input {
            width: 200px;
            border: 1px solid red;
        }

        .tomselect .remove-option {
            position: absolute;
            top: 50%;
            right: 12px;
            transform: translateY(-50%);
            font-size: 1.2rem;
            cursor: pointer;
        }
    </style>
    <!-- Navbar section -->
    <%- include('./partials/header') %>

        <!-- This is left sidebar  -->
        <%- include('./partials/left-sidebar') %>

            <!-- This is right side section -->
            <main class="main" id="main-content">
                <div class="base-section coustom-section">
                    <!--DASHBOARD CONTENT START-->
                    <div class="errorHtml"></div>
                    <div class="breadcrumbs-container">
                        <ul class="breadcrumb">
                            <li class="breadcrumb-link">
                                <a href="<%- BASE_URL %>dashboard-page"> Dashboard </a>
                            </li>
                            <li class="breadcrumb-link">
                                <a href="<%- BASE_URL %>research"> Research </a>
                            </li>
                            <li class="breadcrumb-link">Patent Submission And Grant </li>
                        </ul>
                    </div>
                    <div>
                        <div class="table-card-header text-uppercase d-flex align-items-center justify-content-between">
                            <div>
                                <h5 class="pl-2">Patent Submission And Grant List</h5>
                            </div>
                            <div>
                                <button id="add-patent-submission" type="button"
                                    class="btn btn-primary btn-circle btn-xl add-modal" data-toggle="modal"
                                    data-target="#patent-submission-modal">ADD
                                    <i class="fas fa-plus plus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body table-responsive">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <!-- <label>Show Entries</label>
                                    <select class="form-select" id="changeEntry">
                                        <option value="5">5</option>
                                        <option value="10">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                        <option value="150">150</option>
                                        <option value="200">200</option>
                                        <option value="250">250</option>
                                        <option value="300">300</option>
                                        <option value="350">350</option>
                                        <option value="400">400</option>
                                        <option value="500">500</option>
                                        <option value="800">800</option>
                                        <option value="1000">1000</option>
                                    </select> -->
                                </div>
                                <div>
                                    <!-- <div class="table-searchbar-container">
                                        <button type="button" id="searchBtn"><i class="fas fa-search"></i></button>
                                        <input type="search" id="searchKeyword" placeholder="Enter keywords"
                                            class="table-searchbar">
                                    </div> -->
                                </div>
                            </div>
                            <table class="table vertical-lines custom-table  table-responsive research-pagination"
                                id="patent-submisson-list">
                                <thead>
                                    <th class="col-lg-1">Serial no</th>
                                    <th class="col-lg-1">Submission Date</th>
                                    <th class="col-lg-1">Title of Invention</th>
                                    <th class="col-lg-1">Supporting Documents</th>
                                    <th class="col-lg-1">Application Number</th>
                                    <th class="col-lg-1">Action</th>
                                </thead>
                                <tbody class="data-list">
                                    <% if (patentSubmissionsData) { %>
                                        <% patentSubmissionsData.forEach(function(patent,index) {%>
                                            <tr data-patent-id="<%- patent.patent_submission_grant_id %>"
                                                data-patent-stage-id="<%- patent.patent_stage_status_id %>"
                                                data-supporting-documents="<%- patent.supporting_documents %>"
                                                data-faculty-id="<%- patent.faculty_id %>"
                                                data-sdg-goals-id="<%- patent.sdg_id %>"
                                                data-invention-type-id="<%- patent.invetion_id %>"
                                                data-patent-status-id="<%- patent.status_id %>"
                                                data-grant-date="<%-patent.grant_date %>">
                                                <td class="col-lg-1"><%- index+1 %></td>
                                                
                                                    
                                                        <td class="grant-date col-lg-1"><%- patent.grant_date %></td>
                                                        <td class="title-of-invention col-lg-1"><%-
                                                                patent.innovation_title %>
                                                        </td>
                                                        <td class="support-documents col-lg-1"><%-
                                                                patent.supporting_documents %></td>
                                                        <td class="application-no col-lg-1"><%-
                                                                patent.application_number %>
                                                        </td>
                                                        <td class="col-lg-1">
                                <label class="view" data-patent-id="<%- patent.patent_submission_grant_id %>"><i class="fa-solid fa-eye view text-danger"
                                    data-patent-id="<%- patent.patent_submission_grant_id %>"></i></label>
                                <label class="edit" data-patent-id="<%- patent.patent_submission_grant_id %>"><i class="fa fa-edit edit text-danger"
                                    data-patent-id="<%- patent.patent_submission_grant_id %>"></i></label>
                                <label class="delete" data-patent-id="<%- patent.patent_submission_grant_id %>"><i class="fa-solid fa-trash delete text-danger"
                                    data-patent-id="<%- patent.patent_submission_grant_id %>"></i></label>
                            </td>
<!-- 
                                                        <td colspan="3px" style="display:flex;justify-content: center;">
                                                            <b title="View" class="view border-right-0"
                                                                style="cursor: pointer;"
                                                                data-patent-id="<%- patent.patent_submission_grant_id %>">
                                                                &#128065;
                                                            </b>&ensp;&ensp;&ensp;
                                                            <b title="Edit" class="edit border-right-0"
                                                                style="cursor: pointer;"
                                                                data-patent-id="<%- patent.patent_submission_grant_id %>">
                                                                &#9998;
                                                            </b>&ensp;&ensp;&ensp;
                                                            <b title="Delete" class="delete border-right-0"
                                                                style="cursor: pointer;"
                                                                data-patent-id="<%- patent.patent_submission_grant_id %>">
                                                                &#128465;
                                                            </b>
                                                        </td> -->
                                            </tr>
                                            <% }); %>
                                                <% } else { %>
                                                    <tr>
                                                        <td>Sorry No Data Is Present </td>
                                                    </tr>
                                                    <% } %>
                                </tbody>
                                <tr>
                                    <div id="no-records-message"
                                        style="display: none; color: red; margin-top: 10px; padding-left: 40%;">
                                        <b class="no-record">No records found.</b>
                                    </div>
                                </tr>
                            </table>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div>
                            <label id="total-row-count"></label>
                            <label class="d-none" id="row-count"></label>
                        </div>
                        <div>
                            <!-- <button id="prevBtn" class="btn btn-primary">Previous</button>
                            <button id="nextBtn" class="btn btn-primary">Next</button>
                            <p id="pagination" class="pagination-search"></p> -->
                        </div>
                    </div>
                    <!--Import Modal -->
                    <div class="modal fade" id="open-program-modal" tabindex="-1" aria-labelledby="open-program-modal"
                        aria-hidden="true">
                    </div>
                    <!-- EDIT PROGRAM AND UPDATE -->
                    <div class="modal fade" id="edit-program-modal" tabindex="-1" aria-labelledby="editModalLabel"
                        aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="editModalLabel">Update Program</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                                        aria-label="Close"></button>
                                </div>
                                <div id="errorHtml"></div>
                                <div class="modal-body">
                                    <div class="mb-3">
                                        <label for="exampleInputEmail1" class="form-label">Program Name</label>
                                        <input type="text" class="form-control" id="program_name" name="program_name">
                                        <input type="hidden" class="form-control" id="hidden_id" name="hidden_id">
                                    </div>
                                    <div class="mb-3">
                                        <label for="exampleInputPassword1" class="form-label">Program Type</label>
                                        <select class="form-control" name="program_type_lid" id="program_type_lid">

                                            <option value="1">Full Time</option>

                                            <option value="2">Part Time</option>

                                        </select>
                                    </div>

                                    <div class="mb-3">
                                        <label for="abbr" class="form-label">Program Abbr</label>
                                        <input type="text" class="form-control" id="abbr" name="abbr">
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary"
                                        data-bs-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary updateProgram">Update</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
            <!--Patent submission   Modal  form -->
            <div class="modal fade " id="patent-submission-modal" tabindex="-1" role="dialog"
                aria-labelledby="patent-submission-modal" aria-hidden="true">
                <div class="modal-dialog modal-dialog-scrollable modal-lg modal-fullscreen p-5" role="document">
                    <div class="modal-content modal-content-data validate-input">
                        <div class="modal-header">
                            <h5 class="modal-title" id="patent-study">Patent Submission And Grant </h5>
                            <div type="button" class="close" id="headerClose" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true"><i class="fas fa-times "></i></span>
                            </div>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="type-of-invention" class="form-label fw-bold">Type of
                                        Invention(IPR)</label>
                                    <select id="type-of-invention" data-validate="isEmpty,isExist"
                                        data-err-msg="This field is required and select value" required multiple>
                                        <option value="">Select IPR</option>
                                        <!-- Use server-side or client-side code to dynamically generate options -->
                                        <% patentInventionTypeData.forEach(function(invention) { %>
                                            <option value="<%= invention.id %>">
                                                <%= invention.name %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>

                                <!-- Title of Invention -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="title" class="form-label fw-bold">Title of Invention</label>
                                    <input type="text" name="titleInvention" id="title-of-invention" data
                                        data-err-msg="Provide Valid Input" class="form-control fname"
                                        data-validate="isEmpty,isLength:2:255,isExist" required>
                                </div>
                                <!-- Patent Stage -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="patent-stage" class="form-label fw-bold">Patent Stage</label>
                                    <select id="patent-stage" data-validate="isEmpty,isExist"
                                        data-err-msg="This field is required and select value" required>
                                        <option value="">Select Patent Stage</option>
                                        <% patentStagData.forEach(function(status) { %>
                                            <option value="<%= status.id %>">
                                                <%= status.name %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>

                                <!-- Sustainable Development Goals (SDG) [dropdown list to be added] ? -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="sdg-goals" class="form-label fw-bold ">Sustainable Development Goals
                                        (SDG)</label>
                                    <select class="select-option drop-list" id="sdg-goals-data"
                                        data-validate="isEmpty,isExist"
                                        data-err-msg="This field is required and select value" required multiple>
                                        <option value="" selected>Select SDG Goals</option>
                                        <% patentSdgGoalData.forEach(function(goals) { %>
                                            <option value="<%= goals.id %>">
                                                <%= goals.name %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>

                                <!-- Application Number -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="application-no" class="form-label fw-bold">Application
                                        Number</label>
                                    <input type="number" name="applicationNo" id="application-no"
                                        data-validate="isEmpty,isNumber" data-err-msg="Numeric value is required'."
                                        class="form-control number" required>
                                </div>

                                <!-- Date of Filing/Grant/Published -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="date" class="form-label fw-bold">
                                        Date of Filing/Grant/Published
                                    </label>
                                    <input type="date" name="GrantDate" id="date" data-validate="isEmpty,isExist"
                                        data-err-msg="Date is required" class="form-control" required>
                                </div>

                                <!-- Upload Supporting Documents-->
                                <div class="form-group col-lg-6 col-md-8 col-sm-12 mb-4">
                                    <div class="col-lg-6 col-md-8 col-sm-12">
                                        <label class="form-label fw-bold ">
                                            Upload Supporting Documents
                                            <div id="uploadNewSupportDocumentDiv">
                                                <label for="uploadNewSupportDocument"><small>Click to Upload New
                                                        File</small></label>
                                                <input type="checkbox" name="uploadNewSupportDocument"
                                                    id="uploadNewSupportDocument">
                                            </div>
                                        </label>
                                        <div class="d-flex">
                                            <input type="file" name="patentFile" id="patent-file"
                                                class="col-md-12 form-control" data-validate="isEmpty,isExist,isFile"
                                                data-err-msg="File is required." required multiple>
                                            <button class="download-btn download-file" id="patent-file-edit"><i
                                                    class="fas fa-download text-danger"></i>Download</button>
                                        </div>
                                    </div>
                                </div><br>

                                <!-- Details of Other Inventors -->
                                  <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="investor-details" class="form-label fw-bold mb-3">Details of Other Inventors</label>
                                    <span style="color:red;" id="facultyTypeError"></span></br>
                                    <div class="form-check-inline">
                                        <label for="is-internal" class="form-check-label enter-faculty-type">
                                            <input type="radio" class="form-check-input enternal-type"
                                                name="author-type" id="is-internal" value="Internal">
                                            <span id="enternal-text">Internal</span>
                                        </label>
                                        <div class=" col-lg-1 p-6 w-100 d-none" id="employee-list">
                                            <select id="emp-name" class="internal-faculty-list-data" style="width: 200px;" multiple>
                                                <option value="">select employee name</option>
                                                <% internalFacultyData.forEach(function(employee) { %>
                                                    <option value="<%= employee.id %>">
                                                        <%= employee.faculty_name %>
                                                    </option>
                                                    <% }); %>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="form-check-inline">
                                        <label for="is-external-details" class="form-check-label external-faculty">
                                            <input type="radio" class="form-check-input" id="is-external-details"
                                                name="author-type" value="External">
                                            <span id="external-text">External</span>
                                        </label>
                                    </div>
                                </div>
                                <table id="external-details-table" class="table vertical-lines custom-table table-responsive research-pagination re d-none">
                                    <thead>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">faculty Name </th>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">Designation</th>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">Institution Name</th>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">Address</th>
                                        <th class="col-lg-4 col-md-6 col-sm-12 mb-4">Action</th>
                                    </thead>
                                    <tbody id="add-faculty-details">
                                    </tbody>
                                </table>

                            </div>
                        </div>
                        <!-- Add your modal footer buttons if needed -->
                        <div class="modal-footer">
                            <button type="button" id="footerClose" class="btn btn-danger"
                                data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-md btn-primary submit-btn d-none"
                                id="submit-btn">Submit</button>
                            <button class="btn btn-md btn-primary update-btn d-none" id="update-btn">Update</button>
                        </div>
                    </div>
                </div>
            </div>



            <!--  Patent Modal form For View -->
            <div class="modal fade " id="patent-submission-modal-view" tabindex="-1" role="dialog"
                aria-labelledby="patent-submission-modal" aria-hidden="true">
                <div class="modal-dialog modal-dialog-scrollable modal-lg modal-fullscreen p-5" role="document">
                    <div class="modal-content modal-content-data">
                        <div class="modal-header">
                            <h5 class="modal-title" id="patent-study">Patent Submission And Grant View</h5>
                            <div type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true"><i class="fas fa-times "></i></span>
                            </div>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <!-- type of invetion -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">Type Of Invention :</div>
                                        <label class="view-content" id="view-type-of-invetion"></label>
                                    </div>
                                </div>
                                <!-- title of invention -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">Title Of Invention :</div>
                                        <label class="view-content" id="view-title-of-invetion"></label>
                                    </div>
                                </div>
                                <!-- PATENT STAGE -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">Patent Stage :</div>
                                        <label class="view-content" id="view-patent-stage"></label>
                                    </div>
                                </div>
                                <!-- Are you achieve SDG -->
                                <!-- <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                                                                    <div class="box">
                                                                                        <div class="sub-title-text sub-title">Sustainable Development Goals (SDG) :</div>
                                                                                        <label class="view-content" id="view-achive-sdg"></label>
                                                                                    </div>
                                                                                </div> -->
                                <!-- APPLICATION NUMBER -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title"> Application Number :</div>
                                        <label class="view-content" id="view-application-number"></label>
                                    </div>
                                </div>
                                <!-- Date of Filing/Grant/Published -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title"> Date of Filing/Grant/Published:</div>
                                        <label class="view-content" id="view-date"></label>
                                    </div>
                                </div>
                                <!-- Upload Data -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">
                                            <button class="btn btn-primary h-10 w-10 download-file" id="patent-data-file-view">
                                                <i class="fas fa-download text-danger"></i> Download patentDocument
                                            </button>
                                        </div>
                                        <label class="view-content" id="view-patent-file"></label>
                                    </div>
                                </div>
            
                                <!-- Sustainable Development Goals (SDG) -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text fw-bold"> Sustainable Development
                                            Goals (SDG): </div>
                                        <label class="view-content" id="sdg-goals-container"></label>
                                    </div>
                                </div>
            
                                <!-- Faculty Type -->
                                <div class="col-lg-12 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text fw-bold"> Faculty Details:
                                        </div>
                                        <label class="view-content" id="faculty-details-container"></label>
                                    </div>
                                </div>
            
                                <!-- Add your modal footer buttons if needed -->
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- modal form for externalEmployee -->
            
            <!-- inline script -->
            <div id="patent-status-list" data-status='<%- JSON.stringify(patentStagData) %>' style="display: none;"></div>
            <div id="sdg-goals-list" data-goals='<%- JSON.stringify(patentSdgGoalData) %>' style="display: none;"></div>
            <div id="invention-types" data-invention='<%- JSON.stringify(patentInventionTypeData) %>' style="display: none;"></div>
            <div id="employees-list-data" data-employees='<%- JSON.stringify(internalFacultyData) %>' style="display: none;"></div>
                    <script src="https://cdnjs.cloudflare.com/ajax/libs/tom-select/2.3.1/js/tom-select.complete.min.js"
                        integrity="sha512-zdXqksVc9s0d2eoJGdQ2cEhS4mb62qJueasTG4HjCT9J8f9x5gXCQGSdeilD+C7RqvUi1b4DdD5XaGjJZSlP9Q=="
                        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
                    <script>
                        //   for index icrement
                        let rowCount = document.getElementById('row-count');
                        const totalRowCount = document.getElementById('total-row-count');
                        let rowIndex = rowCount.innerText;
                        let indexValue = parseInt(rowIndex, 10);

                        const addNewPatentSubmission = document.getElementById('add-patent-submission');
                        const submitBtn = document.getElementById('submit-btn');
                        const updateBtn = document.getElementById('update-btn');
                        // const fileView = document.getElementById('file-view');
                        const downloadLink = document.getElementById('downloadLink');
                        const patenetSubMissionList = document.getElementById('patent-submisson-list');
                        patenetSubMissionList.classList.add('research-pagination');

                        const employeeDropdown = document.getElementById("emp-name");
                        const patentStageDropDown = document.getElementById('patent-stage');
                        const sdgGoalsDropDown = document.getElementById('sdg-goals-data');
                        const statusDropDown = document.getElementById('patent-stage');
                        const invnstiontypeDropDown = document.getElementById('type-of-invention');
                        let externalFacultyDetailsRow = document.querySelectorAll('.external-faculty-details');


                        const facultyTableList = document.getElementById('faculty-table-list')
                        const externaltype = document.querySelector('.external-faculty');
                        const enternalFacultyType = document.getElementById('is-internal');
                        const externalFacultyType = document.getElementById('is-external-details');
                        const employeeList = document.getElementById('employee-list');
                        const authorDetails = document.getElementById('author-details');
                        let externalFacultyDetails = [];
                        let patentId, rowToBeUpdated, supportingDocument;
                        let storedFacultyValue, InternalAuthorValue, externalAuthorValue;

                        let facultyIdContainer = [];
                        let externalFacultyData = [];
                        let sdgGoalsIdContainer = [];
                        let typeOfInventionsIdContainer = [];
                        let patentStatusIdcontainer = [];
                        let updateExternalFacultyData = [];
                        let selectEmp = [];

                        var facultyFlag

                        addNewPatentSubmission.addEventListener('click', function (event) {
                                if (event.target.tagName === 'BUTTON' && event.target.classList.contains('add-modal') || event.target.classList.contains('plus')) {
                                    submitBtn.classList.remove('d-none');
                                    updateBtn.classList.add('d-none');
                                    document.querySelector('#patent-study').innerHTML = 'Patent Submission And Grant';
                                    document.querySelector('#uploadNewSupportDocumentDiv').classList.add('d-none');
                                    document.querySelector('#patent-file').classList.remove('d-none');
                                    document.querySelector('#uploadNewSupportDocument').checked = false;
                                    // fileView.classList.add('d-none');
                                    // modalImage.classList.add('d-none'); 
                                    //d-none download button
                                    InternalAuthorValue = '';
                                    externalAuthorValue = '';
                                    storedFacultyValue = '';
                                    externalFacultyIdArray = [];
                                    employeeList.classList.add('d-none');
                                    // authorDetails.classList.add('d-none');
                                    const patentSubmissionsDataFiles = document.querySelector('#patent-file-edit');
                                    patentSubmissionsDataFiles.classList.add('d-none');

                                    const typeOfInvention = document.getElementById('type-of-invention');
                                    const titleOfInvention = document.getElementById('title-of-invention');
                                    const patentStage = document.getElementById('patent-stage');
                                    // const sdgGoals = document.getElementById('sdg-goals');
                                    const applicationNum = document.getElementById('application-no');
                                    const subMissionDate = document.getElementById('date');
                                    const patentSubmissionDocument = document.querySelector('input[type="file"]');
                                    const isInternalFaculty = document.getElementById('is-internal');
                                    const isExternalFaculty = document.getElementById('is-external');


                                    // for making input field empty
                                    typeOfInvention.value = '';
                                    titleOfInvention.value = '';
                                    patentStage.value = '';
                                    applicationNum.value = '';
                                    document.getElementById('sdg-goals-data').value = '';
                                    patentSubmissionDocument.value = '';
                                    date.value = '';
                                    // isInternalFaculty.checked = false;
                                    // isExternalFaculty.checked = false;


                                    const patentInventionType = document.getElementById('invention-types').dataset.invention;
                                    const inventionTypeData = JSON.parse(patentInventionType);

                                    // ajax for search bar to search status
                                    const inventionTypeValue = inventionTypeData.map(invention => ({
                                        value: invention.id,
                                        text: `  ${invention.name}`
                                    }));

                                    new TomSelect("#type-of-invention", {
                                        options: inventionTypeValue,
                                        placeholder: "Select Options",
                                        hidePlaceholder: true,
                                        create: false,
                                        plugins: ['remove_button'],
                                        onItemAdd: function () {
                                            this.setTextboxValue('');
                                            this.refreshOptions();
                                        },
                                        render: {
                                            option: function (data, escape) {
                                                return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                            },
                                            item: function (data, escape) {
                                                return '<div>' + escape(data.text) + '</div>';
                                            }
                                        }
                                    });


                                    const patentStatusList = document.getElementById('patent-status-list').dataset.status;

                                    const patentStatusData = JSON.parse(patentStatusList);

                                    // ajax for search bar to search status
                                    const statusOptions = patentStatusData.map(status => ({
                                        value: status.id,
                                        text: `${status.name}`
                                    }));

                                    new TomSelect("#patent-stage", {
                                        options: statusOptions,
                                        placeholder: "Select patent status",
                                        hidePlaceholder: true,
                                        create: false,
                                        plugins: ['remove_button'],
                                        onItemAdd: function () {
                                            this.setTextboxValue('');
                                            this.refreshOptions();
                                        },
                                        render: {
                                            option: function (data, escape) {
                                                return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                            },
                                            item: function (data, escape) {
                                                return '<div>' + escape(data.text) + '</div>';
                                            }
                                        }
                                    });


                                    const sdgGoalsList = document.getElementById('sdg-goals-list').dataset.goals;

                                    const sdgGoalsDataList = JSON.parse(sdgGoalsList);

                                    // ajax for search bar to search employee name 
                                    const sdgOptions = sdgGoalsDataList.map(sdg => ({
                                        value: sdg.id,
                                        text: ` ${sdg.name}`
                                    }));


                                    new TomSelect("#sdg-goals-data", {
                                        options: sdgOptions,
                                        placeholder: "Select SDG Goals",
                                        hidePlaceholder: true,
                                        create: false,
                                        plugins: ['remove_button'],
                                        onItemAdd: function () {
                                            this.setTextboxValue('');
                                            this.refreshOptions();
                                        },
                                        render: {
                                            option: function (data, escape) {
                                                return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                            },
                                            item: function (data, escape) {
                                                return '<div>' + escape(data.text) + '</div>';
                                            }
                                        }
                                    });

                                    const employeesListData = document.getElementById('employees-list-data').dataset.employees;
                                    const employeesDataObj = JSON.parse(employeesListData);

                                    // Map employees to options
                                    const facultyOptions = employeesDataObj.map(faculty => ({
                                        value: faculty.id,
                                        text: `   ${faculty.faculty_name}`
                                    }));

                                    // Initialize Tom Select dropdown with options containing id and faculty_name
                                    new TomSelect("#emp-name", {
                                        options: facultyOptions,
                                        placeholder: "Select Emp Name",
                                        create: false,
                                        plugins: ['remove_button'],
                                        onItemAdd: function () {
                                            this.setTextboxValue('');
                                            this.refreshOptions();
                                        },
                                        render: {
                                            option: function (data, escape) {
                                                return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                            },
                                            item: function (data, escape) {
                                                return '<div>' + escape(data.text) + '</div>';
                                            }
                                        }
                                    });


                                    const selectItems = document.querySelectorAll('.item');
                                    selectItems.forEach(item => {
                                        item.classList.add('d-none');
                                    });

                                    $('#patent-submission-modal').modal({
                                        backdrop: 'static'
                                    });

                                }
                            })

                        const insertPatentforms = async (url) => {
                                const patentSubmissionsData = new FormData();
                                const patentFiles = document.getElementById('patent-file');
                                // patentFile
                                const patentFilesData = patentFiles.files;
                                console.log('patentFilesData ===>>>', patentFilesData)
                                for (let i = 0; i < patentFilesData.length; i++) {
                                    console.log('file name  ==>>', patentFilesData[i].name);
                                    patentSubmissionsData.append('patentFilesData', patentFilesData[i]);
                                }


                                const titleOfInvention = document.getElementById('title-of-invention').value;
                                patentSubmissionsData.append('titleOfInvention', titleOfInvention);


                                // const sdgGoalsOjectArray = sdgGoalsIdContainer[sdgGoalsIdContainer.length - 1]

                                const sdgGoalsContainer = JSON.stringify(sdgGoalsIdContainer);
                                console.log('sdgGoalsContainer ===>>>>', sdgGoalsContainer);
                                patentSubmissionsData.append('sdgGoalsContainer', sdgGoalsContainer);

                                // const inventionTypeArrayObject = typeOfInventionsIdContainer[typeOfInventionsIdContainer.length - 1];
                                const inventionTypeContainer = JSON.stringify(typeOfInventionsIdContainer);
                                console.log('inventionTypeContainer ====>>>>', inventionTypeContainer);
                                patentSubmissionsData.append('typeOfInvention', inventionTypeContainer);

                                // const facultyIdsArray = facultyIdContainer ? facultyIdContainer[facultyIdContainer.length - 1] : null;
                                const facultyContainer = facultyIdContainer ? JSON.stringify(facultyIdContainer) : null;

                                patentSubmissionsData.append('facultyContainer', facultyContainer);

                                const selectPatentStage = document.getElementById('patent-stage').value;
                                console.log('selectPatentStage ====>>>', selectPatentStage);
                                // const patentStatusIds = patentStatusIdcontainer ? patentStatusIdcontainer[patentStatusIdcontainer.length - 1] : null;
                                const patentStatusIdsArray = JSON.stringify(patentStatusIdcontainer)
                                patentSubmissionsData.append('patentStatusIdsArray', patentStatusIdsArray);

                                const applicationNum = document.getElementById('application-no').value;
                                patentSubmissionsData.append('applicationNum', applicationNum);

                                const subMissionDate = document.getElementById('date').value;
                                console.log('subMissionDate ===>>>', subMissionDate);
                                patentSubmissionsData.append('subMissionDate', subMissionDate);

                                let externalFacultyDetailsRow = document.querySelectorAll('.external-faculty-details');
                                

                                externalFacultyDetailsRow.forEach((field, index) => {
                                    if (field.value !== '') {
                                        externalFacultyDetails.push(field.value);
                                    }
                                });

                                patentSubmissionsData.append('externalFacultyDetails', JSON.stringify(externalFacultyDetails));


                                const authorType = document.querySelector('input[name="author-type"]:checked');
                                // await insertFacultyNameString(authorType, patentSubmissionsData);

                                fetch(url, {
                                    method: 'POST',
                                    body: patentSubmissionsData
                                })
                                    .then((result) => {
                                        return result.json()
                                    })
                                    .then((data) => {
                                        if (data.status === 'Done') {
                                            facultyFlag = true
                                            //                 console.log('data >>>', data);
                                            //                 patentId = data.patentId;
                                            //                 const rowCountInteger = parseInt(data.rowCount, 10);
                                            //                 const IndexEntry = rowCountInteger + indexValue;
                                            //                 indexValue = IndexEntry;
                                            //                 console.log('IndexEntry ===>>>', IndexEntry);
                                            //                 // const patentList = document.getElementById('patent-submisson-list');
                                            //                 // patentList.classList.add('research-pagination');

                                            //                 const newPatentRow = document.createElement('tr');
                                            //                 newPatentRow.setAttribute('data-invention-type-id', data.InventionTypeIds);
                                            //                 newPatentRow.setAttribute('data-patent-stage-id', data.patentStatusId);
                                            //                 newPatentRow.innerHTML = `
                                            //     <td>${IndexEntry}</td>
                                            //     <td class="title-of-invention">${data.patentData.titleOfInvention}</td>
                                            //     <td class="submission-date">${data.patentData.subMissionDate}</td>
                                            //     <td class="supporting-documents">${data.patentDataFilesString}</td>
                                            //     <td class="application-no">${data.patentData.applicationNum}</td>

                                            //    <td title="View" class="border-right-0 view" style="cursor: pointer;" data-patent-id="${patentId}">
                                            //         &#128065;
                                            //     </td>
                                            //     <td title="Edit" class="border-right-0 edit" style="cursor: pointer;" data-patent-id="${patentId}">
                                            //         &#9998;
                                            //     </td>
                                            //     <td title="Delete" class="border-right-0 delete" style="cursor: pointer;"  data-patent-id="${patentId}">
                                            //         &#128465;
                                            //     </td>
                                            //     `;

                                            //                 patenetSubMissionList.appendChild(newPatentRow);
                                            $('#patent-submission-modal').modal('hide');
                                            Swal.fire({
                                                position: "top-center",
                                                icon: "success",
                                                title: `${data.message}`,
                                                showConfirmButton: true,
                                                allowOutsideClick: false,
                                                confirmButtonText: "OK",
                                                confirmButtonColor: "#DD6B55"
                                            }).then(data => {
                                                document.location.reload();
                                            });
                                            // rowCount.classList.remove('d-none');
                                            // totalRowCount.classList.add('d-none');
                                            // rowCount.innerText = `Total entries : ${IndexEntry}`
                                        }
                                        else {
                                            facultyFlag = false;
                                            console.log('data ====>>>>>', data);
                                            Swal.fire({
                                                position: "top-center",
                                                icon: "error",
                                                title: `${data.errorCode}`,
                                                color: "red",
                                                with: "20PX",
                                                html: `<span style="color: red;">${data.message}</span>`,
                                                showConfirmButton: true,
                                                allowOutsideClick: false,
                                                confirmButtonText: "OK",
                                                confirmButtonColor: "#DD6B55"
                                            });
                                        }
                                    })
                                    .catch((error) => {
                                        // This will catch network errors and errors thrown from the .then block above
                                        console.error('Error:', error);
                                        const message = error;
                                        Swal.fire({
                                            position: "top-center",
                                            icon: "error",
                                            title: "Data Insertion Failed",
                                            color: "red",
                                            with: "20PX",
                                            html: `<span style="color: red;">${message}</span>`,
                                            showConfirmButton: true,
                                            allowOutsideClick: false,
                                            confirmButtonText: "OK",
                                            confirmButtonColor: "#DD6B55"
                                        });
                                    });
                            };

                            
                        
                        
                        submitBtn.addEventListener('click', async () => {
                                const isValid = validateRequiredFormFields(submitBtn);

                                const internalAuthor = document.getElementById('is-internal');
                                const externalAuthor = document.getElementById('is-external-details');
                                console.log('externalAuthor ===>>>>>', externalAuthor)

                                if (isValid && (facultyIdContainer.length > 0 || externalAuthor.checked)) {
                                        await insertPatentforms('<%- BASE_URL %>research/patent-submission/insert');

                                }
                                else {
                                    Swal.fire({
                                        position: "top-center",
                                        icon: "error",
                                        title: "Validation Failed",
                                        color: "red",
                                        showConfirmButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonText: "OK",
                                        confirmButtonColor: "#DD6B55"
                                    }).then(() => {
                                        if ((facultyIdContainer.length > 0|| externalAuthor.checked)) {
                                            document.getElementById('facultyTypeError').innerText = ''
                                        } else {
                                            document.getElementById('facultyTypeError').innerText = 'Select One Of The Faculty Type'
                                        }
                                    });
                                }
                            });

                        patenetSubMissionList.addEventListener('click', async function (event) {

                                if (event.target.classList.contains('edit')) {
                                    submitBtn.classList.add('d-none');
                                    updateBtn.classList.remove('d-none');

                                    $('#patent-submission-modal').modal({
                                        backdrop: 'static'
                                    });

                                    const selectItems = document.querySelectorAll('.item');
                                    selectItems.forEach(item => {
                                        item.classList.add('d-none');
                                    });

                                    document.querySelector('#uploadNewSupportDocumentDiv').classList.remove('d-none');
                                    document.querySelector('#patent-file').classList.add('d-none');
                                    document.querySelector('#patent-study').innerHTML = 'Patent Submission And Grant Edit';

                                    removeErrorMsg();
                                    rowToBeUpdated = event.target.closest('tr');
                                    console.log('rowToBeUpdated in siode edit ====>>>', rowToBeUpdated);
                                    // function call for download button
                                    setFileNameAttributeToBeDownload(rowToBeUpdated);

                                    patentId = rowToBeUpdated.getAttribute('data-patent-id');
                                    console.log('Id For Updation', patentId);

                                    // invetion type
                                    let typeOfInventionIdData = rowToBeUpdated.getAttribute('data-invention-type-id');
                                    console.log('typeOfInventionIdData ====>>>>>>', typeOfInventionIdData);
                                    const patentInventionType = document.getElementById('invention-types').dataset.invention;
                                    const inventionTypeData = JSON.parse(patentInventionType);
                                    console.log('inventionTypeData ===>>>>>>', inventionTypeData);
                                    

                                    const inventionOptions = inventionTypeData.map(invention => ({
                                        value: invention.id,
                                        text: `  ${invention.name}`
                                    }));

                                    console.log('inventionOptions ====>>>>>>', inventionOptions);
                                    const getInvetionTypeIds = typeOfInventionIdData.split(',').map(str => parseInt(str.trim(), 10));
                                    let typeOfInventionsId = inventionOptions.filter(option => getInvetionTypeIds.includes(option.value)).map(option => option.value);
                                    


                                    // let selectedInvention = inventionTypeData
                                    //     .filter(data => typeOfInventionIdData == data.id)
                                    //     .map(invention => invention.id);

                                    // console.log('selectedInvention ====>>>>>>', selectedInvention);

                                    // Initialize the TomSelect input
                                    const tomSelectInvention = new TomSelect("#type-of-invention", {
                                        options: inventionOptions,
                                        items: typeOfInventionsId,
                                        hidePlaceholder: true,
                                        create: false,
                                        persist: false,
                                        plugins: {
                                            remove_button: {
                                                title: 'Remove this item',
                                            }
                                        },
                                        onItemAdd: function () {
                                            this.setTextboxValue('');
                                            this.refreshOptions();
                                        },
                                        render: {
                                            option: function (data, escape) {
                                                return `<div><span>${escape(data.value)} - </span><span class="ms-auto text-muted">${escape(data.text)}</span></div>`;
                                            },
                                            item: function (data, escape) {
                                                return `<div>${escape(data.text)}</div>`;
                                            }
                                        },
                                        onDelete: function (values) {
                                            console.log('Remove button clicked :::::', values);

                                            const message = values.length > 1
                                                ? `Are you sure you want to remove these ${values.length} items?`
                                                : `Are you sure you want to remove "${values[0]}"?`;

                                            Swal.fire({
                                                title: 'Confirm Deletion',
                                                text: message,
                                                icon: 'warning',
                                                showCancelButton: true,
                                                confirmButtonColor: '#3085d6',
                                                cancelButtonColor: '#d33',
                                                confirmButtonText: 'Yes, delete it!'
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    fetch('<%- BASE_URL %>research/patent-submission/invention-type-details/delete', {
                                                        method: 'POST',
                                                        headers: {
                                                            'Content-Type': 'application/json'
                                                        },
                                                        body: JSON.stringify({ internalId: values, patentId: patentId })
                                                    })
                                                        .then(response => response.json())
                                                        .then(data => {
                                                            console.log('data ====>>>>>>>', data);
                                                            if (data.status === "Done") {
                                                                Swal.fire(
                                                                    'Deleted!',
                                                                    'Your item(s) has been deleted.',
                                                                    'success'
                                                                );

                                                                values.forEach(value => {
                                                                    tomSelectInvention.removeOption(value);
                                                                });
                                                            }
                                                        })
                                                        .catch(error => {
                                                            Swal.fire(
                                                                'Error!',
                                                                'There was a problem with the delete operation: ' + error.message,
                                                                'error'
                                                            );
                                                        });
                                                }
                                            });

                                            return false;
                                        }

                                    });
                                        
                                    // pateng stage
                                    let patentStatusId = rowToBeUpdated.getAttribute('data-patent-status-id');
                                    const patentStatusList = document.getElementById('patent-status-list').dataset.status;
                                    const patentStatusData = JSON.parse(patentStatusList);

                                    // ajax for search bar to search status
                                    const statusOptions = patentStatusData.map(status => ({
                                        value: status.id,
                                        text: `${status.name}`
                                    }));

                                    console.log('patentStatusData ===>>>>>>', patentStatusData);
                                    console.log('patentStatusId ====>>>>', patentStatusId)
                                    const getPatentStageIds = patentStatusId.split(',').map(str => parseInt(str.trim(), 10));

                                    let patentStatusIds = statusOptions.filter(option => getPatentStageIds.includes(option.value)).map(option => option.value);

                                    const tomSelectStatus = new TomSelect("#patent-stage", {
                                        options: statusOptions,
                                        //  placeholder: "Select patent status",
                                        items: patentStatusIds,
                                        hidePlaceholder: true,
                                        create: false,
                                        plugins: ['remove_button'],
                                        onItemAdd: function () {
                                            this.setTextboxValue('');
                                            this.refreshOptions();
                                        },
                                        render: {
                                            option: function (data, escape) {
                                                return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                            },
                                            item: function (data, escape) {
                                                return '<div>' + escape(data.text) + '</div>';
                                            }
                                        },
                                        onDelete: function (values) {
                                            console.log('Remove button clicked :::::', values);

                                            const message = values.length > 1
                                                ? `Are you sure you want to remove these ${values.length} items?`
                                                : `Are you sure you want to remove "${values[0]}"?`;

                                            Swal.fire({
                                                title: 'Confirm Deletion',
                                                text: message,
                                                icon: 'warning',
                                                showCancelButton: true,
                                                confirmButtonColor: '#3085d6',
                                                cancelButtonColor: '#d33',
                                                confirmButtonText: 'Yes, delete it!'
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    fetch('<%- BASE_URL %>research/patent-submission/patent-stage/delete', {
                                                        method: 'POST',
                                                        headers: {
                                                            'Content-Type': 'application/json'
                                                        },
                                                        body: JSON.stringify({ internalId: values, patentId: patentId })
                                                    })
                                                        .then(response => response.json())
                                                        .then(data => {
                                                            console.log('data ====>>>>>>>', data);
                                                            if (data.status === "Done") {
                                                                Swal.fire(
                                                                    'Deleted!',
                                                                    'Your item(s) has been deleted.',
                                                                    'success'
                                                                );

                                                                values.forEach(value => {
                                                                    tomSelectStatus.removeOption(value);
                                                                });
                                                            }
                                                        })
                                                        .catch(error => {
                                                            Swal.fire(
                                                                'Error!',
                                                                'There was a problem with the delete operation: ' + error.message,
                                                                'error'
                                                            );
                                                        });
                                                }
                                            });

                                            return false;
                                        }
                                    });

                                    //sdg goals 
                                    const sdgGoalsIds = rowToBeUpdated.getAttribute('data-sdg-goals-id');
                                    const sdgGoalsList = document.getElementById('sdg-goals-list').dataset.goals;
                                    const sdgGoalsDataList = JSON.parse(sdgGoalsList);

                                    // Map SDG goals to options
                                    const sdgOptions = sdgGoalsDataList.map(sdg => ({
                                        value: sdg.id,
                                        text: ` ${sdg.name}`
                                    }));

                                    // Filter and map selected SDG goals
                                    const getPatentSdg = sdgGoalsIds.split(',').map(str => parseInt(str.trim(), 10));
                                    let sdgGoalsIdsData = sdgOptions.filter(option => getPatentSdg.includes(option.value)).map(option => option.value);

                                    // console.log('sdgGoalsIds ', sdgGoalsIds);
                                    // console.log('getPatentSdg =====>>>>>', getPatentSdg);
                                    // console.log('sdg goals ', JSON.stringify(selectedSdg));

                                    // Initialize Tom Select
                                  const tomSelectSdg = new TomSelect("#sdg-goals-data", {
                                        options: sdgOptions,
                                        items: sdgGoalsIdsData,
                                        hidePlaceholder: true,
                                        create: false,
                                        plugins: ['remove_button'],
                                        onItemAdd: function () {
                                            this.setTextboxValue('');
                                            this.refreshOptions();
                                        },
                                        render: {
                                            option: function (data, escape) {
                                                return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                            },
                                            item: function (data, escape) {
                                                return '<div>' + escape(data.text) + '</div>';
                                            }
                                        },
                                        onDelete: function (values) {
                                            console.log('Remove button clicked :::::', values);

                                            const message = values.length > 1
                                                ? `Are you sure you want to remove these ${values.length} items?`
                                                : `Are you sure you want to remove "${values[0]}"?`;

                                            Swal.fire({
                                                title: 'Confirm Deletion',
                                                text: message,
                                                icon: 'warning',
                                                showCancelButton: true,
                                                confirmButtonColor: '#3085d6',
                                                cancelButtonColor: '#d33',
                                                confirmButtonText: 'Yes, delete it!'
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    fetch('<%- BASE_URL %>research/patent-submission/patent-sdg-goals/delete', {
                                                        method: 'POST',
                                                        headers: {
                                                            'Content-Type': 'application/json'
                                                        },
                                                        body: JSON.stringify({ internalId: values, patentId: patentId })
                                                    })
                                                        .then(response => response.json())
                                                        .then(data => {
                                                            console.log('data ====>>>>>>>', data);
                                                            if (data.status === "Done") {
                                                                Swal.fire(
                                                                    'Deleted!',
                                                                    'Your item(s) has been deleted.',
                                                                    'success'
                                                                );

                                                                values.forEach(value => {
                                                                    tomSelectSdg.removeOption(value);
                                                                });
                                                            }
                                                        })
                                                        .catch(error => {
                                                            Swal.fire(
                                                                'Error!',
                                                                'There was a problem with the delete operation: ' + error.message,
                                                                'error'
                                                            );
                                                        });
                                                }
                                            });

                                            return false;
                                        }
                                    });

                                    //internal emp list for select 
                                    const internalEmpIds = rowToBeUpdated.getAttribute('data-faculty-id');
                                    let selectEmpList = JSON.parse('<%- JSON.stringify(internalFacultyData) %>');
                                    const employeesListData = document.getElementById('employees-list-data').dataset.employees;
                                    const employeesDataObj = JSON.parse(employeesListData);

                                    // Map employees to options
                                    const facultyOptions = employeesDataObj.map(faculty => ({
                                        value: faculty.id,
                                        text: `   ${faculty.faculty_name}`
                                    }));

                                    // Filter and map selected employees
                                    const getPatentFacultyIds = internalEmpIds.split(',').map(str => parseInt(str.trim(), 10));
                                    console.log('getPatentFacultyIds ====>>>>>>>', getPatentFacultyIds);
                                    let internalFaculty = facultyOptions.filter(option => getPatentFacultyIds.includes(option.value)).map(option => option.value);


                                    // Initialize Tom Select dropdown with options containing id and faculty_name
                                   const tomSelectFaculty = new TomSelect("#emp-name", {
                                        options: facultyOptions,
                                        items: internalFaculty,
                                        hidePlaceholder: true,
                                        create: false,
                                        plugins: ['remove_button'],
                                        onItemAdd: function () {
                                            this.setTextboxValue('');
                                            this.refreshOptions();
                                        },
                                        render: {
                                            option: function (data, escape) {
                                                return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                            },
                                            item: function (data, escape) {
                                                return '<div>' + escape(data.text) + '</div>';
                                            }
                                        },
                                        onDelete: function (values) {
                                            console.log('Remove button clicked :::::', values);

                                            const message = values.length > 1
                                                ? `Are you sure you want to remove these ${values.length} items?`
                                                : `Are you sure you want to remove "${values[0]}"?`;

                                            Swal.fire({
                                                title: 'Confirm Deletion',
                                                text: message,
                                                icon: 'warning',
                                                showCancelButton: true,
                                                confirmButtonColor: '#3085d6',
                                                cancelButtonColor: '#d33',
                                                confirmButtonText: 'Yes, delete it!'
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    fetch('<%- BASE_URL %>research/patent-submission/internal-faculty/delete', {
                                                        method: 'POST',
                                                        headers: {
                                                            'Content-Type': 'application/json'
                                                        },
                                                        body: JSON.stringify({ internalId: values, patentId: patentId })
                                                    })
                                                        .then(response => response.json())
                                                        .then(data => {
                                                            console.log('data ====>>>>>>>', data);
                                                            if (data.status === "Done") {
                                                                Swal.fire(
                                                                    'Deleted!',
                                                                    'Your item(s) has been deleted.',
                                                                    'success'
                                                                );

                                                                values.forEach(value => {
                                                                    tomSelectFaculty.removeOption(value);
                                                                });
                                                            }
                                                        })
                                                        .catch(error => {
                                                            Swal.fire(
                                                                'Error!',
                                                                'There was a problem with the delete operation: ' + error.message,
                                                                'error'
                                                            );
                                                        });
                                                }
                                            });

                                            return false;
                                        }
                                    });

                                    const titleOfInvention = document.getElementById('title-of-invention');
                                    const patentStage = document.getElementById('patent-stage');
                                    const sdgGoals = document.getElementById('sdg-goals-data');
                                    console.log('sdgGoals ===>>>>', sdgGoals);
                                    // const sdgGoalsData = rowToBeUpdated.getAttribute()
                                    const applicationNum = document.getElementById('application-no');
                                    const internalAuthor = document.getElementById('is-internal');
                                    const externalAuthor = document.getElementById('is-external');


                                    const inputDateString = rowToBeUpdated.querySelector('.grant-date').innerText;
                                    console.log('inputDateString ==>>', inputDateString)
                                    const formattedDate = formatDateToYYYYMMDD(inputDateString);
                                    document.getElementById('date').value = formattedDate.trim();


                                    titleOfInvention.value = rowToBeUpdated.querySelector('.title-of-invention').innerText;
                                    // patentStage.value = rowToBeUpdated.getAttribute('data-patent-stage-id');
                                    console.log('patentStage.value ===>>>>>', patentStage.value,);
                                    const patentfile = rowToBeUpdated.querySelector('.support-documents');
                                    console.log('patentfile ===>>>>', patentfile)
                                    // const sdgGoalsData = 
                                    supportingDocuments = patentfile.innerText.trim();
                                    // console.log('supportingDocuments ==>>', supportingDocuments);

                                    applicationNum.value = rowToBeUpdated.querySelector('.application-no').innerText;
                                    date.value = formattedDate;
                                    console.log('date.value ===>>>>>', date.value);
                                    console.log('storedFacultyValue ====>>>>>', storedFacultyValue);
                                    $('#patent-submission-modal').modal('show');

                                    fetch('<%- BASE_URL %>research/patent-submission/external-details', {
                                        method: 'POST',
                                        headers: {
                                            'content-type': 'application/json'
                                        },
                                        body: JSON.stringify({ patentId })
                                    })
                                    .then((Response) => {
                                        return Response.ok ? Response.json() : "There was network issue"
                                    })
                                    .then((data) => {
                                        if(data.status === "Done"){
                                            console.log('data ====>>>>', data);
                                            const facultyHeader = ['faculty Name',
                                                        'Designation',
                                                        'Institution Name',
                                                        'Address',
                                                        'Action']
                                            createTableRows('external-details-table', data.exetrnalData, 'external-faculty-data-details', 'delete-details', facultyHeader)
                                        }
                                    })
                                    .catch((error) => {
                                            console.error('error ===>>>>>', error)
                                        })
                                }

                                //   for delete patent submission form
                                if (event.target.classList.contains('delete')) {
                                    const patentSubMissionDataToBeDelete = event.target.closest('tr');
                                    patentId = event.target.getAttribute('data-patent-id');
                                    let confirmDelete = "Do you want to delete the Book Publication?";
                                    if (confirmDelete) {
                                        Swal.fire({
                                            title: "Are you sure?",
                                            text: "You won't be able to revert this!",
                                            icon: "warning",
                                            showCancelButton: true,
                                            allowOutsideClick: false,
                                            confirmButtonColor: "#3085d6",
                                            cancelButtonColor: "#d33",
                                            confirmButtonText: "Yes, delete it!"
                                        }).then((result) => {
                                            if (result.isConfirmed) {
                                                // Execute fetch request here after confirmation
                                                fetch('<%- BASE_URL %>research/patent-submission/delete', {
                                                    method: 'POST',
                                                    headers: {
                                                        'content-type': 'application/json'
                                                    },
                                                    body: JSON.stringify({ patentId })
                                                })
                                                    .then((result) => result.json())
                                                    .then((data) => {
                                                        if (data.status === 'Done') {
                                                            console.log('data ==>>', data);
                                                            patentSubMissionDataToBeDelete.remove();
                                                            Swal.fire({
                                                                title: "Deleted!",
                                                                text: "Record has been deleted.",
                                                                icon: "success",
                                                                showConfirmButton: true,
                                                                allowOutsideClick: false,
                                                                confirmButtonText: "OK",
                                                                confirmButtonColor: "#DD6B55"
                                                            }).then(() => {
                                                                location.reload();
                                                            });
                                                        }
                                                    })
                                                    .catch((error) => {
                                                        console.error('Error:', error);
                                                        const message = error;
                                                        Swal.fire({
                                                            position: "top-center",
                                                            icon: "error",
                                                            title: `${message}`,
                                                            color: "red",
                                                            showConfirmButton: true,
                                                            allowOutsideClick: false,
                                                            confirmButtonText: "OK",
                                                            confirmButtonColor: "#DD6B55"
                                                        });
                                                    });
                                            }
                                        });
                                    }
                                    else {
                                        return
                                    }
                                }

                                // patent submission view
                                if (event.target.classList.contains('view')) {
                                    removeErrorMsg()

                                    $('#patent-submission-modal-view').modal({
                                        backdrop: 'static'
                                    });

                                    const patentSubmissionDataToBeViewed = event.target.closest('tr');
                                    console.log('row to be viewed', patentSubmissionDataToBeViewed);
                                    let patentFile = patentSubmissionDataToBeViewed.querySelector('.patent-file');
                                    console.log('patentFile ==>>', patentFile)
                                    patentId = patentSubmissionDataToBeViewed.getAttribute('data-patent-id')
                                    $('#patent-submission-modal-view').modal('show');

                                    const viewTypeOfInvetion = document.getElementById('view-type-of-invetion');
                                    const viewTitleOfinvetion = document.getElementById('view-title-of-invetion');
                                    const viewDate = document.getElementById('view-date');
                                    const viewAchiveSdg = document.getElementById('view-achive-sdg');
                                    const viewIsPresenter = document.getElementById('view-author-name');
                                    const viewUploadedDoc = document.getElementById('view-patent-file');
                                    const viewApplicationNum = document.getElementById('view-application-number');
                                    const viewPatentStage = document.getElementById('view-patent-stage');

                                    fetch('<%- BASE_URL %>research/patent-submission/view', {
                                        method: 'POST',
                                        headers: {
                                            'content-type': 'application/json'
                                        },
                                        body: JSON.stringify({ patentId }
                                        )
                                    })
                                        .then((result) => {
                                            return result.json();
                                        })
                                        .then((data) => {
                                            if (data.status === 'Done') {
                                                console.log('data', data);
                                                setFileNameInButtons(data);

                                                // Update main details
                                                viewTitleOfinvetion.innerText = data.patentSubmissionsData[0].innovation_title;
                                                viewTypeOfInvetion.innerText = data.inventionTypeNames;
                                                viewApplicationNum.innerText = data.patentSubmissionsData[0].application_number;
                                                viewDate.innerText = data.patentSubmissionsData[0].grant_date;
                                                viewPatentStage.innerText = data.patentSubmissionsData[0].patent_stage_status_name;

                                                // Faculty details
                                                let facultyDetailsHTML = `
                                                        <table class="table" border='1px'>
                                                            <thead>
                                                                <tr>
                                                                    <th>#</th>
                                                                    <th>Faculty Name</th>
                                                                    <th>Designation</th>
                                                                    <th>Institution Name</th>
                                                                    <th>Address</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>`;

                                                data.facultyData.forEach((faculty, index) => {
                                                    facultyDetailsHTML += `
                                                                <tr>
                                                                    <td class="view-content">${index + 1}</td>
                                                                    <td class="view-content">${faculty.faculty_name}</td>
                                                                    <td class="view-content">${faculty.designation}</td>
                                                                    <td class="view-content">${faculty.institution_name}</td>
                                                                    <td class="view-content">${faculty.address}</td>
                                                                </tr>`;
                                                                                                    });

                                                facultyDetailsHTML += `
                                                                </tbody>
                                                            </table>`;

                                                document.getElementById('faculty-details-container').innerHTML = facultyDetailsHTML;

                                                // SDG Goals details
                                                let sdgGoalsDetailsHtml = `
                                                    <table class="table" border='1px'>
                                                        <thead>
                                                            <tr>
                                                                <th>#</th>
                                                                <th>Sustainable Development Goals (SDG)</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>`;

                                                data.sdgGoalsData.forEach((sdg, index) => {
                                                    sdgGoalsDetailsHtml += `
                                                            <tr>
                                                                <td class="view-content">${index + 1}</td>
                                                                <td class="view-content">${sdg.name}</td>
                                                            </tr>`;
                                                });

                                                sdgGoalsDetailsHtml += `
                                                                </tbody>
                                                            </table>`;

                                                document.getElementById('sdg-goals-container').innerHTML = sdgGoalsDetailsHtml;

                                                // Invention Type details
                                                // let inventionTypeHtml = `
                                                //         <table class="table" border='1px'>
                                                //             <thead>
                                                //                 <tr>
                                                //                     <th>#</th>
                                                //                     <th>Type Of Invention</th>
                                                //                 </tr>
                                                //             </thead>
                                                //             <tbody>`;

                                                // data.inventionTypeData.forEach((inv, index) => {
                                                //     inventionTypeHtml += `
                                                //             <tr>
                                                //                 <td class="view-content">${index + 1}</td>
                                                //                 <td class="view-content">${inv.name}</td>
                                                //             </tr>`;
                                                //                                                 });

                                                //                                                 inventionTypeHtml += `
                                                //             </tbody>
                                                //         </table>`;

                                                // document.getElementById('view-type-of-invetion').innerHTML = inventionTypeHtml;
                                            }
                                            
                             
                                                      })   

                                                    } })


                          


                            
                        


                        function checkAlphabets(facultyName, idName) {

                            let facultyError = document.getElementById(idName);


                            if (!facultyName || facultyName.trim() === "") {
                                facultyError.innerText = "Provide Valid Input";
                                return false;
                            }

                            const words = facultyName.split(" ");

                            for (const word of words) {
                                for (let i = 0; i < word.length; i++) {
                                    const charCode = word.charCodeAt(i);
                                    if (
                                        (charCode < 65 || charCode > 90) &&
                                        (charCode < 97 || charCode > 122)
                                    ) {
                                        facultyError.innerText = "Provide Valid Input";
                                        return false;
                                    }
                                }
                            }

                            facultyError.innerText = "";
                            return true;
                        }

                        function checkEmpError(facultyEmpId, errid) {
                            let empError = document.getElementById(errid);
                            let bool = true;

                            if (facultyEmpId.length === 0) {
                                empError.innerText = 'Provide Valid Input';
                                return false;
                            }

                            for (let i = 0; i < facultyEmpId.length; i++) {
                                const charCode = facultyEmpId.charAt(i);
                                if (!(charCode >= '0' && charCode <= '9')) {
                                    empError.innerText = 'Provide Valid Input';
                                    bool = false;
                                    break;
                                }
                            }

                            if (bool) {
                                empError.innerText = '';
                            }

                            return bool;
                        }

                        // update function for update the record
                        const updatePatentSubmission = async (url) => {
                            console.log('clickedd');
                            const updatedTitleOfInvention = document.getElementById('title-of-invention').value;
                            const updatedApplicationNum = document.getElementById('application-no').value;
                            const updatedSubMissionDate = document.getElementById('date').value;
                            const updatedAuthorType = document.querySelector('input[name="author-type"]:checked');
                            console.log('supportingDocuments ==>>', supportingDocuments);

                            const updatedPatentData = new FormData();


                            // const sdgGoalsOjectArray = sdgGoalsIdContainer[sdgGoalsIdContainer.length - 1]

                            const sdgGoalsContainer = sdgGoalsIdContainer ? JSON.stringify(sdgGoalsIdContainer) : null;
                            console.log('sdgGoalsContainer ===>>>>', sdgGoalsContainer);
                            updatedPatentData.append('sdgGoalsContainer', sdgGoalsContainer);

                            // const inventionTypeArrayObject = typeOfInventionsIdContainer[typeOfInventionsIdContainer.length - 1];
                            const inventionTypeContainer = typeOfInventionsIdContainer ? JSON.stringify(typeOfInventionsIdContainer) : null;
                            console.log('inventionTypeContainer ====>>>>', inventionTypeContainer);
                            updatedPatentData.append('typeOfInvention', inventionTypeContainer);

                            // const facultyIdsArray = facultyIdContainer ? facultyIdContainer[facultyIdContainer.length - 1] : null;
                            const facultyContainer = facultyIdContainer ? JSON.stringify(facultyIdContainer) : null;

                            updatedPatentData.append('facultyContainer', facultyContainer);

                            const selectPatentStage = document.getElementById('patent-stage').value;
                            console.log('selectPatentStage ====>>>', selectPatentStage);
                            // const patentStatusIds = patentStatusIdcontainer ? patentStatusIdcontainer[patentStatusIdcontainer.length - 1] : null;
                            const patentStatusIdsArray =  patentStatusIdcontainer ? JSON.stringify(patentStatusIdcontainer) : null;
                            updatedPatentData.append('patentStatusIdsArray', patentStatusIdsArray);


                            // let externalFacultyDetails = [];
                            let externalFacultyDetailsRow = document.querySelectorAll('.external-faculty-details');


                            externalFacultyDetailsRow.forEach((field, index) => {
                                if (field.value !== '') {
                                    console.log('filed in case of insert ==>>>>', field)
                                    externalFacultyDetails.push(field.value);
                                }
                            });

                            updatedPatentData.append('externalFacultyDetails', JSON.stringify(externalFacultyDetails));
                            let upadteExternalDetails = document.querySelectorAll('.external-faculty-data-details');
                            

                            upadteExternalDetails.forEach((field, index) => {
                                if (field.value !== '') {
                                    console.log('field ankit mishra ==>>>>', field)
                                    updateExternalFacultyData.push(field.value);
                                }
                            });

                            // Append the updated values to FormData
                            updatedPatentData.append('patentId', patentId);
                            updatedPatentData.append('externalFacultyUpdate', JSON.stringify(updateExternalFacultyData));
                            updatedPatentData.append('titleOfInvention', updatedTitleOfInvention);
                            updatedPatentData.append('applicationNum', updatedApplicationNum);
                            updatedPatentData.append('subMissionDate', updatedSubMissionDate);
                            const updatedPatentFiles = document.getElementById('patent-file');
                            // patentFile
                            console.log('updatedPatentFiles ==>>', updatedPatentFiles);
                            const updatedPatentFilesData = updatedPatentFiles.files;
                            console.log('updatedPatentFilesData ======>>>>', updatedPatentFilesData);
                            if (updatedPatentFilesData) {
                                console.log('files data ===>>>', updatedPatentFilesData)
                                for (let i = 0; i < updatedPatentFilesData.length; i++) {
                                    console.log('file name  ==>>', updatedPatentFilesData[i].name);
                                    updatedPatentData.append('patentFilesData', updatedPatentFilesData[i]);
                                }
                            }
                            else {
                                updatedPatentFilesData = null
                                updatedPatentData.append('patentFilesData', updatedPatentFilesData)
                            }

                            // fetch api
                            fetch(url, {
                                method: 'POST',
                                body: updatedPatentData
                            })
                                .then((result) => {
                                    return result.json();

                                })
                                .then((data) => {
                                    if (data.status === 'Done') {
                                        facultyFlag = true
                                        // console.log('Updated Data ==> ', data)
                                        // console.log('updated data title ===>', data.updatedPatentData.typeOfInvention);
                                        // rowToBeUpdated.querySelector('.title-of-invention').innerText = data.updatedPatentData.titleOfInvention;
                                        // rowToBeUpdated.setAttribute('data-invention-type-id', data.InventionTypeIds);
                                        // rowToBeUpdated.setAttribute('data-patent-stage', data.patentStage);
                                        // rowToBeUpdated.querySelector('.application-no').innerText = data.updatedPatentData.applicationNum;
                                        // rowToBeUpdated.querySelector('.grant-date').innerText = data.updatedPatentData.subMissionDate;
                                        // rowToBeUpdated.querySelector('.support-documents').innerText = data.patentSubmissionsDataFiles !== null ? data.patentDataFiles : supportingDocuments;
                                        Swal.fire({
                                            position: "top-center",
                                            icon: "success",
                                            title: `${data.message}`,
                                            showConfirmButton: true,
                                            allowOutsideClick: false,
                                            confirmButtonText: "OK",
                                            confirmButtonColor: "#DD6B55",
                                            // timer: 1500
                                        }).then(() => {
                                            document.location.reload()
                                        });
                                        $('#patent-submission-modal').modal('hide');
                                    }
                                    else {
                                        facultyFlag = false
                                        const message = data.message;
                                        console.log('data ===>>>', data)
                                        console.log('message ==:::', message);
                                        Swal.fire({
                                            position: "top-center",
                                            icon: "error",
                                            title: `${data.httpstatus}`,
                                            color: "red",
                                            with: "20PX",
                                            html: `<span style="color: red;">${data.message}</span>`,
                                            showConfirmButton: true,
                                            allowOutsideClick: false,
                                            confirmButtonText: "OK",
                                            confirmButtonColor: "#DD6B55"
                                        });
                                    }

                                })
                                .catch((error) => {
                                    const message = error
                                    Swal.fire({
                                        position: "top-center",
                                        icon: "error",
                                        title: `${message}`,
                                        color: "red",
                                        showConfirmButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonText: "OK",
                                        confirmButtonColor: "#DD6B55"
                                    });
                                })
                        };

                        updateBtn.addEventListener('click', async () => {
                                formGroup = updateBtn.closest('.validate-input')
                                console.log("formGroup::::::::", formGroup)
                                formGroup.querySelectorAll('input[type="file"]')?.forEach(elm => {
                                    if (elm.files.length > 0) {
                                        const validate = elm.getAttribute('data-validate');
                                        const elemVal = elm.value;
                                    }

                                    else {
                                        elm.removeAttribute('data-validate')
                                    }

                                })

                                const isValid = validateRequiredFormFields(updateBtn);
                                const internalAuthor = document.getElementById('is-internal');
                                const externalAuthor = document.getElementById('is-external-details');
                                console.log('externalAuthor ===>>>>>', externalAuthor);

                                console.log('facultyFlag ===>>>>>', facultyFlag)
                               

                                if (isValid) {
                                    await updatePatentSubmission('<%- BASE_URL %>research/patent-submission/update');
                                }
                                else {
                                    Swal.fire({
                                        position: "top-center",
                                        icon: "error",
                                        title: "Validation Failed",
                                        color: "red",
                                        showConfirmButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonText: "OK",
                                        confirmButtonColor: "#DD6B55"
                                    })
                                //    .then(() => {
                                //     if(facultyFlag){
                                        
                                //          document.getElementById('facultyTypeError').innerText=''
                                //         }else{
                                //         document.getElementById('facultyTypeError').innerText='Select One Of The Faculty Type'
                                //         }
                                //     });
                                }
                            })


                        //  set file string into button
                        function setFileNameInButtons(data) {
                            console.log('data XXXXXXXXX==>>>', data);
                            patetDataFileView = document.getElementById('patent-data-file-view');
                            patetDataFileView.setAttribute('data-filename', data.patentSubmissionsData[0].supporting_documents);
                        }

                        //eventlistner for download files
                        document.addEventListener('click', async function (event) {
                            const button = event.target.closest('button');
                            if (button && button.id && button.classList.contains('download-file')) {
                                console.log('button ===>>>', button)
                                try {
                                    const fileDataString = button.getAttribute('data-filename');
                                    if (!fileDataString) {
                                        throw new Error('Data filename attribute not found on button.');
                                    }

                                    const fileArray = fileDataString.split(',').map(fileName => fileName.trim()).filter(Boolean);
                                    if (fileArray.length === 0) {
                                        throw new Error('No file names found in data filename attribute.');
                                    }

                                    const downloadPromises = fileArray.map(async (fileName) => {
                                        console.log('fileName ===>>>', fileName)
                                        const fileUrl = `<%- BASE_URL %>research/patent-submission/download/${fileName}`;
                                        downloadFile(fileName, fileUrl)
                                        try {
                                            const response = await fetch(fileUrl);
                                            if (!response.ok) {
                                                throw new Error(`Failed to download file: ${fileName}`);
                                            }
                                            console.log('File downloaded successfully:', fileName);
                                            return fileName;
                                        } catch (error) {
                                            console.error('Error downloading file:', error);
                                            throw error;
                                        }
                                    });

                                    const downloadedFiles = await Promise.all(downloadPromises);
                                    console.log('All files downloaded successfully:', downloadedFiles);
                                } catch (error) {
                                    console.error('Error downloading files:', error);
                                    alert(`There was a problem downloading files: ${error.message}`);
                                }
                            }
                        });


                        // set string file value into button
                        function setFileNameAttributeToBeDownload(data) {
                            console.log('data row in side function ===>>', data);
                            const patentSubmissionsDataFiles = document.getElementById('patent-file-edit');
                            patentSubmissionsDataFiles.classList.remove('d-none');
                            const patentSubmissionsDataString = data.getAttribute('data-supporting-documents');

                            // setAttribute into button
                            patentSubmissionsDataFiles.setAttribute('data-filename', patentSubmissionsDataString);

                        };


                               
                        
                        // function for select author name from drop down list
                        function handleEmployeeDropdownChange() {
                            facultyIdContainer = Array.from(employeeDropdown.options)
                                    .filter(option => option.selected)
                                    .map(option => option.value);
                                // const facultyIds = selectedValues.length === 0 ? "" : selectedValues;
                                console.log('facultyIdContainer ===>>>>>', facultyIdContainer);
                                // if (!facultyIdContainer.some(ids => ids === facultyIds)) {
                                //     facultyIdContainer.push(facultyIds);
                                // }
                                // console.log("Selected employee values:", facultyIdContainer);

                            }

                        // handle external details 

                        function handleExternalDetails () {
                            let externalFacultyDetailsRow = document.querySelectorAll('.external-faculty-details');
                                externalFacultyDetailsRow.forEach((field, index) => {
                                    if (field.value !== '') {
                                        externalFacultyDetails.push(field.value);
                                    }
                                });

                        }

                        // function for Sustainable Development Goals drop down list
                        function handleSdgGoalsDropDownChange() {
                            sdgGoalsIdContainer = Array.from(sdgGoalsDropDown.options)
                                .filter(option => option.selected)
                                .map(option => option.value);
                            // const sdgGoalsValues = selectedValues.length === 0 ? "" : selectedValues;
                            // console.log('sdgGoalsValues ===>>>>>', sdgGoalsValues);
                            // if (!sdgGoalsIdContainer.some(goals => goals === sdgGoalsValues)) {
                            //     sdgGoalsIdContainer.push(sdgGoalsValues);
                            // }
                            console.log("Selected sdgGoalsIdContainer ids :", sdgGoalsIdContainer);

                        }

                        //function for patent status drop down list
                        function handlePatentSatgeDropDownChange() {
                            patentStatusIdcontainer = Array.from(patentStageDropDown.options)
                                .filter(option => option.selected)
                                .map(option => option.value);
                            // const patentStatus = selectedValues.length === 0 ? "" : selectedValues;
                            // console.log('patentStatus ===>>>>>', patentStatus);
                            // if (!patentStatusIdcontainer.some(status => status  === patentStatus)) {
                            //     patentStatusIdcontainer.push(patentStatus);
                            // }
                            console.log("Selected status  ids :", patentStatusIdcontainer);

                        }


                        // function for invention type drop down list selectedTypeOfInvention
                        function handleInventionsTypeDropDownChange() {
                            typeOfInventionsIdContainer = Array.from(invnstiontypeDropDown.options)
                                .filter(option => option.selected)
                                .map(option => option.value);
                            // const inventionsTypeValues = selectedValues.length === 0 ? "" : selectedValues;
                            // console.log('inventionsTypeValues ===>>>>>', inventionsTypeValues);
                            // if (!typeOfInventionsIdContainer.some(inventions => inventions === inventionsTypeValues)) {
                            //     typeOfInventionsIdContainer.push(inventionsTypeValues);
                            // }
                            console.log("Selected sdgGoalsIdContainer ids :", typeOfInventionsIdContainer);
                        }


                        employeeDropdown.addEventListener("change", handleEmployeeDropdownChange);
                        sdgGoalsDropDown.addEventListener("change", handleSdgGoalsDropDownChange);
                        invnstiontypeDropDown.addEventListener("change", handleInventionsTypeDropDownChange);
                        patentStageDropDown.addEventListener("change", handlePatentSatgeDropDownChange);

                        function enternalFacultyDropDownList() {
                            employeeList.classList.remove('d-none');
                            document.getElementById("external-details-table").classList.add('d-none');
                        }


                        // making d-none external faculty
                        enternalFacultyType.addEventListener('click', enternalFacultyDropDownList)

                            $("#patent-submisson-list").DataTable({

                                "pageLength": 5,
                                "lengthMenu": [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
                            })


                        document.querySelector('#uploadNewSupportDocument').addEventListener('click', function (e) {

                            let is_checked = document.querySelector('#uploadNewSupportDocument').checked;
                            console.log("is_checked :", is_checked);
                            if (is_checked) {
                                document.querySelector('#patent-file').classList.remove('d-none');
                            } else {
                                document.querySelector('#patent-file').classList.add('d-none');
                            }
                        });


                       

                        document.getElementById('headerClose').addEventListener('click', () => {
                            document.location.reload();
                        })

                        document.getElementById('footerClose').addEventListener('click', () => {
                            document.location.reload();
                        })


                        document.querySelector('#is-external-details').addEventListener('click', () => {
                        console.log('clickedd external author');
                        document.getElementById("external-details-table").classList.remove('d-none');
                        employeeList.classList.add('d-none');
                        console.log("BUTTON CLICKED");
                        let newRow = `
                                <tr>
                                    <td><input type="text"  class="external-faculty-details"></td>
                                    <td><input type="text" class="external-faculty-details"></td>
                                    <td><input type="text" class="external-faculty-details"></td>
                                    <td><input type="text" class="external-faculty-details"></td>
                                    <td><button class="delete-row  btn btn-danger">Delete</button></td>
                                </tr> 
                            `;

                        document.querySelector('#add-faculty-details').insertAdjacentHTML('afterend', newRow);
                        let deleteButton = document.querySelector('#add-faculty-details').nextElementSibling.querySelector('.delete-row');
                        deleteButton.addEventListener('click', handleDeleteButtonClick);
                })

                function handleDeleteButtonClick() {
                    this.parentNode.parentNode.remove();
                }

                function createTableRows(tableId, data, inputClassName, deleteId, headers) {
                        console.log('data to create table ===>>>>>', data);
                        let table = document.querySelector(`#${tableId}`);
                        let tbody = table.querySelector('tbody');
                        let thead = table.querySelector('thead');
                        tbody.innerHTML = '';
                        thead.innerHTML = '';

                        let serialNumber = 1;

                        // Create table header
                        let headerRow = document.createElement('tr');

                        // Serial number header
                        // let serialHeader = document.createElement('th');
                        // serialHeader.textContent = 'Serial';
                        // headerRow.appendChild(serialHeader);

                         // Create headers from the provided headers array
                         headers.forEach(function (header) {
                            let th = document.createElement('th');
                            th.textContent = header;
                            headerRow.appendChild(th);
                        });
                       
                        

                        //
                        // if (data[0] && typeof data[0] === 'object') {
                        //     Object.keys(data[0]).forEach(function (key) {
                        //         if (key !== 'id') {
                        //             let th = document.createElement('th');
                        //             th.textContent = key;
                        //             headerRow.appendChild(th);
                        //         }
                        //     });
                        // } else {
                        //     console.error('Data is not in the expected format.');
                        // }

                        // Add id header and hide it

                        let idHeader = document.createElement('th');
                        idHeader.textContent = 'ID';
                        idHeader.classList.add('d-none');
                        headerRow.appendChild(idHeader);
                        // Add data cells based on headers
                      

                        thead.appendChild(headerRow);

                        // Create table rows
                        data.forEach(function (rowData) {
                            let row = document.createElement('tr');
                            row.setAttribute('data-table-id', rowData.id);

                            // Add serial number cell
                            // let serialCell = document.createElement('td');
                            // serialCell.textContent = serialNumber++;
                            // row.appendChild(serialCell);




                            // Add data cells
                            Object.keys(rowData).forEach(function (key) {
                                if (key !== 'id') {
                                    let cell = document.createElement('td');
                                    let input = document.createElement('input');
                                    input.type = 'text';
                                    input.value = rowData[key];
                                    if (inputClassName) {
                                        input.classList.add(inputClassName);
                                    }
                                    cell.appendChild(input);
                                    row.appendChild(cell);
                                }
                            });

                            // Add hidden id cell
                            let idCell = document.createElement('td');
                            let idInput = document.createElement('input');
                            idInput.type = 'text';
                            idInput.value = rowData.id;
                            idCell.classList.add('d-none');
                            if (inputClassName) {
                                idInput.classList.add(inputClassName);
                            }
                            idCell.appendChild(idInput);
                            row.appendChild(idCell);

                            // Add delete button cell
                            let deleteCell = document.createElement('td');
                            let deleteButton = document.createElement('button');
                            console.log('rowData.id ====>>>>', rowData.id);
                            deleteButton.setAttribute('data-table-id', rowData.id);

                            const dataRecordId = rowData.id;
                            deleteButton.classList.add(inputClassName);

                            deleteButton.textContent = 'Delete';
                            deleteButton.classList.add('btn', 'btn-danger');

                            deleteButton.addEventListener('click', function () {
                                // Find and remove the row after fetch confirmation
                                document.querySelector(`button[data-table-id='${dataRecordId}']`).click();
                            });

                            deleteCell.appendChild(deleteButton);
                            row.appendChild(deleteCell);

                            // Append the row to the table body
                            tbody.appendChild(row);
                        });
                    }
                
                    //for delete exetrnal faculty record 

                    document.addEventListener('click', (event) => {
                        const button = event.target.closest('button');
                        if (!button) return;

                        const relativeClass = button.className;
                        const tableId = button.getAttribute('data-table-id');
                        const specificClasses = ['external-faculty-data-details'];

                        const classList = relativeClass.split(' ');

                        specificClasses.forEach(specificClass => {
                            if (classList.includes(specificClass)) {
                                console.log(`Yes, the button contains the class: ${specificClass}`);
                                let confirmDelete = `Do you want to delete the ${specificClass} ?`;
                                if (confirmDelete) {
                                    Swal.fire({
                                        title: "Are you sure?",
                                        text: "You won't be able to revert this!",
                                        icon: "warning",
                                        showCancelButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonColor: "#3085d6",
                                        cancelButtonColor: "#d33",
                                        confirmButtonText: "Yes, delete it!"
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            // Execute fetch request here after confirmation
                                            fetch(`<%- BASE_URL %>research/patent-submission/${specificClass}/delete`, {
                                                method: 'POST',
                                                headers: {
                                                    'content-type': 'application/json'
                                                },
                                                body: JSON.stringify({ tableId })
                                            })
                                                .then((result) => result.json())
                                                .then((data) => {
                                                    if (data.status === 'Done') {
                                                        console.log('data ==>>', data);
                                                        // Find the row and remove it
                                                        const row = document.querySelector(`tr[data-table-id='${tableId}']`);
                                                        if (row) {
                                                            row.remove();
                                                        }
                                                        Swal.fire({
                                                            title: "Deleted!",
                                                            text: "Record has been deleted.",
                                                            icon: "success",
                                                            showConfirmButton: true,
                                                            allowOutsideClick: false,
                                                            confirmButtonText: "OK",
                                                            confirmButtonColor: "#DD6B55"
                                                        })
                                                    }
                                                })
                                                .catch((error) => {
                                                    console.error('Error:', error);
                                                    const message = error;
                                                    Swal.fire({
                                                        position: "top-center",
                                                        icon: "error",
                                                        title: `${message}`,
                                                        color: "red",
                                                        showConfirmButton: true,
                                                        allowOutsideClick: false,
                                                        confirmButtonText: "OK",
                                                        confirmButtonColor: "#DD6B55"
                                                    });
                                                });
                                        }
                                    });
                                } else {
                                    return;
                                }
                            }
                        });
                    });


                    
            
            </script>
                    
            <!-- <script src="<%- BASE_URL %>js/pagination.js"></script> -->
            <%- include('./partials/footer') %>
            <%- include('./partials/footer-end') %>