<%- include('./partials/head') %>
    <!-- inline css -->
    <style>
        .search-input {
            width: 200px;
            border: 1px solid red;
        }

        .tomselect .remove-option {
            position: absolute;
            top: 50%;
            right: 12px;
            transform: translateY(-50%);
            font-size: 1.2rem;
            cursor: pointer;
        }
    </style>
    <!-- Navbar section -->
    <%- include('./partials/header') %>

        <!-- This is left sidebar  -->
        <%- include('./partials/left-sidebar') %>

            <!-- This is right side section -->
            <main class="main" id="main-content">
                <div class="base-section coustom-section">
                    <!--DASHBOARD CONTENT START-->
                    <div class="errorHtml"></div>
                    <div class="breadcrumbs-container">
                        <ul class="breadcrumb">
                            <li class="breadcrumb-link">
                                <a href="<%- BASE_URL %>dashboard-page"> Dashboard </a>
                            </li>
                            <li class="breadcrumb-link">
                                <a href="<%- BASE_URL %>research"> Research </a>
                            </li>
                            <li class="breadcrumb-link">Patent Submission And Grant </li>
                        </ul>
                    </div>
                    <div>
                        <div class="table-card-header text-uppercase d-flex align-items-center justify-content-between">
                            <div>
                                <h5 class="pl-2">Patent Submission And Grant List</h5>
                            </div>
                            <div>
                                <button id="add-patent-submission" type="button"
                                    class="btn btn-primary btn-circle btn-xl add-modal" data-toggle="modal"
                                    data-target="#patent-submission-modal">ADD
                                    <i class="fas fa-plus plus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body table-responsive">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <!-- <label>Show Entries</label>
                                    <select class="form-select" id="changeEntry">
                                        <option value="5">5</option>
                                        <option value="10">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                        <option value="150">150</option>
                                        <option value="200">200</option>
                                        <option value="250">250</option>
                                        <option value="300">300</option>
                                        <option value="350">350</option>
                                        <option value="400">400</option>
                                        <option value="500">500</option>
                                        <option value="800">800</option>
                                        <option value="1000">1000</option>
                                    </select> -->
                                </div>
                                <div>
                                    <!-- <div class="table-searchbar-container">
                                        <button type="button" id="searchBtn"><i class="fas fa-search"></i></button>
                                        <input type="search" id="searchKeyword" placeholder="Enter keywords"
                                            class="table-searchbar">
                                    </div> -->
                                </div>
                            </div>
                            <table class="table vertical-lines custom-table  table-responsive research-pagination"
                                id="patent-submisson-list">
                                <thead>
                                    <th class="col-lg-1">Serial no</th>
                                    <th class="col-lg-1">Submission Date</th>
                                    <th class="col-lg-1">Title of Invention</th>
                                    <th class="col-lg-1">Supporting Documents</th>
                                    <th class="col-lg-1">Application Number</th>
                                    <th class="col-lg-1">Action</th>
                                </thead>
                                <tbody class="data-list">
                                    <% if (patentSubmissionsData) { %>
                                        <% patentSubmissionsData.forEach(function(patent,index) {%>
                                            <tr data-patent-id="<%- patent.patent_submission_grant_id %>"
                                                data-patent-stage-id="<%- patent.patent_stage_status_id %>"
                                                data-invention-type-id="<%- patent.invention_type_id %>"
                                                data-supporting-documents="<%- patent.supporting_documents %>">
                                                <td class="col-lg-1"><%- index+1 %></td>
                                                <% let edate=patent.grant_date; %>
                                                    <% const dates=edate.toISOString().slice(0, 10); %>
                                                        <td class="grant-date col-lg-1"><%- dates %></td>
                                                        <td class="title-of-invention col-lg-1"><%-
                                                                patent.innovation_title %>
                                                        </td>
                                                        <td class="support-documents col-lg-1"><%-
                                                                patent.supporting_documents %></td>
                                                        <td class="application-no col-lg-1"><%-
                                                                patent.application_number %>
                                                        </td>
                                                        <!-- <td class="col-lg-1">
                                <label class="view" data-patent-id="<%- patent.patent_submission_grant_id %>"><i class="fa-solid fa-eye view text-danger"
                                    data-patent-id="<%- patent.patent_submission_grant_id %>"></i></label>
                                <label class="edit" data-patent-id="<%- patent.patent_submission_grant_id %>"><i class="fa fa-edit edit text-danger"
                                    data-patent-id="<%- patent.patent_submission_grant_id %>"></i></label>
                                <label class="delete" data-patent-id="<%- patent.patent_submission_grant_id %>"><i class="fa-solid fa-trash delete text-danger"
                                    data-patent-id="<%- patent.patent_submission_grant_id %>"></i></label>
                            </td> -->

                                                        <td colspan="3px" style="display:flex;justify-content: center;">
                                                            <b title="View" class="view border-right-0"
                                                                style="cursor: pointer;"
                                                                data-patent-id="<%- patent.patent_submission_grant_id %>">
                                                                &#128065;
                                                            </b>&ensp;&ensp;&ensp;
                                                            <b title="Edit" class="edit border-right-0"
                                                                style="cursor: pointer;"
                                                                data-patent-id="<%- patent.patent_submission_grant_id %>">
                                                                &#9998;
                                                            </b>&ensp;&ensp;&ensp;
                                                            <b title="Delete" class="delete border-right-0"
                                                                style="cursor: pointer;"
                                                                data-patent-id="<%- patent.patent_submission_grant_id %>">
                                                                &#128465;
                                                            </b>
                                                        </td>
                                            </tr>
                                            <% }); %>
                                                <% } else { %>
                                                    <tr>
                                                        <td>Sorry No Data Is Present </td>
                                                    </tr>
                                                    <% } %>
                                </tbody>
                                <tr>
                                    <div id="no-records-message"
                                        style="display: none; color: red; margin-top: 10px; padding-left: 40%;">
                                        <b class="no-record">No records found.</b>
                                    </div>
                                </tr>
                            </table>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div>
                            <label id="total-row-count"></label>
                            <label class="d-none" id="row-count"></label>
                        </div>
                        <div>
                            <!-- <button id="prevBtn" class="btn btn-primary">Previous</button>
                            <button id="nextBtn" class="btn btn-primary">Next</button>
                            <p id="pagination" class="pagination-search"></p> -->
                        </div>
                    </div>
                    <!--Import Modal -->
                    <div class="modal fade" id="open-program-modal" tabindex="-1" aria-labelledby="open-program-modal"
                        aria-hidden="true">
                    </div>
                    <!-- EDIT PROGRAM AND UPDATE -->
                    <div class="modal fade" id="edit-program-modal" tabindex="-1" aria-labelledby="editModalLabel"
                        aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="editModalLabel">Update Program</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                                        aria-label="Close"></button>
                                </div>
                                <div id="errorHtml"></div>
                                <div class="modal-body">
                                    <div class="mb-3">
                                        <label for="exampleInputEmail1" class="form-label">Program Name</label>
                                        <input type="text" class="form-control" id="program_name" name="program_name">
                                        <input type="hidden" class="form-control" id="hidden_id" name="hidden_id">
                                    </div>
                                    <div class="mb-3">
                                        <label for="exampleInputPassword1" class="form-label">Program Type</label>
                                        <select class="form-control" name="program_type_lid" id="program_type_lid">

                                            <option value="1">Full Time</option>

                                            <option value="2">Part Time</option>

                                        </select>
                                    </div>

                                    <div class="mb-3">
                                        <label for="abbr" class="form-label">Program Abbr</label>
                                        <input type="text" class="form-control" id="abbr" name="abbr">
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary"
                                        data-bs-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary updateProgram">Update</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
            <!--Patent submission   Modal  form -->
            <div class="modal fade " id="patent-submission-modal" tabindex="-1" role="dialog"
                aria-labelledby="patent-submission-modal" aria-hidden="true">
                <div class="modal-dialog modal-dialog-scrollable modal-lg modal-fullscreen p-5" role="document">
                    <div class="modal-content modal-content-data validate-input">
                        <div class="modal-header">
                            <h5 class="modal-title" id="patent-study">Patent Submission And Grant </h5>
                            <div type="button" class="close" id="headerClose" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true"><i class="fas fa-times "></i></span>
                            </div>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="type-of-invention" class="form-label fw-bold">Type of
                                        Invention(IPR)</label>
                                    <select id="type-of-invention" data-validate="isEmpty,isExist"
                                        data-err-msg="This field is required and select value" required multiple>
                                        <option value="">Select IPR</option>
                                        <!-- Use server-side or client-side code to dynamically generate options -->
                                        <% patentInventionTypeData.forEach(function(invention) { %>
                                            <option value="<%= invention.id %>">
                                                <%= invention.name %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>

                                <!-- Title of Invention -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="title" class="form-label fw-bold">Title of Invention</label>
                                    <input type="text" name="titleInvention" id="title-of-invention" data
                                        data-err-msg="Provide Valid Input" class="form-control fname"
                                        data-validate="isEmpty,isAllNumeric,isExist" required>
                                </div>
                                <!-- Patent Stage -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="patent-stage" class="form-label fw-bold">Patent Stage</label>
                                    <select id="patent-stage" data-validate="isEmpty,isExist"
                                        data-err-msg="This field is required and select value" required multiple>
                                        <option value="">Select Patent Stage</option>
                                        <% patentStagData.forEach(function(status) { %>
                                            <option value="<%= status.id %>">
                                                <%= status.name %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>

                                <!-- Sustainable Development Goals (SDG) [dropdown list to be added] ? -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="sdg-goals" class="form-label fw-bold ">Sustainable Development Goals
                                        (SDG)</label>
                                    <select class="select-option drop-list" id="sdg-goals-data"
                                        data-validate="isEmpty,isExist"
                                        data-err-msg="This field is required and select value" required multiple>
                                        <option value="" selected>Select SDG Goals</option>
                                        <% patentSdgGoalData.forEach(function(goals) { %>
                                            <option value="<%= goals.id %>">
                                                <%= goals.name %>
                                            </option>
                                            <% }); %>
                                    </select>
                                </div>

                                <!-- Application Number -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="application-no" class="form-label fw-bold">Application
                                        Number</label>
                                    <input type="number" name="applicationNo" id="application-no"
                                        data-validate="isEmpty,isNumber" data-err-msg="Numeric value is required'."
                                        class="form-control number" required>
                                </div>

                                <!-- Date of Filing/Grant/Published -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4">
                                    <label for="date" class="form-label fw-bold">
                                        Date of Filing/Grant/Published
                                    </label>
                                    <input type="date" name="GrantDate" id="date" data-validate="isEmpty,isExist"
                                        data-err-msg="Date is required" class="form-control" required>
                                </div>

                                <!-- Upload Supporting Documents-->
                                <div class="form-group col-lg-6 col-md-8 col-sm-12 mb-4">
                                    <div class="col-lg-6 col-md-8 col-sm-12">
                                        <label class="form-label fw-bold ">
                                            Upload Supporting Documents
                                            <div id="uploadNewSupportDocumentDiv">
                                                <label for="uploadNewSupportDocument"><small>Click to Upload New
                                                        File</small></label>
                                                <input type="checkbox" name="uploadNewSupportDocument"
                                                    id="uploadNewSupportDocument">
                                            </div>
                                        </label>
                                        <div class="d-flex">
                                            <input type="file" name="patentFile" id="patent-file"
                                                class="col-md-12 form-control" data-validate="isEmpty,isExist,isFile"
                                                data-err-msg="File is required." required multiple>
                                            <button class="download-btn download-file" id="patent-file-edit"><i
                                                    class="fas fa-download text-danger"></i>Download</button>
                                        </div>
                                    </div>
                                </div><br>

                                <!-- Details of Other Inventors -->
                                <div class="form-group col-lg-4 col-md-6 col-sm-12 mb-4 mt-2">
                                    <label for="is-internal" class="form-label fw-bold mb-3">Details of Inventors Id And
                                        Name</label><br>
                                    <span style="color:red;" id="facultyTypeError"></span></br>
                                    <div class="form-check-inline">
                                        <label for="internal" class="form-check-label enter-faculty-type">
                                            <input type="radio" class="form-check-input enternal-type"
                                                name="author-type" id="is-internal" value="Internal">
                                            <span id="enternal-text">Internal</span></label>
                                        </label>
                                        <div class="col-lg-1 p-6 w-100 d-none" id="employee-list">
                                            <select class="select-option drop-list" id="emp-name" style="width: 200px;"
                                                multiple>
                                                <option value="">select employee name</option>
                                                <% internalFacultyData.forEach(function(employee) { %>
                                                    <option value="<%= employee.employee_name %>">
                                                        <%= employee.employee_name %>
                                                    </option>
                                                    <% }); %>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="form-check-inline">
                                        <label for="is-external" class="form-check-label external-faculty">
                                            <input type="radio" class="form-check-input" id="is-external"
                                                name="author-type" value="External">
                                            <span id="external-text">External</span>
                                        </label>
                                    </div>


                                    <div class="form-check-inline">

                                        <label for="is-external" class="form-check-label external-faculty">
                                            <input type="radio" class="form-check-input d-none" id="is-external-update"
                                                name="author-type" value="External">
                                            <span id="external-text-upd" class="d-none">External</span>
                                        </label>

                                    </div>
                                </div>

                                <div id="author-details" class="form-group col-md-12 col-sm-12 mb-4 d-none">
                                    <div class="author-details-section col-lg-12 col-md-8 col-sm-12">
                                        <label for="author-name " class="form-label fw-bold col-lg-12"> External Authors
                                            Details:</label>
                                        <div id="dynamic-rows" class="col-lg-12 col-md-8 col-sm-12 mb-4">
                                        </div>
                                    </div>
                                </div>
                                <table class="table custom-table table-responsive research-pagination"
                                    id="faculty-table-list">
                                    <div class="form-group col-lg-3 col-md-6 col-sm-12 mb-4 d-none" id="name-class">
                                        <label for="faculty-name" class="form-label fw-bold">Faculty Name</lable>
                                            <input type="text" class="form-control" id="faculty-name">
                                    </div>
                                    <div class="form-group col-lg-3 col-md-6 col-sm-12 mb-4 d-none" id="dsg-class">
                                        <label for="" class="form-label fw-bold">Faculty Designation :</lable>
                                            <input type="text" class="form-control" id="faculty-designation">
                                    </div>
                                    <div class="form-group col-lg-3 col-md-6 col-sm-12 mb-4 d-none" id="id-class">
                                        <label for="faculty-emp-id" class="form-label fw-bold">Faculty Id
                                            </lable>
                                            <input type="text" class="form-control" id="faculty-emp-id">
                                    </div>
                                    <div class="form-group col-lg-3 col-md-6 col-sm-12 mb-4 d-none" id="address-class">
                                        <label for="faculty-address" class="form-label fw-bold">Faculty Addres</lable>
                                            <input type="text" class="form-control" id="faculty-address">
                                    </div>

                                    <div class="form-group col-lg-6 col-md-6 col-sm-12 mb-4 d-none" id="add-btn">
                                        <button id="insert-details" data-bs-target="#"
                                            class="btn col-lg-4 col-md-6 col-sm-12 btn-primary" type="button">Insert
                                            Faculty Details</button>
                                        <button id="add-more-details" data-bs-target="#"
                                            class="btn col-lg-4 col-md-6 col-sm-12 btn-primary" type="button">Add More
                                            Details</button>

                                    </div>
                                </table>


                                <div>
                                    <table style="width:100%;" class="table  table-responsive d-none "
                                        id="externalfacultyTable">
                                        <thead>
                                            <th>Sr.No</th>
                                            <th>Faculty Name</th>
                                            <th>Faculty Address</th>
                                            <th>Faculty Designation</th>
                                            <th>Employee Id</th>
                                            <th colspan>Action</th>
                                        </thead>
                                        <tbody id="appendFaculty">



                                        </tbody>

                                    </table>
                                </div>


                                <div></div>
                                <div></div>
                                <table id="faculty-table-list-upd">
                                    <div class="form-group col-lg-3 col-md-6 col-sm-12 mb-4 d-none" id="name-class-upd">
                                        <label for="faculty-name-upd" class="form-label fw-bold">Faculty
                                            Name</label>
                                        <input type="text" class="form-control" id="faculty-name-upd" required>
                                        <span style="color:red;" id="facultyInsertError"></span>
                                    </div>
                                    <div class="form-group col-lg-3 col-md-6 col-sm-12 mb-4 d-none" id="dsg-class-upd">
                                        <label for="" class="form-label fw-bold">Faculty Designation :</label>
                                        <input type="text" class="form-control" id="faculty-designation-upd" required>
                                        <span style="color:red;" id="desInsertError"></span>
                                    </div>
                                    <div class="form-group col-lg-3 col-md-6 col-sm-12 mb-4 d-none" id="id-class-upd">
                                        <label for="faculty-emp-id-upd" class="form-label fw-bold">Faculty Id
                                        </label>
                                        <input type="text" class="form-control" id="faculty-emp-id-upd">
                                        <span style="color:red;" id="empInsertError"></span>

                                    </div>
                                    <div class="form-group col-lg-3 col-md-6 col-sm-12 mb-4 d-none"
                                        id="address-class-upd">
                                        <label for="faculty-address" class="form-label fw-bold">Faculty
                                            Addres</label>
                                        <input type="text" class="form-control" id="faculty-address-upd" required>
                                        <span style="color:red;" id="addrInsertError"></span>
                                    </div>

                                    <div class="form-group col-lg-6 col-md-6 col-sm-12 mb-4 d-none" id="add-btn-upd">
                                        <button id="insert-details-upd" data-bs-target="#"
                                            class="btn col-lg-4 col-md-6 col-sm-12 btn-primary" type="button">Insert
                                            Faculty Details</button>
                                    </div>
                                </table>





                            </div>
                        </div>
                        <!-- Add your modal footer buttons if needed -->
                        <div class="modal-footer">
                            <button type="button" id="footerClose" class="btn btn-danger"
                                data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-md btn-primary submit-btn d-none"
                                id="submit-btn">Submit</button>
                            <button class="btn btn-md btn-primary update-btn d-none" id="update-btn">Update</button>
                        </div>
                    </div>
                </div>
            </div>



            <!--  Patent Modal form For View -->
            <div class="modal fade " id="patent-submission-modal-view" tabindex="-1" role="dialog"
                aria-labelledby="patent-submission-modal" aria-hidden="true">
                <div class="modal-dialog modal-dialog-scrollable modal-lg modal-fullscreen p-5" role="document">
                    <div class="modal-content modal-content-data">
                        <div class="modal-header">
                            <h5 class="modal-title" id="patent-study">Patent Submission And Grant View</h5>
                            <div type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true"><i class="fas fa-times "></i></span>
                            </div>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <!-- type of invetion -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">Type Of Invention :</div>
                                        <label class="view-content" id="view-type-of-invetion"></label>
                                    </div>
                                </div>
                                <!-- title of invention -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">Title Of Invention :</div>
                                        <label class="view-content" id="view-title-of-invetion"></label>
                                    </div>
                                </div>
                                <!-- PATENT STAGE -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">Patent Stage :</div>
                                        <label class="view-content" id="view-patent-stage"></label>
                                    </div>
                                </div>
                                <!-- Are you achieve SDG -->
                                <!-- <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                        <div class="box">
                            <div class="sub-title-text sub-title">Sustainable Development Goals (SDG) :</div>
                            <label class="view-content" id="view-achive-sdg"></label>
                        </div>
                    </div> -->
                                <!-- APPLICATION NUMBER -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title"> Application Number :</div>
                                        <label class="view-content" id="view-application-number"></label>
                                    </div>
                                </div>
                                <!-- Date of Filing/Grant/Published -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title"> Date of Filing/Grant/Published:</div>
                                        <label class="view-content" id="view-date"></label>
                                    </div>
                                </div>
                                <!-- Upload Data -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="sub-title-text sub-title">
                                            <button class="btn btn-primary h-10 w-10 download-file"
                                                id="patent-data-file-view">
                                                <i class="fas fa-download text-danger"></i> Download patentDocument
                                            </button>
                                        </div>
                                        <label class="view-content" id="view-patent-file"></label>
                                    </div>
                                </div>

                                <!-- Sustainable Development Goals (SDG) -->
                                <div class="col-lg-4 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text fw-bold"> Sustainable Development
                                            Goals (SDG): </div>
                                        <label class="view-content" id="sdg-goals-container"></label>
                                    </div>
                                </div>

                                <!-- Faculty Type -->
                                <div class="col-lg-12 col-md-6  col-sm-12 p-3">
                                    <div class="box">
                                        <div class="task-sub-title sub-title-text fw-bold"> Faculty Details Id And Name:
                                        </div>
                                        <label class="view-content" id="faculty-details-container"></label>
                                    </div>
                                </div>

                                <!-- Add your modal footer buttons if needed -->
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- modal form for externalEmployee -->

                    <!-- inline script -->
                    <div id="patent-status-list" data-status='<%- JSON.stringify(patentStagData) %>'
                        style="display: none;"></div>
                    <div id="sdg-goals-list" data-goals='<%- JSON.stringify(patentSdgGoalData) %>'
                        style="display: none;"></div>
                    <div id="invention-types" data-invention='<%- JSON.stringify(patentInventionTypeData) %>'
                        style="display: none;"></div>
                    <div id="employees-list-data" data-employees='<%- JSON.stringify(internalFacultyData) %>'
                        style="display: none;"></div>
                    <script src="https://cdnjs.cloudflare.com/ajax/libs/tom-select/2.3.1/js/tom-select.complete.min.js"
                        integrity="sha512-zdXqksVc9s0d2eoJGdQ2cEhS4mb62qJueasTG4HjCT9J8f9x5gXCQGSdeilD+C7RqvUi1b4DdD5XaGjJZSlP9Q=="
                        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
                    <script>
                        //   for index icrement
                        let rowCount = document.getElementById('row-count');
                        const totalRowCount = document.getElementById('total-row-count');
                        let rowIndex = rowCount.innerText;
                        let indexValue = parseInt(rowIndex, 10);

                        const addNewPatentSubmission = document.getElementById('add-patent-submission');
                        const submitBtn = document.getElementById('submit-btn');
                        const updateBtn = document.getElementById('update-btn');
                        // const fileView = document.getElementById('file-view');
                        const downloadLink = document.getElementById('downloadLink');
                        const patenetSubMissionList = document.getElementById('patent-submisson-list');
                        patenetSubMissionList.classList.add('research-pagination');
                        const employeeDropdown = document.getElementById("emp-name");
                        const sdgGoalsDropDown = document.getElementById('sdg-goals-data');
                        // const statusDropDown = document.getElementById('patent-stage');
                        const invnstiontypeDropDown = document.getElementById('type-of-invention');
                        const facultyTableList = document.getElementById('faculty-table-list')

                        const InsertDetails = document.getElementById('insert-details');
                        const addMoreDetailsButton = document.getElementById("add-more-details");
                        const enternalFacultyType = document.getElementById('is-internal');
                        const externalFacultyType = document.getElementById('is-external');
                        const employeeList = document.getElementById('employee-list');
                        const authorDetails = document.getElementById('author-details');
                        let patentId, rowToBeUpdated, supportingDocument;
                        let storedFacultyValue, InternalAuthorValue, externalAuthorValue;
                        let facultyIdContainer = [];
                        let externalFacultyData = [];
                        let sdgGoalsIdContainer = [];
                        let externalFacultyIdArray = [];
                        let typeOfInventionsIdContainer = [];
                        let selectEmp = [];

                        addNewPatentSubmission.addEventListener('click', function (event) {
                            if (event.target.tagName === 'BUTTON' && event.target.classList.contains('add-modal') || event.target.classList.contains('plus')) {
                                submitBtn.classList.remove('d-none');
                                updateBtn.classList.add('d-none');
                                document.querySelector('#patent-study').innerHTML = 'Patent Submission And Grant';
                                document.querySelector('#uploadNewSupportDocumentDiv').classList.add('d-none');
                                document.querySelector('#patent-file').classList.remove('d-none');
                                document.querySelector('#uploadNewSupportDocument').checked = false;
                                // fileView.classList.add('d-none');
                                // modalImage.classList.add('d-none'); 
                                //d-none download button
                                InternalAuthorValue = '';
                                externalAuthorValue = '';
                                storedFacultyValue = '';
                                externalFacultyIdArray = [];
                                employeeList.classList.add('d-none');
                                authorDetails.classList.add('d-none');
                                const patentSubmissionsDataFiles = document.querySelector('#patent-file-edit');
                                patentSubmissionsDataFiles.classList.add('d-none');

                                const typeOfInvention = document.getElementById('type-of-invention');
                                const titleOfInvention = document.getElementById('title-of-invention');
                                const patentStage = document.getElementById('patent-stage');
                                // const sdgGoals = document.getElementById('sdg-goals');
                                const applicationNum = document.getElementById('application-no');
                                const subMissionDate = document.getElementById('date');
                                const patentSubmissionDocument = document.querySelector('input[type="file"]');
                                const isInternalFaculty = document.getElementById('is-internal');
                                const isExternalFaculty = document.getElementById('is-external');


                                // for making input field empty
                                typeOfInvention.value = '';
                                titleOfInvention.value = '';
                                patentStage.value = '';
                                applicationNum.value = '';
                                document.getElementById('sdg-goals-data').value = '';
                                patentSubmissionDocument.value = '';
                                date.value = '';
                                isInternalFaculty.checked = false;
                                isExternalFaculty.checked = false;


                                const patentInventionType = document.getElementById('invention-types').dataset.invention;
                                const inventionTypeData = JSON.parse(patentInventionType);
                                // const employeesListData = document.getElementById('employees-list-data').dataset.employees;

                                // const employeesDataObj = JSON.parse(employeesListData);


                                // ajax for search bar to search status
                                const inventionTypeValue = inventionTypeData.map(invention => ({
                                    value: invention.id,
                                    text: `  ${invention.name}`
                                }));

                                new TomSelect("#type-of-invention", {
                                    options: inventionTypeValue,
                                    placeholder: "Select Options",
                                    hidePlaceholder: true,
                                    create: true,
                                    plugins: ['remove_button'],
                                    onItemAdd: function () {
                                        this.setTextboxValue('');
                                        this.refreshOptions();
                                    },
                                    render: {
                                        option: function (data, escape) {
                                            return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                        },
                                        item: function (data, escape) {
                                            return '<div>' + escape(data.text) + '</div>';
                                        }
                                    }
                                });


                                const patentStatusList = document.getElementById('patent-status-list').dataset.status;

                                const patentStatusData = JSON.parse(patentStatusList);

                                // ajax for search bar to search status
                                const statusOptions = patentStatusData.map(status => ({
                                    value: status.id,
                                    text: `${status.name}`
                                }));

                                new TomSelect("#patent-stage", {
                                    options: statusOptions,
                                    placeholder: "Select patent status",
                                    hidePlaceholder: true,
                                    create: true,
                                    plugins: ['remove_button'],
                                    onItemAdd: function () {
                                        this.setTextboxValue('');
                                        this.refreshOptions();
                                    },
                                    render: {
                                        option: function (data, escape) {
                                            return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                        },
                                        item: function (data, escape) {
                                            return '<div>' + escape(data.text) + '</div>';
                                        }
                                    }
                                });


                                const sdgGoalsList = document.getElementById('sdg-goals-list').dataset.goals;

                                const sdgGoalsDataList = JSON.parse(sdgGoalsList);

                                // ajax for search bar to search employee name 
                                const sdgOptions = sdgGoalsDataList.map(sdg => ({
                                    value: sdg.id,
                                    text: ` ${sdg.name}`
                                }));

                                new TomSelect("#sdg-goals-data", {
                                    options: sdgOptions,
                                    placeholder: "Select SDG Goals",
                                    hidePlaceholder: true,
                                    create: true,
                                    plugins: ['remove_button'],
                                    onItemAdd: function () {
                                        this.setTextboxValue('');
                                        this.refreshOptions();
                                    },
                                    render: {
                                        option: function (data, escape) {
                                            return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                        },
                                        item: function (data, escape) {
                                            return '<div>' + escape(data.text) + '</div>';
                                        }
                                    }
                                });
                                const employeesListData = document.getElementById('employees-list-data').dataset.employees;

                                const employeesDataObj = JSON.parse(employeesListData);


                                // ajax for search bar to search employee name 
                                const facultyOptions = employeesDataObj.map(faculty => ({
                                    value: faculty.id,
                                    text: ` ${faculty.employee_id}  ${faculty.faculty_name}`
                                }));

                                let selectEmpList = JSON.parse('<%- JSON.stringify(selectedPatentFaculty) %>')

                                let selectPatentEmp = selectEmpList.filter(data => patentId == data.patent_submission_grant_id).map(patent => patent)
                                console.log('selected patent faculty ', JSON.stringify(selectPatentEmp))


                                facultyOptions.forEach(data => {
                                    selectPatentEmp.forEach(emp => {
                                        if (data.value == emp.faculty_id) {
                                            selectEmp.push(emp.faculty_id)
                                        }
                                    })
                                })


                                // Initialize TomSelect dropdown with options containing id and faculty_name
                                new TomSelect("#emp-name", {
                                    options: facultyOptions,
                                    items: selectEmp,
                                    // placeholder: "Select Employee Name",
                                    hidePlaceholder: true,
                                    create: true,
                                    plugins: ['remove_button'],
                                    onItemAdd: function () {
                                        this.setTextboxValue('');
                                        this.refreshOptions();
                                    },
                                    render: {
                                        option: function (data, escape) {
                                            return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                        },
                                        item: function (data, escape) {
                                            return '<div>' + escape(data.text) + '</div>';
                                        }
                                    }
                                });





                                const selectItems = document.querySelectorAll('.item');
                                selectItems.forEach(item => {
                                    item.classList.add('d-none');
                                });

                                $('#patent-submission-modal').modal({
                                    backdrop: 'static'
                                });

                            }
                        })

                        const insertPatentforms = async (url) => {
                            const patentSubmissionsData = new FormData();
                            const patentFiles = document.getElementById('patent-file');
                            // patentFile
                            const patentFilesData = patentFiles.files;
                            console.log('patentFilesData ===>>>', patentFilesData)
                            for (let i = 0; i < patentFilesData.length; i++) {
                                console.log('file name  ==>>', patentFilesData[i].name);
                                patentSubmissionsData.append('patentFilesData', patentFilesData[i]);
                            }


                            const titleOfInvention = document.getElementById('title-of-invention').value;
                            patentSubmissionsData.append('titleOfInvention', titleOfInvention);


                            const sdgGoalsOjectArray = sdgGoalsIdContainer[sdgGoalsIdContainer.length - 1]

                            const sdgGoalsContainer = sdgGoalsOjectArray ? JSON.stringify(sdgGoalsOjectArray) : null;
                            console.log('sdgGoalsContainer ===>>>>', sdgGoalsContainer);
                            patentSubmissionsData.append('sdgGoalsContainer', sdgGoalsContainer);

                            const inventionTypeArrayObject = typeOfInventionsIdContainer[typeOfInventionsIdContainer.length - 1];
                            const inventionTypeContainer = JSON.stringify(inventionTypeArrayObject);
                            console.log('inventionTypeContainer ====>>>>', inventionTypeContainer);
                            patentSubmissionsData.append('typeOfInvention', inventionTypeContainer);

                            const selectPatentStage = document.getElementById('patent-stage').value;
                            console.log('selectPatentStage ====>>>', selectPatentStage)
                            patentSubmissionsData.append('patentStage', selectPatentStage);

                            const applicationNum = document.getElementById('application-no').value;
                            patentSubmissionsData.append('applicationNum', applicationNum);

                            const subMissionDate = document.getElementById('date').value;
                            console.log('subMissionDate ===>>>', subMissionDate);
                            patentSubmissionsData.append('subMissionDate', subMissionDate);

                            const authorType = document.querySelector('input[name="author-type"]:checked');
                            await insertFacultyNameString(authorType, patentSubmissionsData);

                            fetch(url, {
                                method: 'POST',
                                body: patentSubmissionsData
                            })
                                .then((result) => {
                                    return result.json()
                                })
                                .then((data) => {
                                    if (data.status === 'Done') {
                                        //                 console.log('data >>>', data);
                                        //                 patentId = data.patentId;
                                        //                 const rowCountInteger = parseInt(data.rowCount, 10);
                                        //                 const IndexEntry = rowCountInteger + indexValue;
                                        //                 indexValue = IndexEntry;
                                        //                 console.log('IndexEntry ===>>>', IndexEntry);
                                        //                 // const patentList = document.getElementById('patent-submisson-list');
                                        //                 // patentList.classList.add('research-pagination');

                                        //                 const newPatentRow = document.createElement('tr');
                                        //                 newPatentRow.setAttribute('data-invention-type-id', data.InventionTypeIds);
                                        //                 newPatentRow.setAttribute('data-patent-stage-id', data.patentStatusId);
                                        //                 newPatentRow.innerHTML = `
                                        //     <td>${IndexEntry}</td>
                                        //     <td class="title-of-invention">${data.patentData.titleOfInvention}</td>
                                        //     <td class="submission-date">${data.patentData.subMissionDate}</td>
                                        //     <td class="supporting-documents">${data.patentDataFilesString}</td>
                                        //     <td class="application-no">${data.patentData.applicationNum}</td>

                                        //    <td title="View" class="border-right-0 view" style="cursor: pointer;" data-patent-id="${patentId}">
                                        //         &#128065;
                                        //     </td>
                                        //     <td title="Edit" class="border-right-0 edit" style="cursor: pointer;" data-patent-id="${patentId}">
                                        //         &#9998;
                                        //     </td>
                                        //     <td title="Delete" class="border-right-0 delete" style="cursor: pointer;"  data-patent-id="${patentId}">
                                        //         &#128465;
                                        //     </td>
                                        //     `;

                                        //                 patenetSubMissionList.appendChild(newPatentRow);
                                        $('#patent-submission-modal').modal('hide');
                                        Swal.fire({
                                            position: "top-center",
                                            icon: "success",
                                            title: `${data.message}`,
                                            showConfirmButton: true,
                                            allowOutsideClick: false,
                                            confirmButtonText: "OK",
                                            confirmButtonColor: "#DD6B55"
                                        }).then(data => {
                                            document.location.reload();
                                        });
                                        // rowCount.classList.remove('d-none');
                                        // totalRowCount.classList.add('d-none');
                                        // rowCount.innerText = `Total entries : ${IndexEntry}`
                                    }
                                    else {
                                        console.log('data ====>>>>>', data);
                                        Swal.fire({
                                            position: "top-center",
                                            icon: "error",
                                            title: `${data.errorCode}`,
                                            color: "red",
                                            with: "20PX",
                                            html: `<span style="color: red;">${data.message}</span>`,
                                            showConfirmButton: true,
                                            allowOutsideClick: false,
                                            confirmButtonText: "OK",
                                            confirmButtonColor: "#DD6B55"
                                        });
                                    }
                                })
                                .catch((error) => {
                                    // This will catch network errors and errors thrown from the .then block above
                                    console.error('Error:', error);
                                    const message = error;
                                    Swal.fire({
                                        position: "top-center",
                                        icon: "error",
                                        title: "Data Insertion Failed",
                                        color: "red",
                                        with: "20PX",
                                        html: `<span style="color: red;">${message}</span>`,
                                        showConfirmButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonText: "OK",
                                        confirmButtonColor: "#DD6B55"
                                    });
                                });
                        };

                        submitBtn.addEventListener('click', async () => {
                            const isValid = validateRequiredFormFields(submitBtn);

                            const internalAuthor = document.getElementById('is-internal');
                            const externalAuthor = document.getElementById('is-external');

                            if (isValid && internalAuthor.checked || externalAuthor.checked) {
                                await insertPatentforms('<%- BASE_URL %>research/patent-submission/insert');
                            }
                            else {
                                Swal.fire({
                                    position: "top-center",
                                    icon: "error",
                                    title: "Validation Failed",
                                    color: "red",
                                    showConfirmButton: true,
                                    allowOutsideClick: false,
                                    confirmButtonText: "OK",
                                    confirmButtonColor: "#DD6B55"
                                }).then(() => {
                                    if (internalAuthor.checked || externalAuthor.checked) {
                                        document.getElementById('facultyTypeError').innerText = ''
                                    } else {
                                        document.getElementById('facultyTypeError').innerText = 'Select One Of The Faculty Type'
                                    }
                                });
                            }
                        });

                        patenetSubMissionList.addEventListener('click', async function (event) {

                            if (event.target.classList.contains('edit')) {
                                patentId = event.target.getAttribute('data-patent-id');

                                submitBtn.classList.add('d-none');

                                let isExternalUpd = document.getElementById('is-external')
                                let isExternalUpdNew = document.getElementById('is-external-update')

                                let text = document.getElementById('external-text');
                                let textnew = document.getElementById('external-text-upd');

                                isExternalUpd.classList.add('d-none');
                                isExternalUpdNew.classList.remove('d-none');

                                text.classList.add('d-none');
                                textnew.classList.remove('d-none');

                                document.getElementById('name-class').classList.add('d-none');
                                document.getElementById('dsg-class').classList.add('d-none');
                                document.getElementById('id-class').classList.add('d-none');
                                document.getElementById('address-class').classList.add('d-none');
                                document.getElementById('add-btn').classList.add('d-none');

                                let externalFacultyDetails = await fetchFacultyData('<%- BASE_URL %>research/external/facultyDataForPatent');
                                console.log('faculty JSON', JSON.stringify(externalFacultyDetails.facultyData))

                                console.log('patentId ankit ====>>>>>', patentId)
                                let externalFaculty = externalFacultyDetails.facultyData.filter(fdata => patentId == fdata.patent_submission_grant_id).map(facultyData => facultyData);
                                console.log('new external faculty ', JSON.stringify(externalFaculty))

                                let appendFaculty = document.getElementById('appendFaculty');
                                appendFaculty.innerHTML = ''


                                externalFaculty.forEach((ef, index) => {
                                    let htmlData = `<tr data-facultyId = ${ef.id}>
                            
                        <td>${index + 1}</td>
                        <td><input id="updateFacultyName" type="text" value="${ef.faculty_name}" /></br><span style="color:red;" id='facultyUpdError'></span></td>
                        <td ><input id="updateFacultyAddr" type="text" value="${ef.address}" /></br><span style="color:red;" id='addrUpdError'></span></td>
                        <td ><input id="updateFacultyDes" type="text" value="${ef.designation}" /></br><span style="color:red;" id='desUpdError'></span></td>
                        <td ><input id="updateFacultyId" type="text" value="${ef.employee_id}" /></br><span style="color:red;" id='empUpdError'></span></td>
                        <td><button class="btn btn-primary updateFaculty">Update</button></td>
                        </tr>`

                                    appendFaculty.insertAdjacentHTML('beforeEnd', htmlData);
                                })


                                $('#patent-submission-modal').modal({
                                    backdrop: 'static'
                                });

                                const selectItems = document.querySelectorAll('.item');
                                selectItems.forEach(item => {
                                    item.classList.add('d-none');
                                });

                                document.querySelector('#uploadNewSupportDocumentDiv').classList.remove('d-none');
                                document.querySelector('#patent-file').classList.add('d-none');

                                updateBtn.classList.remove('d-none');
                                employeeList.classList.add('d-none');
                                authorDetails.classList.add('d-none');
                                document.querySelector('#patent-study').innerHTML = 'Patent Submission And Grant Edit';
                                InternalAuthorValue = '';
                                externalAuthorValue = '';
                                storedFacultyValue = '';
                                removeErrorMsg();
                                rowToBeUpdated = event.target.closest('tr');
                                console.log('rowToBeUpdated in siode edit ====>>>', rowToBeUpdated)
                                // function call for download button
                                setFileNameAttributeToBeDownload(rowToBeUpdated);
                                // patentId = event.target.getAttribute('data-patent-id');
                                console.log('Id For Updation', patentId);
                                const typeOfInventionData = rowToBeUpdated.getAttribute('data-invention-type-id');
                                const typeOfInvention = document.getElementById('type-of-invention');
                                // if (typeOfInvention) {
                                //     const selectedOption = Array.from(typeOfInvention.options).find(option => option.value === String(typeOfInventionData));
                                //     if (selectedOption) {
                                //         console.log('selectedOption ==>>>>', selectedOption);
                                //         selectedOption.selected = true;
                                //         console.log('Selected value:', selectedOption.value);
                                //     } else {
                                //         console.log('Option not found for value:', typeOfInventionData);
                                //     }
                                // } else {
                                //     console.log('Select element not found');
                                // }


                                const patentInventionType = document.getElementById('invention-types').dataset.invention;
                                const inventionTypeData = JSON.parse(patentInventionType);


                                // ajax for search bar to search status
                                const inventionTypeValue = inventionTypeData.map(invention => ({
                                    value: invention.id,
                                    text: `  ${invention.name}`
                                }));

                                console.log('type of invention ', typeOfInventionData, JSON.stringify(inventionTypeData))
                                let selectedInvention = inventionTypeData.filter(data => typeOfInventionData == data.id).map(invention =>
                                    invention.id,
                                );

                                console.log('selected ipr id ', JSON.stringify(selectedInvention))

                                new TomSelect("#type-of-invention", {
                                    options: inventionTypeValue,
                                    items: selectedInvention,
                                    // placeholder: "Select Options",
                                    hidePlaceholder: true,
                                    create: true,
                                    plugins: ['remove_button'],
                                    onItemAdd: function () {
                                        this.setTextboxValue('');
                                        this.refreshOptions();
                                    },
                                    render: {
                                        option: function (data, escape) {
                                            return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                        },
                                        item: function (data, escape) {
                                            return '<div>' + escape(data.text) + '</div>';
                                        }
                                    }
                                });


                                let patentStatusId = rowToBeUpdated.getAttribute('data-patent-stage-id');
                                const patentStatusList = document.getElementById('patent-status-list').dataset.status;

                                const patentStatusData = JSON.parse(patentStatusList);

                                // ajax for search bar to search status
                                const statusOptions = patentStatusData.map(status => ({
                                    value: status.id,
                                    text: `${status.name}`
                                }));

                                let selectedPatent = patentStatusData.filter(data => patentStatusId == data.id).map(patent => patent.id);

                                new TomSelect("#patent-stage", {
                                    options: statusOptions,
                                    //  placeholder: "Select patent status",
                                    items: selectedPatent,
                                    hidePlaceholder: true,
                                    create: true,
                                    plugins: ['remove_button'],
                                    onItemAdd: function () {
                                        this.setTextboxValue('');
                                        this.refreshOptions();
                                    },
                                    render: {
                                        option: function (data, escape) {
                                            return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                        },
                                        item: function (data, escape) {
                                            return '<div>' + escape(data.text) + '</div>';
                                        }
                                    }
                                });




                                const sdgGoalsList = document.getElementById('sdg-goals-list').dataset.goals;

                                const sdgGoalsDataList = JSON.parse(sdgGoalsList);
                                let sdgData = JSON.parse('<%- JSON.stringify(selectSdgGoals) %>')

                                console.log('edit sdg goal data ', JSON.stringify(sdgData))

                                let getPatentSdg = sdgData.filter(data => patentId == data.patent_submission_grant_id).map(patent => patent)
                                console.log('particular patent ', JSON.stringify(getPatentSdg))


                                //  ajax for search bar to search employee name 
                                const sdgOptions = sdgGoalsDataList.map(sdg => ({
                                    value: sdg.id,
                                    text: ` ${sdg.name}`
                                }));

                                let selectedSdg = [];

                                console.log('sdg array ', JSON.stringify(sdgOptions))

                                Array.from(sdgOptions).forEach(data => {
                                    Array.from(getPatentSdg).forEach(sg => {
                                        if (data.value == sg.id) {
                                            selectedSdg.push(sg.id)
                                        }
                                    })
                                });

                                console.log('sdg goals ', JSON.stringify(selectedSdg))

                                new TomSelect("#sdg-goals-data", {
                                    options: sdgOptions,
                                    items: selectedSdg,
                                    //   placeholder: "Select SDG Goals",
                                    hidePlaceholder: true,
                                    create: true,
                                    plugins: ['remove_button'],
                                    onItemAdd: function () {
                                        this.setTextboxValue('');
                                        this.refreshOptions();
                                    },
                                    render: {
                                        option: function (data, escape) {
                                            return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                        },
                                        item: function (data, escape) {
                                            return '<div>' + escape(data.text) + '</div>';
                                        }
                                    }
                                });



                                let selectEmpList = JSON.parse('<%- JSON.stringify(selectedPatentFaculty) %>')

                                let selectPatentEmp = selectEmpList.filter(data => patentId == data.patent_submission_grant_id).map(patent => patent)
                                console.log('selected patent faculty ', JSON.stringify(selectPatentEmp))


                                const employeesListData = document.getElementById('employees-list-data').dataset.employees;

                                const employeesDataObj = JSON.parse(employeesListData);


                                // ajax for search bar to search employee name 
                                const facultyOptions = employeesDataObj.map(faculty => ({
                                    value: faculty.id,
                                    text: ` ${faculty.employee_id}  ${faculty.faculty_name}`
                                }));

                                let selectEmp = [];

                                facultyOptions.forEach(data => {
                                    selectPatentEmp.forEach(emp => {
                                        if (data.value == emp.faculty_id) {
                                            selectEmp.push(emp.faculty_id)
                                        }
                                    })
                                })


                                // Initialize TomSelect dropdown with options containing id and faculty_name
                                new TomSelect("#emp-name", {
                                    options: facultyOptions,
                                    items: selectEmp,
                                    // placeholder: "Select Employee Name",
                                    hidePlaceholder: true,
                                    create: true,
                                    plugins: ['remove_button'],
                                    onItemAdd: function () {
                                        this.setTextboxValue('');
                                        this.refreshOptions();
                                    },
                                    render: {
                                        option: function (data, escape) {
                                            return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                                        },
                                        item: function (data, escape) {
                                            return '<div>' + escape(data.text) + '</div>';
                                        }
                                    }
                                });





                                const titleOfInvention = document.getElementById('title-of-invention');
                                const patentStage = document.getElementById('patent-stage');
                                const sdgGoals = document.getElementById('sdg-goals-data');
                                console.log('sdgGoals ===>>>>', sdgGoals);
                                // const sdgGoalsData = rowToBeUpdated.getAttribute()
                                const applicationNum = document.getElementById('application-no');
                                const internalAuthor = document.getElementById('is-internal');
                                const externalAuthor = document.getElementById('is-external');


                                const inputDateString = rowToBeUpdated.querySelector('.grant-date').innerText;
                                console.log('inputDateString ==>>', inputDateString)
                                const formattedDate = formatDateToYYYYMMDD(inputDateString);
                                document.getElementById('date').value = formattedDate.trim();


                                titleOfInvention.value = rowToBeUpdated.querySelector('.title-of-invention').innerText;
                                // patentStage.value = rowToBeUpdated.getAttribute('data-patent-stage-id');
                                console.log('patentStage.value ===>>>>>', patentStage.value,);





                                const patentfile = rowToBeUpdated.querySelector('.support-documents');
                                console.log('patentfile ===>>>>', patentfile)
                                // const sdgGoalsData = 
                                supportingDocuments = patentfile.innerText.trim();
                                // console.log('supportingDocuments ==>>', supportingDocuments);

                                applicationNum.value = rowToBeUpdated.querySelector('.application-no').innerText;
                                date.value = formattedDate;
                                console.log('date.value ===>>>>>', date.value);
                                console.log('storedFacultyValue ====>>>>>', storedFacultyValue);


                                $('#patent-submission-modal').modal('show');
                            }

                            //   for delete patent submission form
                            if (event.target.classList.contains('delete')) {
                                const patentSubMissionDataToBeDelete = event.target.closest('tr');
                                patentId = event.target.getAttribute('data-patent-id');
                                let confirmDelete = "Do you want to delete the Book Publication?";
                                if (confirmDelete) {
                                    Swal.fire({
                                        title: "Are you sure?",
                                        text: "You won't be able to revert this!",
                                        icon: "warning",
                                        showCancelButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonColor: "#3085d6",
                                        cancelButtonColor: "#d33",
                                        confirmButtonText: "Yes, delete it!"
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            // Execute fetch request here after confirmation
                                            fetch('<%- BASE_URL %>research/patent-submission/delete', {
                                                method: 'POST',
                                                headers: {
                                                    'content-type': 'application/json'
                                                },
                                                body: JSON.stringify({ patentId })
                                            })
                                                .then((result) => result.json())
                                                .then((data) => {
                                                    if (data.status === 'Done') {
                                                        console.log('data ==>>', data);
                                                        patentSubMissionDataToBeDelete.remove();
                                                        Swal.fire({
                                                            title: "Deleted!",
                                                            text: "Record has been deleted.",
                                                            icon: "success",
                                                            showConfirmButton: true,
                                                            allowOutsideClick: false,
                                                            confirmButtonText: "OK",
                                                            confirmButtonColor: "#DD6B55"
                                                        }).then(() => {
                                                            location.reload();
                                                        });
                                                    }
                                                })
                                                .catch((error) => {
                                                    console.error('Error:', error);
                                                    const message = error;
                                                    Swal.fire({
                                                        position: "top-center",
                                                        icon: "error",
                                                        title: `${message}`,
                                                        color: "red",
                                                        showConfirmButton: true,
                                                        allowOutsideClick: false,
                                                        confirmButtonText: "OK",
                                                        confirmButtonColor: "#DD6B55"
                                                    });
                                                });
                                        }
                                    });
                                }
                                else {
                                    return
                                }
                            }

                            // patent submission view
                            if (event.target.classList.contains('view')) {
                                removeErrorMsg()

                                $('#patent-submission-modal-view').modal({
                                    backdrop: 'static'
                                });

                                const patentSubmissionDataToBeViewed = event.target.closest('tr');
                                console.log('row to be viewed', patentSubmissionDataToBeViewed);
                                let patentFile = patentSubmissionDataToBeViewed.querySelector('.patent-file');
                                console.log('patentFile ==>>', patentFile)
                                patentId = patentSubmissionDataToBeViewed.getAttribute('data-patent-id')
                                $('#patent-submission-modal-view').modal('show');

                                const viewTypeOfInvetion = document.getElementById('view-type-of-invetion');
                                const viewTitleOfinvetion = document.getElementById('view-title-of-invetion');
                                const viewDate = document.getElementById('view-date');
                                const viewAchiveSdg = document.getElementById('view-achive-sdg');
                                const viewIsPresenter = document.getElementById('view-author-name');
                                const viewUploadedDoc = document.getElementById('view-patent-file');
                                const viewApplicationNum = document.getElementById('view-application-number');
                                const viewPatentStage = document.getElementById('view-patent-stage');

                                fetch('<%- BASE_URL %>research/patent-submission/view', {
                                    method: 'POST',
                                    headers: {
                                        'content-type': 'application/json'
                                    },
                                    body: JSON.stringify({ patentId }
                                    )
                                })
                                    .then((result) => {
                                        return result.json();
                                    })
                                    .then((data) => {
                                        if (data.status === 'Done') {
                                            console.log('data', data)
                                            setFileNameInButtons(data)

                                            viewTitleOfinvetion.innerText = data.patentSubmissionsData[0].innovation_title;
                                            viewTypeOfInvetion.innerText = data.patentSubmissionsData[0].invention_type_name;
                                            viewApplicationNum.innerText = data.patentSubmissionsData[0].application_number;
                                            viewDate.innerText = data.patentSubmissionsData[0].grant_date;
                                            viewPatentStage.innerText = data.patentSubmissionsData[0].patent_stage_status_name;

                                            let facultyDetailsHTML = `
                            <table class="table" border='1px'>
                                <thead>
                                    <th>#</th>
                                    <th>Faculty Name</th>
                                    <th>Designation</th>
                                    <th>Address</th>
                                    <th>Employee ID</th>
                                    <th>Faculty type</th>
                                </thead>
                                <tbody>`;

                                            data.facultyData.forEach((faculty, index) => {
                                                facultyDetailsHTML += `
                            <tr>
                                <td class="view-content">${index + 1}</td>
                                <td class="view-content">${faculty.faculty_name}</td>
                                <td class="view-content">${faculty.designation}</td>
                                <td class="view-content">${faculty.address}</td>
                                <td class="view-content">${faculty.employee_id}</td>
                                <td class="view-content">${faculty.faculty_type}</td>
                            </tr>`;
                                            });

                                            facultyDetailsHTML += `
                            </tbody>
                        </table>`
                                            document.getElementById('faculty-details-container').innerHTML = facultyDetailsHTML;

                                            let sdgGoalsDetailsHtml = `
                            <table class="table" border='1px'>
                                <thead>
                                    <th>#</th>
                                    <th>Sustainable Development Goals (SDG)</th>
                                </thead>
                                <tbody>`;

                                            data.sdgGoalsData.forEach((sdg, index) => {
                                                sdgGoalsDetailsHtml += `
                            <tr>
                                <td class="view-content">${index + 1}</td>
                                <td class="view-content">${sdg.name}</td>
                            </tr>`;
                                            });

                                            sdgGoalsDetailsHtml += `
                            </tbody>
                        </table>`

                                            document.getElementById('sdg-goals-container').innerHTML = sdgGoalsDetailsHtml;

                                        }
                                    })
                            }

                        })


                        async function fetchFacultyData(url) {
                            let requestDetails = {
                                method: 'GET',
                                headers: {
                                    'Accept': 'application/json'
                                }
                            }

                            let data;
                            let response = await fetch(url, requestDetails);
                            if (response.ok) {
                                data = await response.json();
                                return data;
                            } else {
                                throw new Error('Error in fetching data')
                            }
                        }


                        document.addEventListener('click', (event) => {

                            if (event.target.classList.contains('updateFaculty')) {
                                let facultyId = event.target.closest('tr').getAttribute('data-facultyId')
                                console.log('button clicked with id ', facultyId)
                                let tr = event.target.closest('tr');
                                let facultyName = tr.querySelector('#updateFacultyName').value
                                let facultyDesignation = tr.querySelector('#updateFacultyDes').value
                                let facultyAddr = tr.querySelector('#updateFacultyAddr').value
                                let empId = tr.querySelector('#updateFacultyId').value

                                let addrError = (facultyAddr != '') ? true : false;
                                if (addrError) {
                                    document.getElementById('addrUpdError').innerText = '';
                                } else {
                                    document.getElementById('addrUpdError').innerText = 'Address is Required';
                                }

                                let facultyError = checkAlphabets(facultyName, 'facultyUpdError');
                                let designationError = checkAlphabets(facultyDesignation, 'desUpdError');
                                let empError = checkEmpError(empId, 'empUpdError');
                                let externalFacultyDetails;

                                if (addrError && facultyError && designationError && empError) {

                                    externalFacultyDetails = {
                                        facultyId: facultyId, facultyName: facultyName,
                                        facultyDesignation: facultyDesignation, facultyAddr: facultyAddr, empId: empId
                                    }

                                    let obj = externalFacultyDetails
                                    upsertFacultyData('<%- BASE_URL %>research/external/faculty-updateData', obj, tr)
                                }

                            }
                        })


                        function upsertFacultyData(url, obj, tr) {
                            fetch(url, {
                                method: 'POST',
                                headers: {
                                    'content-type': 'application/json'
                                },
                                body: JSON.stringify(obj)
                            })
                                .then((result) => {
                                    return result.json()
                                })
                                .then((data) => {
                                    if (data.status === 'Done') {

                                        console.log('response >> ', data)

                                        Swal.fire({
                                            position: "top-center",
                                            icon: "success",
                                            title: `${data.message}`,
                                            showConfirmButton: true,
                                            allowOutsideClick: false,
                                            confirmButtonText: "OK",
                                            confirmButtonColor: "#DD6B55"
                                        }).then(() => {
                                            console.log('object ', JSON.stringify(obj))
                                            tr.querySelector('#updateFacultyName').value = obj.facultyName
                                            tr.querySelector('#updateFacultyDes').value = obj.facultyDesignation
                                            tr.querySelector('#updateFacultyAddr').value = obj.facultyAddr
                                            tr.querySelector('#updateFacultyId').value = obj.empId
                                        })
                                    }
                                })
                        }



                        function checkAlphabets(facultyName, idName) {

                            let facultyError = document.getElementById(idName);

                            // if (facultyName.length == 0 && idName === 'facultyError' || ) {
                            //     facultyError.innerText = "Name is Required";
                            //     return false;
                            // }

                            // if (facultyName.length == 0 && idName === 'desError') {
                            //     facultyError.innerText = "Designation is Required";
                            //     return false;
                            // }

                            if (!facultyName || facultyName.trim() === "") {
                                facultyError.innerText = "Provide Valid Input";
                                return false;
                            }

                            const words = facultyName.split(" ");

                            for (const word of words) {
                                for (let i = 0; i < word.length; i++) {
                                    const charCode = word.charCodeAt(i);
                                    if (
                                        (charCode < 65 || charCode > 90) &&
                                        (charCode < 97 || charCode > 122)
                                    ) {
                                        facultyError.innerText = "Provide Valid Input";
                                        return false;
                                    }
                                }
                            }

                            facultyError.innerText = "";
                            return true;
                        }


                        document.getElementById('insert-details-upd').addEventListener('click', () => {


                            let facultyNameUpd = document.getElementById('faculty-name-upd');
                            let facultyDesignationUpd = document.getElementById('faculty-designation-upd');
                            let facultyAddrUpd = document.getElementById('faculty-address-upd');
                            let facultyEmpUpd = document.getElementById('faculty-emp-id-upd');

                            let facultyName = facultyNameUpd.value;
                            let facultyDesignation = facultyDesignationUpd.value;
                            let facultyAddr = facultyAddrUpd.value;
                            let facultyEmp = facultyEmpUpd.value;

                            let addrError = (facultyAddr != '') ? true : false;
                            if (addrError) {
                                document.getElementById('addrInsertError').innerText = '';
                            } else {
                                document.getElementById('addrInsertError').innerText = 'Address is Required';
                            }

                            let facultyError = checkAlphabets(facultyName, 'facultyInsertError');
                            let designationError = checkAlphabets(facultyDesignation, 'desInsertError');
                            let empError = checkEmpError(facultyEmp, 'empInsertError');

                            let appendFaculty = document.getElementById('appendFaculty');
                            let elements = appendFaculty.querySelectorAll('tr');

                            for (var i = 0; i < elements.length; i++) {

                                let facultyId = elements[i].querySelector('#updateFacultyId').value;
                                console.log('faculty Id ', facultyId)

                                if (facultyId === facultyEmp) {
                                    Swal.fire({
                                        position: "top-center",
                                        icon: "error",
                                        title: `Duplicate Faculty Id Not Allowed`,
                                        showConfirmButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonText: "OK",
                                        confirmButtonColor: "#DD6B55"
                                    })
                                    return;
                                };
                            }

                            if (addrError && facultyError && designationError && empError) {

                                console.log('clickedd insert details buttons')
                                upsertExternalDetails('<%- BASE_URL %>research/external/faculty-patentInsert');
                            }
                        });


                        const upsertExternalDetails = (url) => {
                            let facultyNameUpd = document.getElementById('faculty-name-upd');
                            let facultyDesignationUpd = document.getElementById('faculty-designation-upd');
                            let facultyAddrUpd = document.getElementById('faculty-address-upd');
                            let facultyEmpUpd = document.getElementById('faculty-emp-id-upd');

                            let facultyName = facultyNameUpd.value;
                            let facultyDesignation = facultyDesignationUpd.value;
                            let facultyAddr = facultyAddrUpd.value;
                            let facultyEmp = facultyEmpUpd.value;


                            let externalFacultyDetails = {
                                facultyEmpId: facultyEmp,
                                facultyName: facultyName,
                                facultyDsg: facultyDesignation,
                                facultyAddr: facultyAddr,
                            }

                            console.log('json string ', JSON.stringify(externalFacultyDetails))

                            let payload = { externalFacultyDetails, patentId };

                            fetch(url, {
                                method: 'POST',
                                headers: {
                                    'content-type': 'application/json'
                                },
                                body: JSON.stringify(payload)
                            })
                                .then((result) => {
                                    return result.json()
                                })
                                .then((data) => {
                                    if (data.status === 'Done') {

                                        console.log('response >> ', data)

                                        Swal.fire({
                                            position: "top-center",
                                            icon: "success",
                                            title: `${data.message}`,
                                            showConfirmButton: true,
                                            allowOutsideClick: false,
                                            confirmButtonText: "OK",
                                            confirmButtonColor: "#DD6B55"
                                        }).then(() => {

                                            let appendFaculty = document.getElementById('appendFaculty');
                                            let allTds = appendFaculty.querySelectorAll('tr');

                                            let htmlData = `<tr data-facultyId = ${data.researchGrantId}>

                                                                        <td>${allTds.length + 1}</td>
                                                                        <td><input id="updateFacultyName" type="text" value=${facultyName} /></br><span style="color:red;" id='facultyUpdError'></span></td>
                                                                        <td ><input id="updateFacultyAddr" type="text" value=${facultyAddr} /></br><span style="color:red;" id='addrUpdError'></span></td>
                                                                        <td ><input id="updateFacultyDes" type="text" value=${facultyDesignation} /></br><span style="color:red;" id='desUpdError'></span></td>
                                                                        <td ><input id="updateFacultyId" type="text" value=${facultyEmp} /></br><span style="color:red;" id='empUpdError'></span></td>
                                                                        <td><button class="btn btn-primary updateFaculty">Update</button></td>
                                                                        </tr>`

                                            appendFaculty.insertAdjacentHTML('beforeEnd', htmlData);



                                        });
                                    }
                                }).catch((error) => {
                                    console.error("ERROR:", error);
                                })
                        }

                        function checkEmpError(facultyEmpId, errid) {
                            let empError = document.getElementById(errid);
                            let bool = true;

                            if (facultyEmpId.length === 0) {
                                empError.innerText = 'Provide Valid Input';
                                return false;
                            }

                            for (let i = 0; i < facultyEmpId.length; i++) {
                                const charCode = facultyEmpId.charAt(i);
                                if (!(charCode >= '0' && charCode <= '9')) {
                                    empError.innerText = 'Provide Valid Input';
                                    bool = false;
                                    break;
                                }
                            }

                            if (bool) {
                                empError.innerText = '';
                            }

                            return bool;
                        }





                        // update function for update the record
                        const updatePatentSubmissiom = async (url) => {
                            console.log('clickedd');
                            const updatedTypeOfInvention = document.getElementById('type-of-invention').value;
                            const updatedTitleOfInvention = document.getElementById('title-of-invention').value;
                            const updatedPatentStage = document.getElementById('patent-stage').value;
                            // const updatedSdgGoals =  document.getElementById('sdg-goals').value
                            const updatedApplicationNum = document.getElementById('application-no').value;
                            const updatedSubMissionDate = document.getElementById('date').value;
                            const updatedAuthorType = document.querySelector('input[name="author-type"]:checked');
                            console.log('supportingDocuments ==>>', supportingDocuments);

                            const updatedPatentData = new FormData();
                            // Append the updated values to FormData
                            updatedPatentData.append('patentId', patentId);
                            updatedPatentData.append('typeOfInvention', updatedTypeOfInvention);
                            updatedPatentData.append('titleOfInvention', updatedTitleOfInvention);
                            updatedPatentData.append('patentStage', updatedPatentStage);
                            // updatedPatentData.append('sdgGoals', updatedSdgGoals);
                            updatedPatentData.append('applicationNum', updatedApplicationNum);
                            updatedPatentData.append('subMissionDate', updatedSubMissionDate);

                            const sdgGoalsOjectArray = sdgGoalsIdContainer[sdgGoalsIdContainer.length - 1]
                            const sdgGoalsContainer = JSON.stringify(sdgGoalsOjectArray);
                            console.log('sdgGoalsOjectArray ==>>>', sdgGoalsOjectArray)
                            updatedPatentData.append('sdgGoalsContainer', sdgGoalsContainer);
                            //function call for set the value of radio button 
                            await updateFacultyNameString(updatedAuthorType, updatedPatentData, storedFacultyValue)

                            const updatedPatentFiles = document.getElementById('patent-file');
                            // patentFile
                            console.log('updatedPatentFiles ==>>', updatedPatentFiles);
                            const updatedPatentFilesData = updatedPatentFiles.files;
                            console.log('updatedPatentFilesData ======>>>>', updatedPatentFilesData);
                            if (updatedPatentFilesData) {
                                console.log('files data ===>>>', updatedPatentFilesData)
                                for (let i = 0; i < updatedPatentFilesData.length; i++) {
                                    console.log('file name  ==>>', updatedPatentFilesData[i].name);
                                    updatedPatentData.append('patentFilesData', updatedPatentFilesData[i]);
                                }
                            }
                            else {
                                updatedPatentFilesData = null
                                updatedPatentData.append('patentFilesData', updatedPatentFilesData)
                            }

                            // fetch api
                            fetch(url, {
                                method: 'POST',
                                body: updatedPatentData
                            })
                                .then((result) => {
                                    return result.json();

                                })
                                .then((data) => {
                                    if (data.status === 'Done') {
                                        console.log('Updated Data ==> ', data)
                                        console.log('updated data title ===>', data.updatedPatentData.typeOfInvention);
                                        rowToBeUpdated.querySelector('.title-of-invention').innerText = data.updatedPatentData.titleOfInvention;
                                        rowToBeUpdated.setAttribute('data-invention-type-id', data.InventionTypeIds);
                                        rowToBeUpdated.setAttribute('data-patent-stage', data.patentStage);
                                        rowToBeUpdated.querySelector('.application-no').innerText = data.updatedPatentData.applicationNum;
                                        rowToBeUpdated.querySelector('.grant-date').innerText = data.updatedPatentData.subMissionDate;
                                        rowToBeUpdated.querySelector('.support-documents').innerText = data.patentSubmissionsDataFiles !== null ? data.patentDataFiles : supportingDocuments;
                                        Swal.fire({
                                            position: "top-center",
                                            icon: "success",
                                            title: `${data.message}`,
                                            showConfirmButton: true,
                                            allowOutsideClick: false,
                                            confirmButtonText: "OK",
                                            confirmButtonColor: "#DD6B55",
                                            timer: 1500
                                        }).then(() => {
                                            document.location.reload()
                                        });
                                        $('#patent-submission-modal').modal('hide');
                                    }
                                    else {
                                        const message = data.message;
                                        console.log('data ===>>>', data)
                                        console.log('message ==:::', message);
                                        Swal.fire({
                                            position: "top-center",
                                            icon: "error",
                                            title: `${data.errorCode}`,
                                            color: "red",
                                            with: "20PX",
                                            html: `<span style="color: red;">${data.message}</span>`,
                                            showConfirmButton: true,
                                            allowOutsideClick: false,
                                            confirmButtonText: "OK",
                                            confirmButtonColor: "#DD6B55"
                                        });
                                    }

                                })
                                .catch((error) => {
                                    const message = error
                                    Swal.fire({
                                        position: "top-center",
                                        icon: "error",
                                        title: `${message}`,
                                        color: "red",
                                        showConfirmButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonText: "OK",
                                        confirmButtonColor: "#DD6B55"
                                    });
                                })
                        };

                        updateBtn.addEventListener('click', async () => {
                            formGroup = updateBtn.closest('.validate-input')
                            console.log("formGroup::::::::", formGroup)
                            formGroup.querySelectorAll('input[type="file"]')?.forEach(elm => {
                                console.log("elm:::::::::", elm);
                                elm.removeAttribute('data-validate')
                            })
                            const isValid = validateRequiredFormFields(updateBtn);
                            // const internalAuthor = document.getElementById('is-internal');
                            // const externalAuthor = document.getElementById('is-external-update');

                            if (isValid) {
                                await updatePatentSubmissiom('<%- BASE_URL %>research/patent-submission/update');
                            }
                            else {
                                Swal.fire({
                                    position: "top-center",
                                    icon: "error",
                                    title: "Validation Failed",
                                    color: "red",
                                    showConfirmButton: true,
                                    allowOutsideClick: false,
                                    confirmButtonText: "OK",
                                    confirmButtonColor: "#DD6B55"
                                })
                                // }).then(() => {
                                //     if(internalAuthor.checked || externalAuthor.checked){
                                //     document.getElementById('facultyTypeError').innerText=''
                                //     }else{
                                //     document.getElementById('facultyTypeError').innerText='Select One Of The Faculty Type'
                                //     }
                                // });
                            }
                        })


                        //  set file string into button
                        function setFileNameInButtons(data) {
                            console.log('data XXXXXXXXX==>>>', data);
                            patetDataFileView = document.getElementById('patent-data-file-view');
                            patetDataFileView.setAttribute('data-filename', data.patentSubmissionsData[0].supporting_documents);
                        }

                        //eventlistner for download files
                        document.addEventListener('click', async function (event) {
                            const button = event.target.closest('button');
                            if (button && button.id && button.classList.contains('download-file')) {
                                console.log('button ===>>>', button)
                                try {
                                    const fileDataString = button.getAttribute('data-filename');
                                    if (!fileDataString) {
                                        throw new Error('Data filename attribute not found on button.');
                                    }

                                    const fileArray = fileDataString.split(',').map(fileName => fileName.trim()).filter(Boolean);
                                    if (fileArray.length === 0) {
                                        throw new Error('No file names found in data filename attribute.');
                                    }

                                    const downloadPromises = fileArray.map(async (fileName) => {
                                        console.log('fileName ===>>>', fileName)
                                        const fileUrl = `<%- BASE_URL %>research/patent-submission/download/${fileName}`;
                                        downloadFile(fileName, fileUrl)
                                        try {
                                            const response = await fetch(fileUrl);
                                            if (!response.ok) {
                                                throw new Error(`Failed to download file: ${fileName}`);
                                            }
                                            console.log('File downloaded successfully:', fileName);
                                            return fileName;
                                        } catch (error) {
                                            console.error('Error downloading file:', error);
                                            throw error;
                                        }
                                    });

                                    const downloadedFiles = await Promise.all(downloadPromises);
                                    console.log('All files downloaded successfully:', downloadedFiles);
                                } catch (error) {
                                    console.error('Error downloading files:', error);
                                    alert(`There was a problem downloading files: ${error.message}`);
                                }
                            }
                        });


                        // set string file value into button
                        function setFileNameAttributeToBeDownload(data) {
                            console.log('data row in side function ===>>', data);
                            const patentSubmissionsDataFiles = document.getElementById('patent-file-edit');
                            patentSubmissionsDataFiles.classList.remove('d-none');
                            const patentSubmissionsDataString = data.getAttribute('data-supporting-documents');

                            // setAttribute into button
                            patentSubmissionsDataFiles.setAttribute('data-filename', patentSubmissionsDataString);

                        };

                        // EVENT LIST THAT WILL USE USE TO OPEN DROP DOWN LIST  
                        const externaltype = document.querySelector('.external-faculty');

                        let additionalDetails = [];

                        const enternalText = document.getElementById('enternal-text');

                        // employeesListData data came from backend
                        //         const employeesListData = document.getElementById('employees-list-data').dataset.employees;
                        //    const sdgGoalsList = document.getElementById('sdg-goals-list').dataset.goals;
                        //  const patentStatusList = document.getElementById('patent-status-list').dataset.status;
                        // const patentInventionType = document.getElementById('invention-types').dataset.invention;


                        //     const employeesDataObj = JSON.parse(employeesListData);
                        //  const sdgGoalsDataList = JSON.parse(sdgGoalsList);
                        //    const patentStatusData = JSON.parse(patentStatusList);
                        // const inventionTypeData = JSON.parse(patentInventionType);

                        // ajax for search bar to search employee name 
                        // const sdgOptions = sdgGoalsDataList.map(sdg => ({
                        //     value: sdg.id,
                        //     text: ` ${sdg.name}`
                        // }));

                        // ajax for search bar to search status
                        // const statusOptions = patentStatusData.map(status => ({
                        //     value: status.id,
                        //     text: `${status.name}`
                        // }));

                        // ajax for search bar to search status
                        // const inventionTypeValue = inventionTypeData.map(invention => ({
                        //     value: invention.id,
                        //     text: `  ${invention.name}`
                        // }));

                        // ajax for search bar to search employee name 
                        // const facultyOptions = employeesDataObj.map(faculty => ({
                        //     value: faculty.id,
                        //     text: ` ${faculty.employee_id}  ${faculty.faculty_name}`
                        // }));


                        // Initialize TomSelect dropdown with options containing id and faculty_name
                        // new TomSelect("#emp-name", {
                        //     options: facultyOptions,
                        //     placeholder: "Select Employee Name",
                        //     hidePlaceholder: true,
                        //     create: true,
                        //     plugins: ['remove_button'],
                        //     onItemAdd: function () {
                        //         this.setTextboxValue('');
                        //         this.refreshOptions();
                        //     },
                        //     render: {
                        //         option: function (data, escape) {
                        //             return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                        //         },
                        //         item: function (data, escape) {
                        //             return '<div>' + escape(data.text) + '</div>';
                        //         }
                        //     }
                        // });

                        // Initialize TomSelect dropdown with options containing id and faculty_name
                        // new TomSelect("#sdg-goals-data", {
                        //     options: sdgOptions,
                        //     placeholder: "Select SDG Goals",
                        //     hidePlaceholder: true,
                        //     create: true,
                        //     plugins: ['remove_button'],
                        //     onItemAdd: function () {
                        //         this.setTextboxValue('');
                        //         this.refreshOptions();
                        //     },
                        //     render: {
                        //         option: function (data, escape) {
                        //             return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                        //         },
                        //         item: function (data, escape) {
                        //             return '<div>' + escape(data.text) + '</div>';
                        //         }
                        //     }
                        // });

                        // new TomSelect("#patent-stage", {
                        //     options: statusOptions,
                        //     placeholder: "Select patent status",
                        //     hidePlaceholder: true,
                        //     create: true,
                        //     plugins: ['remove_button'],
                        //     onItemAdd: function () {
                        //         this.setTextboxValue('');
                        //         this.refreshOptions();
                        //     },
                        //     render: {
                        //         option: function (data, escape) {
                        //             return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                        //         },
                        //         item: function (data, escape) {
                        //             return '<div>' + escape(data.text) + '</div>';
                        //         }
                        //     }
                        // });

                        // new TomSelect("#type-of-invention", {
                        //     options: inventionTypeValue,
                        //     placeholder: "Select Options",
                        //     hidePlaceholder: true,
                        //     create: true,
                        //     plugins: ['remove_button'],
                        //     onItemAdd: function () {
                        //         this.setTextboxValue('');
                        //         this.refreshOptions();
                        //     },
                        //     render: {
                        //         option: function (data, escape) {
                        //             return '<div class=""><span>' + escape(data.value) + ' - </span><span class="ms-auto text-muted">' + escape(data.text) + '</span></div>';
                        //         },
                        //         item: function (data, escape) {
                        //             return '<div>' + escape(data.text) + '</div>';
                        //         }
                        //     }
                        // });

                        // function for select author name from drop down list
                        function handleEmployeeDropdownChange() {
                            const selectedValues = Array.from(employeeDropdown.options)
                                .filter(option => option.selected)
                                .map(option => option.value);
                            InternalAuthorValue = selectedValues.length === 0 ? "" : selectedValues;
                            console.log('InternalAuthorValue ===>>>>>', InternalAuthorValue);
                            if (!facultyIdContainer.some(author => author === InternalAuthorValue)) {
                                facultyIdContainer.push({ 'internalFaculty': InternalAuthorValue });
                            }
                            console.log("Selected employee values:", facultyIdContainer);

                        }


                        // function for Sustainable Development Goals drop down list
                        function handleSdgGoalsDropDownChange() {
                            const selectedValues = Array.from(sdgGoalsDropDown.options)
                                .filter(option => option.selected)
                                .map(option => option.value);
                            const sdgGoalsValues = selectedValues.length === 0 ? "" : selectedValues;
                            console.log('sdgGoalsValues ===>>>>>', sdgGoalsValues);
                            if (!sdgGoalsIdContainer.some(goals => goals === sdgGoalsValues)) {
                                sdgGoalsIdContainer.push(sdgGoalsValues);
                            }
                            console.log("Selected sdgGoalsIdContainer ids :", sdgGoalsIdContainer);

                        }


                        // function for invention type drop down list selectedTypeOfInvention
                        function handleInventionsTypeDropDownChange() {
                            const selectedValues = Array.from(invnstiontypeDropDown.options)
                                .filter(option => option.selected)
                                .map(option => option.value);
                            const inventionsTypeValues = selectedValues.length === 0 ? "" : selectedValues;
                            console.log('inventionsTypeValues ===>>>>>', inventionsTypeValues);
                            if (!typeOfInventionsIdContainer.some(inventions => inventions === inventionsTypeValues)) {
                                typeOfInventionsIdContainer.push({ 'typeOfInventions': inventionsTypeValues });
                            }
                            console.log("Selected sdgGoalsIdContainer ids :", typeOfInventionsIdContainer);
                        }



                        //function for insert external data faculty with fetch api
                        const insertExternalDetails = (url) => {
                            // Define externalFacultyArray and externalFacultyData outside the function
                            const externalFacultyDetails = {};
                            externalFacultyDetails.facultyName = document.getElementById('faculty-name').value;
                            externalFacultyDetails.facultyDsg = document.getElementById('faculty-designation').value;
                            externalFacultyDetails.facultyAddr = document.getElementById('faculty-address').value;
                            externalFacultyDetails.facultyEmpId = document.getElementById('faculty-emp-id').value;

                            const payload = {
                                externalFacultyDetails: externalFacultyDetails
                            }

                            console.log('payload ====>>>>>>', payload);

                            fetch(url, {
                                method: 'POST',
                                headers: {
                                    'content-type': 'application/json'
                                },
                                body: JSON.stringify(payload)
                            })
                                .then((result) => {
                                    return result.json()
                                })
                                .then((data) => {
                                    if (data.status === 'Done') {
                                        console.log('data ===>>>>>', data);
                                        let rowCountInteger = parseInt(data.rowCount, 10);
                                        let indexCount = rowCountInteger;
                                        rowCountInteger = indexCount + rowCountInteger;
                                        console.log('rowCountInteger ===>>>>>>', rowCountInteger);
                                        externalFacultyIdArray.push(data.externalFacultyId);
                                        document.getElementById('name-class').classList.add('d-none');
                                        document.getElementById('dsg-class').classList.add('d-none');
                                        document.getElementById('id-class').classList.add('d-none');
                                        document.getElementById('address-class').classList.add('d-none');
                                        document.getElementById('insert-details').classList.add('d-none');
                                        document.getElementById('add-more-details').classList.remove('d-none');
                                        const newFacultyDataRow = document.createElement('tr');
                                        newFacultyDataRow.innerHTML = `
                                        <td class="name-class"> ${data.facultyData.facultyName} </td>
                                        <td class="dsg-class"> ${data.facultyData.facultyDsg} </td>
                                        <td class="id-class"> ${data.facultyData.facultyEmpId} </td>
                                        <td class="address-class"> ${data.facultyData.facultyAddr} </td>
                                        `
                                        facultyTableList.appendChild(newFacultyDataRow);
                                        Swal.fire({
                                            position: "top-center",
                                            icon: "success",
                                            title: `${data.message}`,
                                            showConfirmButton: true,
                                            allowOutsideClick: false,
                                            confirmButtonText: "OK",
                                            confirmButtonColor: "#DD6B55"
                                        });
                                    }

                                }).catch((error) => {
                                    console.error("ERROR:", error);
                                })

                            // event listner for insert exetrnal faculty details details
                            document.getElementById('add-more-details').addEventListener('click', () => {

                                console.log('clicked add more button');
                                // making input field empty
                                document.getElementById('faculty-name').value = '';
                                document.getElementById('faculty-designation').value = '';
                                document.getElementById('faculty-address').value = '';
                                document.getElementById('faculty-emp-id').value = '';
                                document.getElementById('name-class').classList.remove('d-none');
                                document.getElementById('dsg-class').classList.remove('d-none');
                                document.getElementById('id-class').classList.remove('d-none');
                                document.getElementById('address-class').classList.remove('d-none');
                                document.getElementById('insert-details').classList.remove('d-none');
                                document.getElementById('add-more-details').classList.add('d-none');

                            })
                        }

                        //  addEventListener   for insert external details
                        InsertDetails.addEventListener('click', async () => {
                            console.log('clickedd insert details buttons')

                            let elements = document.querySelectorAll('.id-class');

                            let newVal = document.getElementById('faculty-emp-id').value;
                            for (var i = 0; i < elements.length; i++) {
                                console.log("elements[i].textContent : ", elements[i].textContent);
                                console.log("newVal : ", newVal);
                                if (elements[i].textContent.trim() === newVal) {
                                    Swal.fire({
                                        position: "top-center",
                                        icon: "error",
                                        title: `Duplicate Faculty Id Not Allowed`,
                                        showConfirmButton: true,
                                        allowOutsideClick: false,
                                        confirmButtonText: "OK",
                                        confirmButtonColor: "#DD6B55"
                                    })
                                    return;
                                };
                            }

                            await insertExternalDetails('<%- BASE_URL %>research/external/faculty-insert');

                        });

                        employeeDropdown.addEventListener("change", handleEmployeeDropdownChange);
                        sdgGoalsDropDown.addEventListener("change", handleSdgGoalsDropDownChange);
                        // statusDropDown.addEventListener("change", handlePatentStatusDropDownChange);
                        invnstiontypeDropDown.addEventListener("change", handleInventionsTypeDropDownChange);




                        // function for add drop down list or  add new faculty data
                        async function insertFacultyNameString(authorType, patentSubmissionsData) {
                            console.log('externalFacultyIdArray in side my function ====>>>', externalFacultyIdArray);
                            const externalFacultyDetails = externalFacultyIdArray;
                            console.log('facultyIdContainer ====>>>>>', facultyIdContainer);
                            const facultyDataContainerArray = [(facultyIdContainer[facultyIdContainer.length - 1])];
                            facultyDataContainerArray.push({ 'externalEmpList': externalFacultyDetails });

                            const facultyDataContainer = JSON.stringify(facultyDataContainerArray);
                            console.log('facultyDataContainer ===>>>>', facultyDataContainer)
                            patentSubmissionsData.append('facultyDataContainer', facultyDataContainer);

                        }

                        // fuction for updated faculty type
                        async function updateFacultyNameString(updatedAuthorType, updatedPatentData, storedFacultyValue) {
                            console.log('externalFacultyIdArray in side my function ====>>>', externalFacultyIdArray);
                            const externalFacultyDetails = externalFacultyIdArray;
                            console.log('facultyIdContainer ====>>>>>', facultyIdContainer);
                            const facultyDataContainerArray = [(facultyIdContainer[facultyIdContainer.length - 1])];
                            facultyDataContainerArray.push({ 'externalEmpList': externalFacultyDetails });

                            const facultyDataContainer = JSON.stringify(facultyDataContainerArray);
                            console.log('facultyDataContainer ===>>>>', facultyDataContainer)
                            updatedPatentData.append('facultyDataContainer', facultyDataContainer);
                        }


                        function enternalFacultyDropDownList() {
                            employeeList.classList.remove('d-none');
                            authorDetails.classList.add('d-none');
                            document.getElementById('name-class').classList.add('d-none');
                            document.getElementById('dsg-class').classList.add('d-none');
                            document.getElementById('id-class').classList.add('d-none');
                            document.getElementById('address-class').classList.add('d-none');
                            document.getElementById('add-btn').classList.add('d-none');

                            document.getElementById('name-class-upd').classList.add('d-none');
                            document.getElementById('dsg-class-upd').classList.add('d-none');
                            document.getElementById('id-class-upd').classList.add('d-none');
                            document.getElementById('address-class-upd').classList.add('d-none');
                            document.getElementById('add-btn-upd').classList.add('d-none');

                            document.getElementById('externalfacultyTable').classList.add('d-none')
                        }

                        function externalFacultyDetails() {
                            console.log('clickeddddd external')
                            employeeList.classList.add('d-none');
                            addMoreDetailsButton.classList.add('d-none');
                            employeeList.classList.add('d-none');
                            // document.querySelector('.enternal-type').classList.add('d-none');
                            document.getElementById('name-class').classList.remove('d-none')
                            document.getElementById('dsg-class').classList.remove('d-none')
                            document.getElementById('id-class').classList.remove('d-none')
                            document.getElementById('address-class').classList.remove('d-none');
                            document.getElementById('add-btn').classList.remove('d-none')
                        }

                        // making d-none external faculty
                        enternalFacultyType.addEventListener('click', enternalFacultyDropDownList)
                        //making d-none internal faculty
                        externalFacultyType.addEventListener('click', externalFacultyDetails)

                        $("#patent-submisson-list").DataTable({

                            "pageLength": 5,
                            "lengthMenu": [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
                        })


                        document.querySelector('#uploadNewSupportDocument').addEventListener('click', function (e) {

                            let is_checked = document.querySelector('#uploadNewSupportDocument').checked;
                            console.log("is_checked :", is_checked);
                            if (is_checked) {
                                document.querySelector('#patent-file').classList.remove('d-none');
                            } else {
                                document.querySelector('#patent-file').classList.add('d-none');
                            }
                        });


                        document.getElementById('is-external-update').addEventListener('click', () => {
                            let is_checked = document.getElementById('is-external-update');
                            console.log('check box checked')

                            if (is_checked.checked) {
                                document.getElementById('externalfacultyTable').classList.remove('d-none')
                                document.getElementById('name-class-upd').classList.remove('d-none');
                                document.getElementById('dsg-class-upd').classList.remove('d-none');
                                document.getElementById('id-class-upd').classList.remove('d-none');
                                document.getElementById('address-class-upd').classList.remove('d-none');
                                document.getElementById('add-btn-upd').classList.remove('d-none');
                            } else {
                                document.getElementById('externalfacultyTable').classList.add('d-none')
                                document.getElementById('faculty-table-list-upd').classList.add('d-none');

                            }
                        })


                        document.getElementById('headerClose').addEventListener('click', () => {
                            document.location.reload();
                        })

                        document.getElementById('footerClose').addEventListener('click', () => {
                            document.location.reload();
                        })

                    </script>
                    <!-- footer section -->
                    <!-- <script src="<%- BASE_URL %>js/pagination.js"></script> -->
                    <%- include('./partials/footer') %>
                        <%- include('./partials/footer-end') %>