<%- include('./partials/head') %>
<!-- inline css -->
<style>
  .chronical-modal{
  width: 100%;
}

.modal-dialog {
    margin-left: 12rem !important;
}
.input-class{
  border-radius: 10px;
  /* border: none; */
}


.button-container {
    display: flex;
    flex-wrap: wrap; /* Allow buttons to wrap to the next line if needed */
    justify-content: space-between;
    width: 100%;
    background-color: white;
}

.editor-btn {
    flex-grow: 1;
    margin-right: 5px;
    margin-bottom: 10px; /* Adjust margin as needed */
    min-width: 0;
    background-color: #5ca4ea; /* Allow buttons to shrink if necessary */
}

.editor-btn:hover {
  transform: scale(1.01);
    /* box-shadow: rgb(99 99 99 / 20%) 0px 2px 8px 0px; */
    /* background: #ad0000; */
    background: #ad0000;
    color: #fff !important;/* Change background color to red on hover */
}

/* Media query for smaller screens */
@media (max-width: 768px) {
    .editor-btn {
        flex-basis: calc(50% - 5px); /* Two buttons per row, accounting for margins */
    }
}

/* Media query for even smaller screens */
@media (max-width: 480px) {
    .editor-btn {
        flex-basis: 100%; /* Each button takes up full width */
    }
}
</style>

<%- include('./partials/header') %>
<!-- This is left sidebar  -->
<%- include('./partials/left-sidebar') %>
<!-- Navbar section -->
<main class="main" id="main-content">
    <div class="base-section coustom-section">
      <div class="errorHtml"></div>
      <div class="breadcrumbs-container">
          <ul class="breadcrumb">
              <li class="breadcrumb-link">
                  <a href="<%- BASE_URL %>dashboard"> Dashboard </a>
              </li>
              <li class="breadcrumb-link">Chronicle Edition</li>
          </ul>
      </div>
      <div class="button-container">
        <button id="vc-modal-data" class="btn btn-primary editor-btn insert-data chronicle-edition-add-modal" data-toggle="modal" data-target="#vc-modal">Vc Office Editor</button>
        <button id="research-add-modal" class="btn btn-primary editor-btn insert-data chronicle-edition-add-modal" data-toggle="modal" data-target="#research-modal"> Research Paper Editor</button>
        <button id="meeting-add-modal" class="btn btn-primary editor-btn insert-data chronicle-edition-add-modal" data-toggle="modal" data-target="#meeting-modal">Meeting stackholders</button>
        <button id="branding-add-modal" class="btn btn-primary editor-btn insert-data chronicle-edition-add-modal" data-toggle="modal" data-target="#branding-modal">Branding</button>
      </div>
      
      <div class="">
        <div class="table-card-header text-uppercase d-flex align-items-center justify-content-between">
            <div>
                <h5 class="pl-2">CHRONICLE EDITION </h5>
            </div>
            <!-- <div class="">
                <button style="text-align: end;" id="chronicle-edition-add-modal" type="button" class="btn btn-primary add-modal" data-toggle="modal"
                    data-target="#chronicle-edition-modal">
                    <i  class="fas fa-plus plus"></i></button>
                </button>
            </div> -->
        </div>
        <div class="card-body table-responsive">
            <div class="d-flex justify-content-between">
                <div>
                    <label>Show Entries</label>
                    <select class="form-select" id="changeEntry">
                        <option value="5">5</option>
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                        <option value="150">150</option>
                        <option value="200">200</option>
                        <option value="250">250</option>
                        <option value="300">300</option>
                        <option value="350">350</option>
                        <option value="400">400</option>
                        <option value="500">500</option>
                        <option value="800">800</option>
                        <option value="1000">1000</option>
                    </select>
                </div>
                <div>
                    <div class="table-searchbar-container">
                        <button type="button" id="searchBtn"><i class="fas fa-search"></i></button>
                        <input type="search" id="searchKeyword" placeholder="Enter keywords" class="table-searchbar">
                    </div>
                </div>
            </div>
            <table class="table custom-table research-pagination" id="chronicle-list">
              <thead>
                  <tr>
                      <th class="col-lg-1 text-start">#</th>
                      <th class="col-lg-1">Type</th>
                      <th class="col-lg-1">Created By</th>
                      <th class="col-lg-1">Created Date</th>
                      <th class="col-lg-1">Updated Date</th>
                      <th class="col-lg-1">Action</th>
                  </tr>
              </thead>
              <tbody>
                  <% for (let i = 0; i < chronicleEditorData.length; i++) { %>
                      <tr class="row" data-chronicle-id="<%= chronicleEditorData[i][0] %>" editor-data-content="<%= chronicleEditorData[i][5] %>">
                          <td class="col-lg-1 text-start"><%= i + 1 %></td>
                          <td  class="col-lg-1 head-text editor-type"><%= chronicleEditorData[i][1] %></td>
                          <td class="col-lg-1 head-text created-by"><%= chronicleEditorData[i][2] %></td>
                          <td class="col-lg-1 head-text created-date"><%= chronicleEditorData[i][3] %></td>
                          <td class="col-lg-1 head-text updated-at"><%= chronicleEditorData[i][4] %></td>
                          <td class="col-lg-1">
                              <label class="view" data-chronicle-id="<%= chronicleEditorData[i][0] %>">
                                  <i class="fa-solid fa-eye view text-danger" data-chronicle-id="<%= chronicleEditorData[i][0] %>"></i>
                              </label>
                              <label class="edit" data-chronicle-id="<%= chronicleEditorData[i][0] %>">
                                  <i class="fa fa-edit edit text-danger" data-chronicle-id="<%= chronicleEditorData[i][0] %>"></i>
                              </label>
                              <label class="delete" data-chronicle-id="<%= chronicleEditorData[i][0] %>">
                                  <i class="fa-solid fa-trash delete text-danger" data-chronicle-id="<%= chronicleEditorData[i][0] %>"></i>
                              </label>
                          </td>
                      </tr>
                  <% } %>
              </tbody>
          </table>  
          <div class="d-flex justify-content-between">
                <div>
                    <label >Total entries : <span id="total-entries"><%- totalRowCount %></span> 
                    </label>
                </div>
                <div>
                    <button id="prevBtn" class="btn btn-primary">Previous</button>
                    <button id="nextBtn" class="btn btn-primary">Next</button>
                    <p id="pagination" class="pagination-search"></p>
                </div>
            </div>
        </div>
    </div>
    </div>
  </main>

  <!-- vc office modal form -->
<div class="modal fade fullscreen chronical-modal-editor" id="vc-modal" tabindex="-1" role="dialog"
  aria-labelledby="vc-modal" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content validate-input" style="width: 78vw !important;">
      <div class="modal-header">
        <h5 style="padding-left: 40%;" class="modal-title" id="chronicle-vc-head"> From Vice Chancellor Desk </h5>
        <div type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span type="button" aria-hidden="true"><i class="fas fa-times"></i></span>
        </div>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="form-group card">
            <label for="" class="card-header text-center fs-5 fw-normal">
                Date of writing Chronicle Edition
                <input class="input-class chronicle-date" id="vc-content-date" type="date"   data-validate="isEmpty,isExist"  data-err-msg="Date is required." required>
            </label>
          </div>
          <div class="text-center fs-4">
            From Vice Chancellor's Desk #1
          </div>
          <div class="card">
              <div id="vc-data-editor" class="editor-validation" data-validate="isEmpty,isExist"  data-err-msg="Editor should not be empty." required></div>
          </div>
        </div>
      </div>
      <!-- Footer section -->
      <div class="modal-footer">
            <button id="submit-vc-data" type="button" class="btn btn-primary insert-chronicle-content submit-btn d-none">Submit</button>
            <button id="update-vc-data"  type="button" class="btn btn-primary update-btn vc-data update-chronicle-content d-none">Update</button>
            <button type="button" class="btn btn-danger" data-dismiss="modal" id="close-btn">close</button>
      </div>
    </div>
  </div>
</div>

 <!-- reseacrh modal form -->
 <div class="modal fade fullscreen chronical-modal-editor" id="research-modal" tabindex="-1" role="dialog"
 aria-labelledby="research-modal" aria-hidden="true">
 <div class="modal-dialog modal-lg" role="document">
   <div class="modal-content validate-input" style="width: 78vw !important;">
     <div class="modal-header">
       <h5 style="padding-left: 40%;" class="modal-title" id="chronicle-research-head"> Research </h5>
       <div type="button" class="close" data-dismiss="modal" aria-label="Close">
         <span type="button" aria-hidden="true"><i class="fas fa-times"></i></span>
       </div>
      </div>
      <div class="modal-body">
      <div class="row">
        <div class="form-group card">
          <label for="" class="card-header text-center fs-5 fw-normal">
            Date of Writing Chronicle Edition
            <input class="input-class chronicle-date" id="research-content-date" type="date" data-validate="isEmpty,isExist"
              data-err-msg="Date is required." required>
          </label>
        </div>
        <div class="text-center fs-4">
          Research #2
        </div>
        <div class="card">
          <div id="research-data-editor"></div>
        </div>
      </div>
      </div>
     <!-- Footer section -->
    <div class="modal-footer">
        <button id="submit-research-data" type="button" class="btn btn-primary submit-btn insert-chronicle-content d-none">Submit</button>
        <button id="update-research-data" type="button" class="btn btn-primary update-chronicle update-btn update-chronicle-content d-none">Update</button>
        <button type="button" class="btn btn-danger" data-dismiss="modal" id="close-btn">close</button>
    </div>
   </div>
 </div>
</div>


 <!-- meeting modal form -->
 <div class="modal fade fullscreen chronical-modal-editor" id="meeting-modal" tabindex="-1" role="dialog"
 aria-labelledby="meeting-modal" aria-hidden="true">
 <div class="modal-dialog modal-lg" role="document">
   <div class="modal-content validate-input" style="width: 78vw !important;">
     <div class="modal-header">
       <h5 style="padding-left: 40%;" class="modal-title" id="chronicle-meeting-head"> Meeting stackholders </h5>
       <div type="button" class="close" data-dismiss="modal" aria-label="Close">
         <span type="button" aria-hidden="true"><i class="fas fa-times"></i></span>
       </div>
     </div>
     <div class="modal-body">
       <div class="row">
        <div class="form-group card">
          <label for=""  class="card-header text-center fs-5 fw-normal">
              Date of Writing Chronicle Edition
              <input class="input-class chronicle-date" id="meeting-content-date" type="date"   data-validate="isEmpty,isExist"  data-err-msg="Date is required." required>
          </label>
        </div>
        <div class="text-center fs-4">
          Meeting Stackholders #3
        </div>
        <div class="card">
          <div id="meeting-stackholders-data-editor"></div>
        </div>
        </div>
      </div>
     <!-- Footer section -->
     <div class="modal-footer">
      <button id="submit-meeting-stackholders-data" type="button" class="btn btn-primary submit-btn insert-chronicle-content d-none">Submit</button>
      <button id="update-meeting-stackholders-data" type="button" class="btn btn-primary  update-chronicle update-btn update-chronicle-content d-none">Update</button>
      <button type="button" class="btn btn-danger" data-dismiss="modal" id="close-btn">close</button> 
    </div>
   </div>
 </div>
</div>

 <!-- branding modal form -->
 <div class="modal fade fullscreen chronical-modal-editor" id="branding-modal" tabindex="-1" role="dialog"
 aria-labelledby="branding-modal" aria-hidden="true">
 <div class="modal-dialog modal-lg" role="document">
   <div class="modal-content validate-input" style="width: 78vw !important;">
     <div class="modal-header">
       <h5 style="padding-left: 40%;" class="modal-title" id="chronicle-branding-head"> Chronicle Edition </h5>
       <div type="button" class="close" data-dismiss="modal" aria-label="Close">
         <span type="button" aria-hidden="true"><i class="fas fa-times"></i></span>
       </div>
     </div>
    <div class="modal-body">
      <div class="row">
        <div class="form-group card">
          <label for="" class="card-header text-center fs-5 fw-normal">
            Date of Writing Chronicle Edition
            <input class="input-class chronicle-date" id="branding-content-date" type="date" data-validate="isEmpty,isExist"
              data-err-msg="Date is required." required>
          </label>
        </div>
        <div class="text-center fs-4">
          Branding #4
        </div>
        <div class="card">
          <div id="advertising-data-editor"></div>
        </div>
      </div>
    </div>
     <!-- Footer section -->
     <div class="modal-footer">
      <button id="submit-advertising-data" type="button" class="btn btn-primary submit-btn insert-chronicle-content d-none">Submit</button>
      <button id="update-advertising-data" type="button" class="btn btn-primary update-chronicle update-btn update-chronicle-content d-none">Update</button>
      <button  type="button" class="btn btn-danger" data-dismiss="modal" id="close-btn">close</button>
    </div>
   </div>
 </div>
</div>





  <script src="https://cdn.ckeditor.com/ckeditor5/41.1.0/super-build/ckeditor.js"></script>
  <!-- <script src="https://cdn.ckeditor.com/ckeditor5/41.1.0/classic/ckeditor.js"></script> -->

  <script>
      const totalEntriess = document.getElementById('total-entries');
      let innerValue = totalEntriess.innerText;
      console.log('innerValue ===>>>', innerValue);
      let indexValue = parseInt(innerValue, 10);
      const chronicleTableList = document.getElementById('chronicle-list');
      const chronicleModalForm = document.querySelector('.chronical-modal-editor');
      let chronicleId, editorDataToBeUpdate;
    // making visuals of submit and update button
      // for (let i = 0; i <= editorModalContainer.length - 1; i++) {
      //     console.log('my ids ===>>>', editorModalContainer[i])
      //     const dataListner = editorModalContainer[i]
      //     if(dataListner){
      //       dataListner.addEventListener('click', (event) => {
      //       if (event.target.classList.contains('insert-data')) {
      //         submitBtn.classList.remove('d-none');
      //         updateBtn.classList.add('d-none');
      //       }
      //     })
      //     }

      // }
      const vcModalContent = document.getElementById('vc-modal-data');
      const researchModalContent = document.getElementById('research-add-modal');
      const meetingModalContent = document.getElementById('meeting-add-modal');
      const brandingModalContent = document.getElementById('branding-add-modal');
    // modal to be add
      const chronicleAddModalContainer = [
        vcModalContent,
        researchModalContent,
        meetingModalContent,
        brandingModalContent
      ];

      // submit btn for insert data
        const submitVcDataBtn = document.getElementById('submit-vc-data');
        const submitResearchDataBtn = document.getElementById('submit-research-data');
        const submitMeetingDataBtn = document.getElementById('submit-meeting-stackholders-data');
        const submitBrandingDataBtn = document.getElementById('submit-advertising-data');
      // submit button container
        const submitBtnContainer = [
          submitVcDataBtn,
          submitResearchDataBtn,
          submitMeetingDataBtn,
          submitBrandingDataBtn
        ];

      // update btn for update data
        const updateVcDataBtn = document.getElementById('update-vc-data');
        const updateResearchBtn = document.getElementById('update-research-data');
        const updateMeetingDataBtn = document.getElementById('update-meeting-stackholders-data');
        const updateBrandingDataBtn = document.getElementById('update-advertising-data');
        // update btn container
        const updateBtnContainer = [
          updateVcDataBtn,
          updateResearchBtn,
          updateMeetingDataBtn,
          updateBrandingDataBtn
      ];

        const editorIdContainerArray = [
      "#vc-data-editor",
      "#advertising-data-editor",
      "#research-data-editor",
      "#meeting-stackholders-data-editor",
    ];

      // Object to store CKEditor instances
        const editorInstances = {};

       // Initialize CKEditor for each ID
        Promise.all(editorIdContainerArray.map(id => {
            // Extract the ID without the "#" character
            const cleanId = id.substring(1);
            return CKEDITOR.ClassicEditor.create(document.getElementById(cleanId), {
              alignment: {
                options: ['left', 'right']
              },
              toolbar: {
                items: [
                  'exportPDF', 'exportWord', '|',
                  'findAndReplace', 'selectAll', '|',
                  'heading', '|',
                  'bold', 'italic', 'strikethrough', 'underline', 'code', 'subscript', 'superscript', 'removeFormat', '|',
                  'bulletedList', 'numberedList', 'todoList', '|',
                  'outdent', 'indent', '|',
                  'undo', 'redo',
                  '-',
                  'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'highlight', '|',
                  'alignment', '|',
                  'link', 'uploadImage', 'blockQuote', 'insertTable', 'mediaEmbed', 'codeBlock', 'htmlEmbed', '|',
                  'specialCharacters', 'horizontalLine', 'pageBreak', '|',
                  'textPartLanguage', '|',
                  'sourceEditing',
                ],
                contentsCss: [
                  'styles.css'
                ],
                shouldNotGroupWhenFull: true
              },
              list: {
                properties: {
                  styles: true,
                  startIndex: true,
                  reversed: true
                }
              },
              heading: {
                options: [
                  { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                  { model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },
                  { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },
                  { model: 'heading3', view: 'h3', title: 'Heading 3', class: 'ck-heading_heading3' },
                  { model: 'heading4', view: 'h4', title: 'Heading 4', class: 'ck-heading_heading4' },
                  { model: 'heading5', view: 'h5', title: 'Heading 5', class: 'ck-heading_heading5' },
                  { model: 'heading6', view: 'h6', title: 'Heading 6', class: 'ck-heading_heading6' }
                ]
              },
              placeholder: 'Welcome to CKEditor 5!',
              class: "text-start",
              fontFamily: {
                options: [
                  'default',
                  'Arial, Helvetica, sans-serif',
                  'Courier New, Courier, monospace',
                  'Georgia, serif',
                  'Lucida Sans Unicode, Lucida Grande, sans-serif',
                  'Tahoma, Geneva, sans-serif',
                  'Times New Roman, Times, serif',
                  'Trebuchet MS, Helvetica, sans-serif',
                  'Verdana, Geneva, sans-serif'
                ],
                supportAllValues: true
              },
              fontSize: {
                options: [10, 12, 14, 'default', 18, 20, 22],
                supportAllValues: true
              },
              htmlSupport: {
                allow: [
                  {
                    name: /.*/,
                    attributes: true,
                    classes: true,
                    styles: true
                  }
                ]
              },
              htmlEmbed: {
                showPreviews: true
              },
              link: {
                decorators: {
                  addTargetToExternalLinks: true,
                  defaultProtocol: 'https://',
                  toggleDownloadable: {
                    mode: 'manual',
                    label: 'Downloadable',
                    attributes: {
                      download: 'file'
                    }
                  }
                }
              },
              mention: {
                feeds: [
                  {
                    marker: '@',
                    feed: [
                      '@apple', '@bears', '@brownie', '@cake', '@cake', '@candy', '@canes', '@chocolate', '@cookie', '@cotton', '@cream',
                      '@cupcake', '@danish', '@donut', '@dragée', '@fruitcake', '@gingerbread', '@gummi', '@ice', '@jelly-o',
                      '@liquorice', '@macaroon', '@marzipan', '@oat', '@pie', '@plum', '@pudding', '@sesame', '@snaps', '@soufflé',
                      '@sugar', '@sweet', '@topping', '@wafer'
                    ],
                    minimumCharacters: 1
                  }
                ]
              },
              removePlugins: [
                'AIAssistant',
                'CKBox',
                // 'CKFinder',
                'EasyImage',
                'RealTimeCollaborativeComments',
                'RealTimeCollaborativeTrackChanges',
                'RealTimeCollaborativeRevisionHistory',
                'PresenceList',
                'Comments',
                'TrackChanges',
                'TrackChangesData',
                'RevisionHistory',
                'Pagination',
                'WProofreader',
                'MathType',
                'SlashCommand',
                'Template',
                'DocumentOutline',
                'FormatPainter',
                'TableOfContents',
                'PasteFromOfficeEnhanced',
                'CaseChange'
              ]
            })
              .then(editor => {
                console.log(`CKEditor initialized successfully for ${id}`);
                // Store the editor instance using its ID
                editorInstances[id] = editor;

                // const currentDate = getCurrentDate();
                // editor.setData(`<p>Date: ${currentDate}</p>`);

                // // Adding a button with an icon to the toolbar
                // editor.ui.getEditableElement().parentElement.insertBefore(
                //   editor.ui.view.toolbar.element,
                //   editor.ui.getEditableElement()
                // );

                // // Create a button element
                // const buttonElement = document.createElement('button');
                // buttonElement.classList.add('ck', 'ck-button', 'ck-off');
                // buttonElement.type = 'button';
                // buttonElement.tabIndex = '-1';

                // // Add ARIA attributes
                // buttonElement.setAttribute('aria-labelledby', 'ck-editor__aria-label_e0d2de3a778d1fd978e3d5ef78eb2a327');
                // buttonElement.setAttribute('aria-pressed', 'false');
                // buttonElement.setAttribute('data-cke-tooltip-text', 'Time&Date');
                // buttonElement.setAttribute('data-cke-tooltip-position', 's');

                // // Create an imgElement element
                // const imgElement = document.createElement('img');
                // imgElement.src = '<%- BASE_URL %>icons/timestamp.png';
                // imgElement.setAttribute('class', 'ck ck-icon ck-reset_all-excluded ck-icon_inherit-color ck-button__icon');
                // imgElement.setAttribute('viewBox', '0 0 20 20');

                // // Create the path for the SVG icon
                // const pathElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
                // pathElement.setAttribute('d', 'M7 16.4c-.8-.4-1.5-.9-2.2-1.5a.6.6 0 0 1-.2-.5l.3-.6h1c1 1.2 2.1 1.7 3.7 1.7 1 0 1.8-.3 2.3-.6.6-.4.6-1.2.6-1.3.2-1.2-.9-2.1-.9-2.1h2.1c.3.7.4 1.2.4 1.7v.8l-.6 1.2c-.6.8-1.1 1-1.6 1.2a6 6 0 0 1-2.4.6c-1 0-1.8-.3-2.5-.6zM6.8 9 6 8.3c-.4-.5-.5-.8-.5-1.6 0-.7.1-1.3.5-1.8.4-.6 1-1 1.6-1.3a6.3 6.3 0 0 1 4.7 0 4 4 0 0 1 1.7 1l.3.7c0 .1.2.4-.2.7-.4.2-.9.1-1 0a3 3 0 0 0-1.2-1c-.4-.2-1-.3-2-.4-.7 0-1.4.2-2 .6-.8.6-1 .8-1 1.5 0 .8.5 1 1.2 1.5.6.4 1.1.7 1.9 1H6.8z');

                // // Append the pathElement to the imgElement element
                // imgElement.appendChild(pathElement);

                // // Append the imgElement to the button element
                // buttonElement.appendChild(imgElement);

                // // span element for the text content
                // const spanElement = document.createElement('span');
                // spanElement.classList.add('ck', 'ck-button__label');
                // spanElement.textContent = 'Time&Date';

                // // append the text content to the button element
                // buttonElement.appendChild(spanElement);

                // // add time and date property
                // buttonElement.addEventListener('click', function () {
                //   insertDateTime(editor); // Call your function when the button is clicked
                // });

                // // Append the button to wherever you want it in the document
                // editor.ui.view.toolbar.element.appendChild(buttonElement);


              })
              .catch(error => {
                console.error(`Error initializing CKEditor for ${id}:`, error);
              });
          }));
        

        // diplaying and hiding sumit and updatebtn
        for (let i = 0; i <= chronicleAddModalContainer.length - 1; i++) {
          const chronicleContentEditor = chronicleAddModalContainer[i];
          if (chronicleContentEditor) {
            chronicleContentEditor.addEventListener('click', (event) => {
              if (event.target.tagName === 'BUTTON' && event.target.classList.contains('chronicle-edition-add-modal')) {
                const submitBtn = submitBtnContainer[i];
                console.log('submitBtn ===>>>', submitBtn)
                const updateBtn = updateBtnContainer[i];
                submitBtn.classList.remove('d-none');
                updateBtn.classList.add('d-none');
                const vcEditor = editorInstances["#vc-data-editor"];
                const researchEditor = editorInstances["#advertising-data-editor"];
                const meetingEditor = editorInstances["#research-data-editor"];
                const brandingeditor = editorInstances["#meeting-stackholders-data-editor"];
                // editor.setData('');
                // making editor empty
                vcEditor.setData('');
                researchEditor.setData('');
                meetingEditor.setData('');
                brandingeditor.setData('');
              }
            })
          }
        };

        // Function for inserting Chronicle Edition Data 
        const insertChronicleEdition = async (url, editorId) => {
            const editor = editorInstances[editorId];
            console.log('editorId ===>>>', editorId)
            console.log('editor ==>>>', editor)
            if (editor) {
              const chronicleEditorData = editor.getData();
              console.log('chronicleEditorData ===>>>>', chronicleEditorData)
              if (chronicleEditorData) {
                const chronicleModalEditor = document.querySelector('.chronical-modal-editor');
                const dateIdContainerArray = [
                  '#vc-content-date',
                  '#research-content-date',
                  '#meeting-content-date',
                  '#branding-content-date'
                ];

                for (let i in dateIdContainerArray) {
                  const dateId = dateIdContainerArray[i]
                  console.log('dateId ===>>>', dateId);
                  const chronicleDateElement = document.querySelector(dateId);
                  const chronicleDate = chronicleDateElement.value;
                  console.log('chronicleDate ====>>>', chronicleDate)
                  if (chronicleDate) {
                    const editorData = {
                      chronicleEditorData: chronicleEditorData,
                      chronicleDate: chronicleDate
                    };

                    await fetch(url, {
                      method: 'POST',
                      headers: {
                        'content-type': 'application/json'
                      },
                      body: JSON.stringify(editorData)
                    })
                      .then(response => {
                        if (response.ok) {
                          return response.json()
                        }
                      })
                      .then(data => {
                        if (data.status === 'done') {
                          const newChronicleRow = document.createElement('tr');
                          newChronicleRow.setAttribute('editor-data-content', data.chronicleEditorData);
                          newChronicleRow.innerHTML = `
                      <td class="col-lg-1 text-start">${indexValue += 1}</td>
                              <td  class="col-lg-1 head-text editor-type">${data.editorType}</td>
                              <td class="col-lg-1 head-text created-by"></td>
                              <td class="col-lg-1 head-text created-date">${data.chronicleDate}</td>
                              <td class="col-lg-1 head-text updated-at">${data.updatedAt}</td>
                              <td class="col-lg-1">
                                 
                                  <label class="view"  data-chronicle-id="${data.chronicleId}"> <i data-chronicle-id="${data.chronicleId}" class="fa-solid fa-eye view text-danger"></i></label>
                                  <label class="edit"  data-chronicle-id="${data.chronicleId}"> <i data-chronicle-id="${data.chronicleId}" class="fa fa-edit edit text-danger"></i></label>
                                <label class="delete" data-chronicle-id="${data.chronicleId}"> <i data-chronicle-id="${data.chronicleId}" class="fa-solid fa-trash delete text-danger"></i></label>
                              </td>
                      `;
                          chronicleTableList.appendChild(newChronicleRow);
                          console.log('Server response:', data);
                          alert('Content Inserted  SuccessFully');
                          $('#vc-modal').modal('hide');
                          $('#research-modal').modal('hide');
                          $('#meeting-modal').modal('hide');
                          $('#branding-modal').modal('hide');
                        }
                        else {
                          alert(`${data.massage}`)
                        }

                      })

                      .catch(error => {
                        console.error('Error sending data to server:', error);
                      });
                    break
                  }

                }

              } else {
                console.error(`CKEditor Should Not Be Empty. ${Error}`);
                alert('CKEditor Should Not Be Empty.')
              }
            } else {
              console.error(`CKEditor instance not found for ${editorId}`);
            }
          }

       // for insert vc editor content submit button
        submitVcDataBtn.addEventListener('click', async (event) => {
            console.log('clikeddd');
            const button = event.target.closest('button');
            const isValid = validateRequiredFormFields(document.getElementById('submit-vc-data'));
            if (isValid) {
              if (button && button.classList.contains('insert-chronicle-content')) {
                const buttonId = button.id;
                const modifiedEditorId = `#${buttonId}-editor`;
                const editorId = modifiedEditorId.replace('submit-', '');
                console.log('Modified editorId:', modifiedEditorId);
                console.log('editorId ===>>>', editorId);
                await insertChronicleEdition(`<%- BASE_URL %>chronicle-edition/${buttonId}/insert`, editorId);
              }
            }
            else {
              alert('Validation Failed');
            }
          });

        // insert research editor content submit button
        submitResearchDataBtn.addEventListener('click', async (event) => {
            console.log('clikeddd');
            const button = event.target.closest('button');
            const isValid = validateRequiredFormFields(document.getElementById('submit-research-data'));
            if (isValid) {
              if (button && button.classList.contains('insert-chronicle-content')) {
                const buttonId = button.id;
                const modifiedEditorId = `#${buttonId}-editor`;
                const editorId = modifiedEditorId.replace('submit-', '');
                console.log('Modified editorId:', modifiedEditorId);
                console.log('editorId ===>>>', editorId);
                await insertChronicleEdition(`<%- BASE_URL %>chronicle-edition/${buttonId}/insert`, editorId);
              }
            }
            else {
              alert('Validation Failed');
            }
          });

        //insert meeting editor content submit button
        submitMeetingDataBtn.addEventListener('click', async (event) => {
            console.log('clikeddd');
            const button = event.target.closest('button');
            const isValid = validateRequiredFormFields(document.getElementById('submit-meeting-stackholders-data'));
            if (isValid) {
              if (button && button.classList.contains('insert-chronicle-content')) {
                const buttonId = button.id;
                const modifiedEditorId = `#${buttonId}-editor`;
                const editorId = modifiedEditorId.replace('submit-', '');
                console.log('Modified editorId:', modifiedEditorId);
                console.log('editorId ===>>>', editorId);
                await insertChronicleEdition(`<%- BASE_URL %>chronicle-edition/${buttonId}/insert`, editorId);
              }
            }
            else {
              alert('Validation Failed');
            }
          });

        //insert branding editor content data submit button
        submitBrandingDataBtn.addEventListener('click', async (event) => {
            console.log('clikeddd');
            const button = event.target.closest('button');
            const isValid = validateRequiredFormFields(document.getElementById('submit-advertising-data'));
            if (isValid) {
              if (button && button.classList.contains('insert-chronicle-content')) {
                const buttonId = button.id;
                const modifiedEditorId = `#${buttonId}-editor`;
                const editorId = modifiedEditorId.replace('submit-', '');
                console.log('Modified editorId:', modifiedEditorId);
                console.log('editorId ===>>>', editorId);
                await insertChronicleEdition(`<%- BASE_URL %>chronicle-edition/${buttonId}/insert`, editorId);
              }
            }
            else {
              alert('Validation Failed');
            }
          });

        // chronicle record content table list
        chronicleTableList.addEventListener('click', (event) => {
            // view  the content based on editor id  
            if (event.target.classList.contains('view')) {
              console.log('clicked to view class');
              const editorDataToBeUpdate = event.target.closest('tr');
              const editorType = editorDataToBeUpdate.querySelector('.editor-type');
              const chronicleId = event.target.getAttribute('data-chronicle-id');
              console.log('chronicleId ==>>', chronicleId);
              console.log('editorDataToBeUpdate ====>>>>', editorDataToBeUpdate);
              console.log('editorType ===>>>', editorType.innerText);
              // for From Vice Chancellor's Desk
              if (editorType.innerText === "From Vice Chancellor's Desk") {
                const editorText = 'vcOfficeData';
                window.location.href = `<%- BASE_URL %>chronicle-page/textdata/${editorText}/id/${chronicleId}`;
              }
              // Meeting Stakeholders Aspiration
              if (editorType.innerText === "Meeting Stakeholders Aspiration") {
                const editorText = 'meetingData';
                window.location.href = `<%- BASE_URL %>chronicle-page/textdata/${editorText}/id/${chronicleId}`;
              }
              // for Research
              if (editorType.innerText === "Research") {
                const editorText = 'researchData';
                window.location.href = `<%- BASE_URL %>chronicle-page/textdata/${editorText}/id/${chronicleId}`;
              }
              // Branding
              if (editorType.innerText === "Branding") {
                const editorText = 'brandingData';
                window.location.href = `<%- BASE_URL %>chronicle-page/textdata/${editorText}/id/${chronicleId}`;
              }

            }

            // for update button
            if (event.target.classList.contains('edit')) {
              console.log('edit button clicked')
              updateBtnContainer.forEach(btn => {
                btn.classList.remove('d-none');
              });

              submitBtnContainer.forEach(btn => {
                btn.classList.add('d-none');
              });

              editorDataToBeUpdate = event.target.closest('tr');
              console.log('editorDataToBeUpdate ===>>>', editorDataToBeUpdate)
              const editorType = editorDataToBeUpdate.querySelector('.editor-type');
              console.log('editorType ===>>>', editorType)
              const editorTypeCategory = editorType.innerText;
              console.log('editorTypeCategory ====>>>', editorTypeCategory);
              chronicleId = event.target.getAttribute('data-chronicle-id');
              console.log('chronicleId ===>>>', chronicleId);
              //getting content value
              const editorDataContent = editorDataToBeUpdate.getAttribute('editor-data-content');

              // Vc office data  disply stored value
              console.log('editorDataContent ===>>>', editorDataContent);
              if (editorTypeCategory === "From Vice Chancellor's Desk") {
                const vcEditor = editorInstances['#vc-data-editor'];
                console.log('vcEditor ===>>>', vcEditor);
                if (vcEditor) {
                  vcEditor.setData(editorDataContent);
                  const vcDate = document.querySelector('#vc-content-date');
                  const vcDataDate = editorDataToBeUpdate.querySelector('.created-date');
                  const dateStr = vcDataDate.innerText;
                  vcDate.value = formatDateForInput(dateStr);
                  console.log('vcDataDate.textContent ====>>>', vcDate.value);
                  $('#vc-modal').modal('show');
                }
              }

              // research data  disply stored value
              if (editorTypeCategory === "Research") {
                // for Research disply stored value
                const researchEditor = editorInstances['#research-data-editor'];
                if (researchEditor) {
                  researchEditor.setData(editorDataContent);
                  const researchDate = document.querySelector('#research-content-date');
                  const researchDataDate = editorDataToBeUpdate.querySelector('.created-date');
                  const dateStr = researchDataDate.innerText;
                  researchDate.value = formatDateForInput(dateStr);
                  console.log('researchDataDate.innerText ===>>>', researchDataDate.innerText);
                  $('#research-modal').modal('show');
                }
              }

              // meeting data disply stored value
              if (editorTypeCategory === "Meeting Stakeholders Aspiration") {
                // const modalId = document.getElementById('')
                const meetingEditor = editorInstances['#meeting-stackholders-data-editor'];
                if (meetingEditor) {
                  meetingEditor.setData(editorDataContent);
                  const meetingDate = document.querySelector('#meeting-content-date');
                  const meetingDataDate = editorDataToBeUpdate.querySelector('.created-date');
                  // meetingDate.value = meetingDataDate.innerText;
                  const dateStr = meetingDataDate.innerText;
                  meetingDate.value = formatDateForInput(dateStr);
                  console.log('meetingDataDate.innerText ===>>>', meetingDate.value);
                  $('#meeting-modal').modal('show');
                }
              }


              // branding data  disply stored value
              if (editorTypeCategory === "Branding") {
                // Branding disply stored value
                const brandingEditor = editorInstances['#advertising-data-editor'];
                if (brandingEditor) {
                  brandingEditor.setData(editorDataContent);
                  const brandingDate = document.getElementById('branding-content-date');
                  console.log('brandingDate ===>>>', brandingDate)
                  const brandingDataDate = editorDataToBeUpdate.querySelector('.created-date');
                  brandingDate.value = brandingDataDate.innerText;
                  const dateStr = brandingDataDate.innerText;
                  brandingDate.value = formatDateForInput(dateStr);
                  console.log('brandingDate.value ===>>>', brandingDate.value);
                  $('#branding-modal').modal('show');
                }
              }

            }

            //delete editor content based on id 
            if (event.target.classList.contains('delete')) {
              console.log('clickeddd');
              const rowToBeDeleted = event.target.closest('tr');
              console.log('rowToBeDeleted ====>>>>>', rowToBeDeleted);
              const chronicleId = rowToBeDeleted.getAttribute('data-chronicle-id');
              console.log('chronicleId ===>>>', chronicleId);
              const editorType = rowToBeDeleted.querySelector('.editor-type');
              console.log('editorType ===>>>', editorType);
              let editorTypeCategory;

              if (editorType.innerText === "From Vice Chancellor's Desk") {
                editorTypeCategory = "vcData";
                console.log('editorTypeCategory ===>>>', editorTypeCategory);
              } else if (editorType.innerText === "Meeting Stakeholders Aspiration") {
                editorTypeCategory = "meetingData";
              } else {
                editorTypeCategory = editorType.innerText;
              }

              console.log('editorTypeCategory ===>>', editorTypeCategory)

              const chronicleTableToBeDelete = {
                editorTypeCategory: editorTypeCategory,
                chronicleId: chronicleId
              }

              let confirmDelete = confirm(`Do you want to delete the ${editorTypeCategory}?`);
              if (!confirmDelete) {
                return;
              }

              fetch(`<%- BASE_URL %>chronicle-edition/${editorTypeCategory}/delete`, {
                method: 'POST',
                headers: {
                  'content-type': 'application/json'
                },
                body: JSON.stringify(chronicleTableToBeDelete)
              })
                .then((response) => {
                  if (response.ok) {
                    return response.json()
                  }
                })
                .then((data) => {
                  if (data.status === "done") {
                    console.log('data', data);
                    rowToBeDeleted.remove();
                    location.reload();
                  }
                })

            }
          });

        // api call for update editor content
        const updateChronicleData = async (url, editorId) => {
            const editor = editorInstances[editorId];
            console.log('editorId ===>>>', editorId)
            console.log('editor ==>>>', editor)
            if (editor) {
              const updatedChronicleEditorData = editor.getData();
              console.log('updatedChronicleEditorData ===>>>>', updatedChronicleEditorData);
              if (updatedChronicleEditorData) {
                const vcDate = document.getElementById('vc-content-date').value;
                const researchDate = document.getElementById('research-content-date').value;
                const meetingDate = document.getElementById('meeting-content-date').value;
                const brandingDate = document.getElementById('branding-content-date').value;
                console.log('vcDate ===>>', vcDate)
                let updatedChronicleDate;
                // check vc date
                if (vcDate) {
                  updatedChronicleDate = vcDate;
                }
                //check research date
                if (researchDate) {
                  updatedChronicleDate = researchDate;
                }
                //check meeting date
                if (meetingDate) {
                  updatedChronicleDate = meetingDate;
                }
                //check branding date
                if (brandingDate) {
                  updatedChronicleDate = brandingDate;
                }
                //  payload object 
                const updatedEditorData = {
                  chronicleId: chronicleId,
                  updatedChronicleEditorData: updatedChronicleEditorData,
                  updatedChronicleDate: updatedChronicleDate
                };
                console.log('updatedEditorData ===>>>', updatedEditorData)
                await fetch(url, {
                  method: 'POST',
                  headers: {
                    'content-type': 'application/json'
                  },
                  body: JSON.stringify(updatedEditorData)
                })
                  .then(response => {
                    if (response.ok) {
                      return response.json()
                    }
                  })
                  .then(data => {
                    if (data.status === 'done') {
                      console.log('Server response:', data);
                      editorDataToBeUpdate.querySelector('.created-date').innerText = data.chronicleDate;
                      editorDataToBeUpdate.setAttribute('editor-data-content', data.updatedChronicleEditorData);
                      editorDataToBeUpdate.querySelector('.updated-at').innerText = data.updatedAt;
                      alert('Content Updated Successfully');
                    }

                    $('#vc-modal').modal('hide');
                    $('#research-modal').modal('hide');
                    $('#meeting-modal').modal('hide');
                    $('#branding-modal').modal('hide');
                  })
                  .catch(error => {
                    console.error('Error sending data to server:', error);
                  });
              }
              else {
                console.error('CKEditor instance not available.', Error)
                alert('CKEditor instance not available.')
              }
            }
            else {
              console.error(`CKEditor instance not found for ${editorId}`);
            }


          };
        
        //EventListener for update vc  editor content
        updateVcDataBtn.addEventListener('click', async (event) => {
            console.log('clikeddd');
            const button = event.target.closest('button');
            const isValid = validateRequiredFormFields(document.getElementById('update-vc-data'));
            if (isValid) {
              if (button && button.classList.contains('update-chronicle-content')) {
                const buttonId = button.id;
                console.log('buttonId ===>>>', buttonId)
                const modifiedEditorId = `#${buttonId}-editor`;
                const editorId = modifiedEditorId.replace('update-', '');
                console.log('Modified editorId:', modifiedEditorId);
                console.log('editorId ===>>>', editorId);

                await updateChronicleData(`<%- BASE_URL %>chronicle-edition/${buttonId}/update`, editorId);
              }
            }
            else {
              alert('Validation Failed');
            }
          });

          //EventListener for update meeting content
        updateMeetingDataBtn.addEventListener('click', async (event) => {
              console.log('clikeddd');
              const button = event.target.closest('button');
              const isValid = validateRequiredFormFields(document.getElementById('update-meeting-stackholders-data'));
              if (isValid) {
                if (button && button.classList.contains('update-chronicle-content')) {
                  const buttonId = button.id;
                  console.log('buttonId ===>>>', buttonId)
                  const modifiedEditorId = `#${buttonId}-editor`;
                  const editorId = modifiedEditorId.replace('update-', '');
                  console.log('Modified editorId:', modifiedEditorId);
                  console.log('editorId ===>>>', editorId);

                  await updateChronicleData(`<%- BASE_URL %>chronicle-edition/${buttonId}/update`, editorId);
                }
              }
              else {
                alert('Validation Failed');
              }
            });

          //EventListener for update research content 
        updateResearchBtn.addEventListener('click', async (event) => {
              console.log('clikeddd');
              const button = event.target.closest('button');
              const isValid = validateRequiredFormFields(document.getElementById('update-research-data'));
              if (isValid) {
                if (button && button.classList.contains('update-chronicle-content')) {
                  const buttonId = button.id;
                  console.log('buttonId ===>>>', buttonId)
                  const modifiedEditorId = `#${buttonId}-editor`;
                  const editorId = modifiedEditorId.replace('update-', '');
                  console.log('Modified editorId:', modifiedEditorId);
                  console.log('editorId ===>>>', editorId);

                  await updateChronicleData(`<%- BASE_URL %>chronicle-edition/${buttonId}/update`, editorId);
                }
              }
              else {
                alert('Validation Failed');
              }
            });

        //EventListener for update  contentbranding 
        updateBrandingDataBtn.addEventListener('click', async (event) => {
              console.log('clikeddd');
              const button = event.target.closest('button');
              const isValid = validateRequiredFormFields(document.getElementById('update-advertising-data'));
              if (isValid) {
                if (button && button.classList.contains('update-chronicle-content')) {
                  const buttonId = button.id;
                  console.log('buttonId ===>>>', buttonId)
                  const modifiedEditorId = `#${buttonId}-editor`;
                  const editorId = modifiedEditorId.replace('update-', '');
                  console.log('Modified editorId:', modifiedEditorId);
                  console.log('editorId ===>>>', editorId);

                  await updateChronicleData(`<%- BASE_URL %>chronicle-edition/${buttonId}/update`, editorId);
                }
              }
              else {
                alert('Validation Failed');
              }

            });
      
        // function for date input that input will accept by html  input filed for display stopred value
        function formatDateForInput(dateStr) {
              const parts = dateStr.split('/'); // Split the string into parts using "/"
              const year = parts[2];
              const month = parts[1].padStart(2, '0'); // Ensure two digits for month
              const day = parts[0].padStart(2, '0'); // Ensure two digits for day

              // Construct the ISO formatted date string (YYYY-MM-DD)
              const isoDateStr = `${year}-${month}-${day}`;
              return isoDateStr;
            }


  </script>
<%- include('./partials/pagination') %>
<%- include('./partials/footer') %>
<%- include('./partials/footer-end') %>